import { Component, Input } from '@angular/core';
import { LayerGroup } from '@dlr-eoc/services-layers';
import * as i0 from "@angular/core";
import * as i1 from "../layerentry-group/layerentry-group.component";
import * as i2 from "../layerentry/layerentry.component";
import * as i3 from "@angular/cdk/drag-drop";
import * as i4 from "@angular/common";
import * as i5 from "../utils/array-reverse.pipe";
import * as i6 from "../utils/obj-type.pipe";
export class LayerControlComponent {
    constructor() {
        this.layerfilter = 'Layers';
        this.layergroups = [];
    }
    ngOnInit() {
        this.layerGroupsSubscription = this.layersSvc.getLayerGroups().subscribe(layergroups => {
            this.layergroups = layergroups;
            /**
             * filter only in template so reordering of layers with set layergroups is working
             */
            // this.layergroups = layergroups.filter((group) => group.filtertype === this.layerfilter || group.filtertype === this.layerfilter);
        });
    }
    isLayerGroup(group) {
        if (group instanceof LayerGroup) {
            return true;
        }
        else {
            return false;
        }
    }
    ngOnDestroy() {
        this.layerGroupsSubscription.unsubscribe();
    }
    // CDKDRagAndDrop -------------------------------------------------------------
    // https://material.angular.io/cdk/drag-drop/api
    drop(event) {
        const groupLayers = this.layergroups;
        const groupLeng = groupLayers.length;
        const fiteredLayers = event.container.data; // filtered by [cdkDropListData]
        const groupFiteredLeng = fiteredLayers.length;
        let previousIFinal, newIFinal;
        /**
         * calc index with pipe reverse order
         */
        if (groupLeng === groupFiteredLeng) {
            const previousIndex = groupLeng - event.previousIndex - 1;
            const newIndex = groupLeng - event.currentIndex - 1;
            previousIFinal = previousIndex;
            newIFinal = newIndex;
        }
        else {
            /**
             * If array is filtered get previousIndex by item.data and try to calculate ne index
             * get layers for cdk indexes - 'connect' 'event.container.data' and the original not filtered data
             */
            const newLayer = fiteredLayers[event.currentIndex];
            const previousIndex = groupLayers.findIndex(l => l.id === event.item.data.id);
            let newIndex = groupLayers.findIndex(l => l.id === newLayer.id);
            // Item is not moved
            if (event.previousIndex === event.currentIndex) {
                newIndex = previousIndex;
            }
            previousIFinal = previousIndex;
            newIFinal = newIndex;
        }
        this.layersSvc.arrayMove(this.layergroups, previousIFinal, newIFinal);
        this.layersSvc.setLayerGroups(this.layergroups);
    }
    checkBaselayer(layer, group) {
        if (layer.filtertype === 'Baselayers' || group && group.filtertype === 'Baselayers') {
            return true;
        }
        else {
            return false;
        }
    }
    checkClassHide(layerOrGroup) {
        const hasHide = layerOrGroup?.cssClass?.includes('hide') || false;
        return !hasHide;
    }
}
LayerControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayerControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LayerControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LayerControlComponent, selector: "ukis-layer-control", inputs: { layersSvc: "layersSvc", mapStateSvc: "mapStateSvc", layerfilter: "layerfilter" }, ngImport: i0, template: "<div cdkDropList (cdkDropListDropped)=\"drop($event)\"\n  [cdkDropListData]=\"layergroups | itemsfilter: checkClassHide | reverse\">\n  <ng-container *ngFor=\"let group of layergroups | itemsfilter: checkClassHide | reverse\">\n    <div class=\"list-item\" cdkDragLockAxis=\"y\" cdkDrag [cdkDragData]=\"{id:group.id}\">\n      <ukis-layerentry-group *ngIf=\" isLayerGroup(group) && group.filtertype===layerfilter\" [layersSvc]=\"layersSvc\"\n        [mapState]=\"mapStateSvc\" [group]=\"group\" [layerGroups]=\"layergroups\">\n        <span class=\"move-item\" cdkDragHandle>\n          {{group.displayName || group.name}}\n        </span>\n      </ukis-layerentry-group>\n      <ukis-layerentry *ngIf=\"!isLayerGroup(group) && group.filtertype === layerfilter\" [layerGroups]=\"layergroups\"\n        [expanded]=\"false\" [layersSvc]=\"layersSvc\" [mapState]=\"mapStateSvc\" [layer]=\"group\" [group]=\"null\">\n        <span class=\"move-item\" cdkDragHandle>\n          {{group.displayName || group.name}}\n        </span>\n      </ukis-layerentry>\n    </div>\n  </ng-container>\n\n</div>\n", styles: [".list-item{cursor:pointer}.move-item{cursor:move}.cdk-drag-preview{display:flex;align-items:center;padding:15px 10px;box-sizing:border-box;border-radius:2px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;overflow:hidden}.cdk-drag-placeholder{opacity:.2}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-box:last-child{border:none}.cdk-drop-list-dragging .list-item:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}\n"], components: [{ type: i1.LayerentryGroupComponent, selector: "ukis-layerentry-group", inputs: ["layersSvc", "mapState", "group", "layerGroups"] }, { type: i2.LayerentryComponent, selector: "ukis-layerentry", inputs: ["layersSvc", "mapState", "layer", "group", "layerGroups", "expanded", "expandable"], outputs: ["update"] }], directives: [{ type: i3.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }], pipes: { "reverse": i5.ReversePipe, "itemsfilter": i6.ItemsFilterPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayerControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-layer-control', template: "<div cdkDropList (cdkDropListDropped)=\"drop($event)\"\n  [cdkDropListData]=\"layergroups | itemsfilter: checkClassHide | reverse\">\n  <ng-container *ngFor=\"let group of layergroups | itemsfilter: checkClassHide | reverse\">\n    <div class=\"list-item\" cdkDragLockAxis=\"y\" cdkDrag [cdkDragData]=\"{id:group.id}\">\n      <ukis-layerentry-group *ngIf=\" isLayerGroup(group) && group.filtertype===layerfilter\" [layersSvc]=\"layersSvc\"\n        [mapState]=\"mapStateSvc\" [group]=\"group\" [layerGroups]=\"layergroups\">\n        <span class=\"move-item\" cdkDragHandle>\n          {{group.displayName || group.name}}\n        </span>\n      </ukis-layerentry-group>\n      <ukis-layerentry *ngIf=\"!isLayerGroup(group) && group.filtertype === layerfilter\" [layerGroups]=\"layergroups\"\n        [expanded]=\"false\" [layersSvc]=\"layersSvc\" [mapState]=\"mapStateSvc\" [layer]=\"group\" [group]=\"null\">\n        <span class=\"move-item\" cdkDragHandle>\n          {{group.displayName || group.name}}\n        </span>\n      </ukis-layerentry>\n    </div>\n  </ng-container>\n\n</div>\n", styles: [".list-item{cursor:pointer}.move-item{cursor:move}.cdk-drag-preview{display:flex;align-items:center;padding:15px 10px;box-sizing:border-box;border-radius:2px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;overflow:hidden}.cdk-drag-placeholder{opacity:.2}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-box:last-child{border:none}.cdk-drop-list-dragging .list-item:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { layersSvc: [{
                type: Input,
                args: ['layersSvc']
            }], mapStateSvc: [{
                type: Input,
                args: ['mapStateSvc']
            }], layerfilter: [{
                type: Input,
                args: ['layerfilter']
            }] } });
//# sourceMappingURL=data:application/json;base64,