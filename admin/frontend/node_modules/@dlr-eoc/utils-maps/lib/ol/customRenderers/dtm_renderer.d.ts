import LayerRenderer from 'ol/renderer/Layer';
import ImageLayer from 'ol/layer/Image';
import ImageSource from 'ol/source/Image';
import { FrameState } from 'ol/PluggableMap';
import { Shader } from '../../webgl/engine.core';
export declare class DtmLayer extends ImageLayer<ImageSource> {
    private renderer;
    constructor(options: any);
    createRenderer(): DtmImageRenderer;
    updateSunAngle(angle: number[]): void;
}
/**
 * This renderer serves as a illustration of a very common technique in WebGL: normal-maps.
 * Here we use a texture from NASA's SRTM mission as our base-DTM.
 * Based on this, we calculate surface-normals. For each pixel in the DTM, we check how the surface-normal
 * is aligned with an incoming sun-ray.
 *
 * In real-world applications, many more such techniques are employed. Alongside normal-maps there are:
 *  - specular maps,
 *  - occlusion maps,
 *  - ...
 */
export declare class DtmImageRenderer extends LayerRenderer<ImageLayer<ImageSource>> {
    readonly canvas: HTMLCanvasElement;
    readonly gl: WebGLRenderingContext;
    readonly shader: Shader;
    readonly projection: any;
    private state;
    constructor(layer: ImageLayer<ImageSource>);
    prepareFrame(frameState: FrameState): boolean;
    renderFrame(frameState: FrameState, target: HTMLElement): HTMLElement;
    renderDeclutter(frameState: FrameState): void;
    updateSunAngle(angle: number[]): void;
    private bboxOntoRectangle;
    private reprojectImage;
    private transformCanvas;
}
