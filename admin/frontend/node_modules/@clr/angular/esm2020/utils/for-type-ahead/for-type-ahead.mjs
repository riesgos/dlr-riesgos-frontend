/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input } from '@angular/core';
import { ForTypeAheadProvider } from './for-type-ahead.service';
import * as i0 from "@angular/core";
import * as i1 from "./for-type-ahead.service";
// The purpose of this directive is to provide the text content of its host element
// or text content that's passed to its input.
// This directive must stay optional. So do not embed this directive in a component module by default.
// If users need to use this directive, they should import its module on their side.
export class ClrForTypeAhead {
    constructor(el, forTypeAheadProvider) {
        this.el = el;
        this.forTypeAheadProvider = forTypeAheadProvider;
    }
    trimAndLowerCase(value) {
        return value.toLocaleLowerCase().trim();
    }
    get content() {
        return this._content;
    }
    set content(value) {
        if (value) {
            this._content = this.trimAndLowerCase(value);
            this.forTypeAheadProvider.textContent = this._content;
        }
        else {
            this._content = this.trimAndLowerCase(this.el.nativeElement.textContent);
            this.forTypeAheadProvider.textContent = this._content;
        }
    }
    ngOnInit() {
        if (!this._content) {
            this._content = this.trimAndLowerCase(this.el.nativeElement.textContent);
            this.forTypeAheadProvider.textContent = this._content;
        }
    }
}
ClrForTypeAhead.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrForTypeAhead, deps: [{ token: i0.ElementRef }, { token: i1.ForTypeAheadProvider }], target: i0.ɵɵFactoryTarget.Directive });
ClrForTypeAhead.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: ClrForTypeAhead, selector: "[clrForTypeAhead]", inputs: { content: ["clrForTypeAhead", "content"] }, providers: [ForTypeAheadProvider], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrForTypeAhead, decorators: [{
            type: Directive,
            args: [{
                    providers: [ForTypeAheadProvider],
                    selector: '[clrForTypeAhead]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ForTypeAheadProvider }]; }, propDecorators: { content: [{
                type: Input,
                args: ['clrForTypeAhead']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLXR5cGUtYWhlYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyL3NyYy91dGlscy9mb3ItdHlwZS1haGVhZC9mb3ItdHlwZS1haGVhZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQUVoRSxtRkFBbUY7QUFDbkYsOENBQThDO0FBRTlDLHNHQUFzRztBQUN0RyxvRkFBb0Y7QUFNcEYsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFBb0IsRUFBYyxFQUFVLG9CQUEwQztRQUFsRSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtJQUFHLENBQUM7SUFFbEYsZ0JBQWdCLENBQUMsS0FBYTtRQUNwQyxPQUFPLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFJRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQThCLE9BQU8sQ0FBQyxLQUFhO1FBQ2pELElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3ZEO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN2RDtJQUNILENBQUM7OzRHQTVCVSxlQUFlO2dHQUFmLGVBQWUsaUdBSGYsQ0FBQyxvQkFBb0IsQ0FBQzsyRkFHdEIsZUFBZTtrQkFKM0IsU0FBUzttQkFBQztvQkFDVCxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDakMsUUFBUSxFQUFFLG1CQUFtQjtpQkFDOUI7b0lBYytCLE9BQU87c0JBQXBDLEtBQUs7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIyIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JUeXBlQWhlYWRQcm92aWRlciB9IGZyb20gJy4vZm9yLXR5cGUtYWhlYWQuc2VydmljZSc7XG5cbi8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgZGlyZWN0aXZlIGlzIHRvIHByb3ZpZGUgdGhlIHRleHQgY29udGVudCBvZiBpdHMgaG9zdCBlbGVtZW50XG4vLyBvciB0ZXh0IGNvbnRlbnQgdGhhdCdzIHBhc3NlZCB0byBpdHMgaW5wdXQuXG5cbi8vIFRoaXMgZGlyZWN0aXZlIG11c3Qgc3RheSBvcHRpb25hbC4gU28gZG8gbm90IGVtYmVkIHRoaXMgZGlyZWN0aXZlIGluIGEgY29tcG9uZW50IG1vZHVsZSBieSBkZWZhdWx0LlxuLy8gSWYgdXNlcnMgbmVlZCB0byB1c2UgdGhpcyBkaXJlY3RpdmUsIHRoZXkgc2hvdWxkIGltcG9ydCBpdHMgbW9kdWxlIG9uIHRoZWlyIHNpZGUuXG5cbkBEaXJlY3RpdmUoe1xuICBwcm92aWRlcnM6IFtGb3JUeXBlQWhlYWRQcm92aWRlcl0sXG4gIHNlbGVjdG9yOiAnW2NsckZvclR5cGVBaGVhZF0nLFxufSlcbmV4cG9ydCBjbGFzcyBDbHJGb3JUeXBlQWhlYWQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGZvclR5cGVBaGVhZFByb3ZpZGVyOiBGb3JUeXBlQWhlYWRQcm92aWRlcikge31cblxuICBwcml2YXRlIHRyaW1BbmRMb3dlckNhc2UodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbnRlbnQ6IHN0cmluZztcblxuICBnZXQgY29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgfVxuXG4gIEBJbnB1dCgnY2xyRm9yVHlwZUFoZWFkJykgc2V0IGNvbnRlbnQodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fY29udGVudCA9IHRoaXMudHJpbUFuZExvd2VyQ2FzZSh2YWx1ZSk7XG4gICAgICB0aGlzLmZvclR5cGVBaGVhZFByb3ZpZGVyLnRleHRDb250ZW50ID0gdGhpcy5fY29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29udGVudCA9IHRoaXMudHJpbUFuZExvd2VyQ2FzZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQpO1xuICAgICAgdGhpcy5mb3JUeXBlQWhlYWRQcm92aWRlci50ZXh0Q29udGVudCA9IHRoaXMuX2NvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLl9jb250ZW50KSB7XG4gICAgICB0aGlzLl9jb250ZW50ID0gdGhpcy50cmltQW5kTG93ZXJDYXNlKHRoaXMuZWwubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCk7XG4gICAgICB0aGlzLmZvclR5cGVBaGVhZFByb3ZpZGVyLnRleHRDb250ZW50ID0gdGhpcy5fY29udGVudDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==