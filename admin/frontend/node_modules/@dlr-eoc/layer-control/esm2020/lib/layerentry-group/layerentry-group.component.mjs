import { Component, Input, HostBinding } from '@angular/core';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import * as i0 from "@angular/core";
import * as i1 from "@dlr-eoc/core-ui";
import * as i2 from "../layerentry/layerentry.component";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/common";
import * as i5 from "@angular/cdk/drag-drop";
import * as i6 from "../utils/array-reverse.pipe";
import * as i7 from "../utils/obj-type.pipe";
export class LayerentryGroupComponent {
    constructor() {
        // public visible: boolean = true;
        this.canZoomToGroup = false;
        this.showInfo = false;
        this.showAction = true;
    }
    get visible() { return this.group.visible; }
    get cssClass() { return this.group.cssClass; }
    set openAllLayersProperties(value) {
        if (this.group && this.group.layers.length) {
            this.group.layers.forEach(l => l.expanded = value);
        }
    }
    get openAllLayersProperties() {
        if (this.group && this.group.layers.length) {
            return this.group.layers.filter(l => l.expanded === true).length === this.group.layers.length;
        }
        else {
            return false;
        }
    }
    ngOnInit() {
        if (this.group.bbox && this.group.bbox.length >= 4) {
            this.canZoomToGroup = true;
        }
        if (!this.group?.action) {
            this.showAction = false;
        }
    }
    /**
     * obj: {any| IDynamicComponent}
     */
    checkIsComponentItem(group, compProp) {
        const obj = group[compProp];
        let isComp = false;
        if (obj && typeof obj === 'object') {
            if ('component' in obj) {
                if (!obj.inputs) {
                    // https://2ality.com/2014/01/object-assign.html#2.3
                    const groupClone = Object.assign({ __proto__: this.group['__proto__'] }, group);
                    if (groupClone && groupClone[compProp]) {
                        delete groupClone[compProp];
                    }
                    obj.inputs = { group: groupClone };
                }
                else if (obj.inputs && !obj.inputs.group) {
                    // https://2ality.com/2014/01/object-assign.html#2.3
                    const groupClone = Object.assign({ __proto__: this.group['__proto__'] }, group);
                    if (groupClone && groupClone[compProp]) {
                        delete groupClone[compProp];
                    }
                    obj.inputs = Object.assign({ group: groupClone }, obj.inputs);
                }
                isComp = true;
            }
        }
        return isComp;
    }
    checkBaselayer(group) {
        if (group && group.filtertype === 'Baselayers') {
            return true;
        }
        else {
            return false;
        }
    }
    checkClassHide(layer) {
        const hasHide = layer?.cssClass?.includes('hide') || false;
        return !hasHide;
    }
    getLayerName(group) {
        if (group.displayName) {
            return group.displayName;
        }
        else {
            return group.name;
        }
    }
    setLayerGroupIndex(group, dir) {
        this.layersSvc.setGroupLayerIndex(group, dir);
    }
    setGroupLayersVisibility() {
        this.group.visible = !this.group.visible;
        this.layersSvc.updateLayerGroup(this.group);
    }
    removeLayerGroup(group) {
        this.layersSvc.removeLayerGroup(group);
    }
    zoomTo(group) {
        if (this.mapState && group.bbox && group.bbox.length >= 4) {
            this.mapState.setExtent(group.bbox);
        }
    }
    layerUpdate(event, group) {
        const layer = event.layer;
        /** update event layer in the group... this is done by object reference!! */
        /* const updateLayerIndex = group.layers.findIndex(l => l.id === layer.id);
        if (updateLayerIndex !== -1) {
          group.layers[updateLayerIndex] = layer;
        } */
        this.layersSvc.updateLayerGroup(group);
    }
    showProperties() {
        this.group.expanded = !this.group.expanded;
    }
    showHideAllDetails() {
        this.openAllLayersProperties = !this.openAllLayersProperties;
        this.showAction = this.openAllLayersProperties;
        this.showInfo = this.openAllLayersProperties;
    }
    isFirst(group) {
        return this.layersSvc.isGroupFirst(group, this.layerGroups, group.filtertype);
    }
    isLast(group) {
        return this.layersSvc.isGroupLast(group, this.layerGroups, group.filtertype);
    }
    // CDKDRagAndDrop -------------------------------------------------------------
    // https://material.angular.io/cdk/drag-drop/api
    drop(event) {
        const groupLayers = this.group.layers;
        const groupLeng = groupLayers.length;
        const fiteredLayers = event.container.data; // filtered by [cdkDropListData]
        const groupFiteredLeng = fiteredLayers.length;
        let previousIFinal, newIFinal;
        /**
         * calc index with pipe reverse order
         */
        if (groupLeng === groupFiteredLeng) {
            const previousIndex = groupLeng - event.previousIndex - 1;
            const newIndex = groupLeng - event.currentIndex - 1;
            previousIFinal = previousIndex;
            newIFinal = newIndex;
        }
        else {
            /**
             * If array is filtered get previousIndex by item.data and try to calculate ne index
             * get layers for cdk indexes - 'connect' 'event.container.data' and the original not filtered data
             */
            const newLayer = fiteredLayers[event.currentIndex];
            const previousIndex = groupLayers.findIndex(l => l.id === event.item.data.id);
            let newIndex = groupLayers.findIndex(l => l.id === newLayer.id);
            // Item is not moved
            if (event.previousIndex === event.currentIndex) {
                newIndex = previousIndex;
            }
            previousIFinal = previousIndex;
            newIFinal = newIndex;
        }
        moveItemInArray(this.group.layers, previousIFinal, newIFinal);
        this.layersSvc.updateLayerGroup(this.group);
    }
}
LayerentryGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayerentryGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LayerentryGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LayerentryGroupComponent, selector: "ukis-layerentry-group", inputs: { layersSvc: "layersSvc", mapState: "mapState", group: "group", layerGroups: "layerGroups" }, host: { properties: { "class.group-visible": "this.visible", "class": "this.cssClass" } }, ngImport: i0, template: "<div class=\"layergroup\">\n  <div class=\"head\">\n    <!-- layer expand icon -->\n    <clr-icon [attr.shape]=\"group.expanded?'folder-open':'folder'\" class=\"iconButton\" (click)=\"showProperties()\"\n      title=\"{{group.expanded?'Close':'Open'}}\"></clr-icon>\n\n\n    <!-- layer title -->\n    <div #ref class=\"item-title-replacement title\" (click)=\"showProperties()\" [title]=\"getLayerName(group)\">\n      <ng-content></ng-content>\n    </div>\n    <span *ngIf=\"ref.children.length == 0\" class=\"title\" [title]=\"getLayerName(group)\" (click)=\"showProperties()\">\n      {{getLayerName(group)}}\n    </span>\n\n    <!-- setLayerGroupIndex // for reversed layergroups on ngFor up is down -->\n    <span *ngIf=\"layerGroups.length>1\">\n      <clr-icon class=\"iconButton move-item\" [ngClass]=\"{'disabled':isLast(group)}\" shape=\"arrow\"\n        (click)=\"setLayerGroupIndex(group, 'down')\" title=\"up\"></clr-icon>\n      <clr-icon class=\"iconButton move-item\" [ngClass]=\"{'disabled':isFirst(group)}\" shape=\"arrow\"\n        (click)=\"setLayerGroupIndex(group, 'up')\" title=\"down\" dir=\"down\"></clr-icon>\n    </span>\n\n    <!-- setGroupLayersVisibility -->\n    <span *ngIf=\"!checkBaselayer(group)\">\n      <input class=\"hide\" [type]=\"'checkbox'\" [checked]=\"group.visible\" [name]=\"'group'\" [id]=\"group.id\"\n        (change)=\"setGroupLayersVisibility()\">\n      <label [for]=\"group.id\">\n        <clr-icon class=\"iconButton\" [ngClass]=\"{'is-solid':group.visible}\"\n          [attr.shape]=\"group.visible?'eye':'eye-hide'\" title=\"{{group.visible?'Hide Group':'Show Group'}}\"></clr-icon>\n      </label>\n    </span>\n  </div>\n\n  <div *ngIf=\"group.expanded\" class=\"body\">\n    <!-- tools: zoomTo, remove, open all Tabs -->\n    <div class=\"tools\">\n      <clr-icon *ngFor=\"let item of group.actions\" [attr.shape]=\"item.icon\" class=\"iconButton\"\n        (click)=\"item.action(group)\" [title]=\"item.title\">\n      </clr-icon>\n\n      <clr-icon *ngIf=\"group.action\" shape=\"cog\" class=\"iconButton\" [ngClass]=\"{'is-solid':showAction}\"\n        (click)=\"showAction = !showAction\" title=\"{{!showAction?'Show settings': 'Hide settings'}}\"></clr-icon>\n\n      <clr-icon *ngIf=\"group.description\" shape=\"info-standard\" class=\"iconButton\" [ngClass]=\"{'is-solid':showInfo}\"\n        (click)=\"showInfo = !showInfo\" title=\"{{!showInfo?'Show Info': 'Hide Info'}}\"></clr-icon>\n      <clr-icon shape=\"details\" class=\"iconButton\" [ngClass]=\"{'is-solid':openAllLayersProperties}\"\n        (click)=\"showHideAllDetails()\"\n        title=\"{{!openAllLayersProperties?'Show all layers details': 'Hide all layers details'}}\"></clr-icon>\n\n      <span></span>\n      <clr-icon *ngIf=\"canZoomToGroup\" shape=\"zoom-in\" class=\"iconButton\" (click)=\"zoomTo(group)\" title=\"Zoom to group\">\n      </clr-icon>\n      <clr-icon *ngIf=\"group.removable\" shape=\"trash\" class=\"iconButton\" (click)=\"removeLayerGroup(group)\"\n        title=\"Remove group\"></clr-icon>\n    </div>\n\n    <div class=\"info\" *ngIf=\"showInfo\">\n      <span [innerHTML]=\"group.description\"></span>\n    </div>\n    <div *ngIf=\"group.action && showAction\" class=\"tabsbody\">\n      <ng-container *ngIf=\"checkIsComponentItem(group, 'action');\">\n        <ukis-dynamic-component [(dynamicComponent)]=\"group.action\">\n        </ukis-dynamic-component>\n      </ng-container>\n    </div>\n\n\n    <!-- (cdkDropListSorted)=\"sort($event)\"  -->\n    <div cdkDropList (cdkDropListDropped)=\"drop($event)\"\n      [cdkDropListData]=\"group.layers | itemsfilter: checkClassHide | reverse\">\n      <ng-container *ngFor=\"let layer of group.layers | itemsfilter: checkClassHide | reverse\">\n        <div class=\"sublayers\" cdkDragLockAxis=\"y\" cdkDrag [cdkDragData]=\"{id:layer.id}\">\n          <ukis-layerentry [expanded]=\"openAllLayersProperties\" [layersSvc]=\"layersSvc\" [mapState]=\"mapState\"\n            [layer]=\"layer\" [group]=\"group\" (update)=\"layerUpdate($event, group)\">\n            <span class=\"move-item\" cdkDragHandle>\n              {{layer.displayName || layer.name}}\n            </span>\n          </ukis-layerentry>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n", styles: [".title{cursor:pointer}.item-title-replacement:empty{display:none}.cdk-drag-preview{display:flex;align-items:center;padding:0 10px;box-sizing:border-box;border-radius:2px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;overflow:hidden}.cdk-drag-placeholder{opacity:.2}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-box:last-child{border:none}.cdk-drop-list-dragging .sublayers:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.info{padding-left:.2rem}\n"], components: [{ type: i1.DynamicComponentComponent, selector: "ukis-dynamic-component", inputs: ["dynamicComponent"], outputs: ["dynamicComponentChange"] }, { type: i2.LayerentryComponent, selector: "ukis-layerentry", inputs: ["layersSvc", "mapState", "layer", "group", "layerGroups", "expanded", "expandable"], outputs: ["update"] }], directives: [{ type: i3.ClrIconCustomTag, selector: "clr-icon" }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i5.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i5.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }], pipes: { "reverse": i6.ReversePipe, "itemsfilter": i7.ItemsFilterPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayerentryGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-layerentry-group', template: "<div class=\"layergroup\">\n  <div class=\"head\">\n    <!-- layer expand icon -->\n    <clr-icon [attr.shape]=\"group.expanded?'folder-open':'folder'\" class=\"iconButton\" (click)=\"showProperties()\"\n      title=\"{{group.expanded?'Close':'Open'}}\"></clr-icon>\n\n\n    <!-- layer title -->\n    <div #ref class=\"item-title-replacement title\" (click)=\"showProperties()\" [title]=\"getLayerName(group)\">\n      <ng-content></ng-content>\n    </div>\n    <span *ngIf=\"ref.children.length == 0\" class=\"title\" [title]=\"getLayerName(group)\" (click)=\"showProperties()\">\n      {{getLayerName(group)}}\n    </span>\n\n    <!-- setLayerGroupIndex // for reversed layergroups on ngFor up is down -->\n    <span *ngIf=\"layerGroups.length>1\">\n      <clr-icon class=\"iconButton move-item\" [ngClass]=\"{'disabled':isLast(group)}\" shape=\"arrow\"\n        (click)=\"setLayerGroupIndex(group, 'down')\" title=\"up\"></clr-icon>\n      <clr-icon class=\"iconButton move-item\" [ngClass]=\"{'disabled':isFirst(group)}\" shape=\"arrow\"\n        (click)=\"setLayerGroupIndex(group, 'up')\" title=\"down\" dir=\"down\"></clr-icon>\n    </span>\n\n    <!-- setGroupLayersVisibility -->\n    <span *ngIf=\"!checkBaselayer(group)\">\n      <input class=\"hide\" [type]=\"'checkbox'\" [checked]=\"group.visible\" [name]=\"'group'\" [id]=\"group.id\"\n        (change)=\"setGroupLayersVisibility()\">\n      <label [for]=\"group.id\">\n        <clr-icon class=\"iconButton\" [ngClass]=\"{'is-solid':group.visible}\"\n          [attr.shape]=\"group.visible?'eye':'eye-hide'\" title=\"{{group.visible?'Hide Group':'Show Group'}}\"></clr-icon>\n      </label>\n    </span>\n  </div>\n\n  <div *ngIf=\"group.expanded\" class=\"body\">\n    <!-- tools: zoomTo, remove, open all Tabs -->\n    <div class=\"tools\">\n      <clr-icon *ngFor=\"let item of group.actions\" [attr.shape]=\"item.icon\" class=\"iconButton\"\n        (click)=\"item.action(group)\" [title]=\"item.title\">\n      </clr-icon>\n\n      <clr-icon *ngIf=\"group.action\" shape=\"cog\" class=\"iconButton\" [ngClass]=\"{'is-solid':showAction}\"\n        (click)=\"showAction = !showAction\" title=\"{{!showAction?'Show settings': 'Hide settings'}}\"></clr-icon>\n\n      <clr-icon *ngIf=\"group.description\" shape=\"info-standard\" class=\"iconButton\" [ngClass]=\"{'is-solid':showInfo}\"\n        (click)=\"showInfo = !showInfo\" title=\"{{!showInfo?'Show Info': 'Hide Info'}}\"></clr-icon>\n      <clr-icon shape=\"details\" class=\"iconButton\" [ngClass]=\"{'is-solid':openAllLayersProperties}\"\n        (click)=\"showHideAllDetails()\"\n        title=\"{{!openAllLayersProperties?'Show all layers details': 'Hide all layers details'}}\"></clr-icon>\n\n      <span></span>\n      <clr-icon *ngIf=\"canZoomToGroup\" shape=\"zoom-in\" class=\"iconButton\" (click)=\"zoomTo(group)\" title=\"Zoom to group\">\n      </clr-icon>\n      <clr-icon *ngIf=\"group.removable\" shape=\"trash\" class=\"iconButton\" (click)=\"removeLayerGroup(group)\"\n        title=\"Remove group\"></clr-icon>\n    </div>\n\n    <div class=\"info\" *ngIf=\"showInfo\">\n      <span [innerHTML]=\"group.description\"></span>\n    </div>\n    <div *ngIf=\"group.action && showAction\" class=\"tabsbody\">\n      <ng-container *ngIf=\"checkIsComponentItem(group, 'action');\">\n        <ukis-dynamic-component [(dynamicComponent)]=\"group.action\">\n        </ukis-dynamic-component>\n      </ng-container>\n    </div>\n\n\n    <!-- (cdkDropListSorted)=\"sort($event)\"  -->\n    <div cdkDropList (cdkDropListDropped)=\"drop($event)\"\n      [cdkDropListData]=\"group.layers | itemsfilter: checkClassHide | reverse\">\n      <ng-container *ngFor=\"let layer of group.layers | itemsfilter: checkClassHide | reverse\">\n        <div class=\"sublayers\" cdkDragLockAxis=\"y\" cdkDrag [cdkDragData]=\"{id:layer.id}\">\n          <ukis-layerentry [expanded]=\"openAllLayersProperties\" [layersSvc]=\"layersSvc\" [mapState]=\"mapState\"\n            [layer]=\"layer\" [group]=\"group\" (update)=\"layerUpdate($event, group)\">\n            <span class=\"move-item\" cdkDragHandle>\n              {{layer.displayName || layer.name}}\n            </span>\n          </ukis-layerentry>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n", styles: [".title{cursor:pointer}.item-title-replacement:empty{display:none}.cdk-drag-preview{display:flex;align-items:center;padding:0 10px;box-sizing:border-box;border-radius:2px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;overflow:hidden}.cdk-drag-placeholder{opacity:.2}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-box:last-child{border:none}.cdk-drop-list-dragging .sublayers:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.info{padding-left:.2rem}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { visible: [{
                type: HostBinding,
                args: ['class.group-visible']
            }], cssClass: [{
                type: HostBinding,
                args: ['class']
            }], layersSvc: [{
                type: Input,
                args: ['layersSvc']
            }], mapState: [{
                type: Input,
                args: ['mapState']
            }], group: [{
                type: Input,
                args: ['group']
            }], layerGroups: [{
                type: Input,
                args: ['layerGroups']
            }] } });
//# sourceMappingURL=data:application/json;base64,