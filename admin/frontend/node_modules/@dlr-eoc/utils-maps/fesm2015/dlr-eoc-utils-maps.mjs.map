{"version":3,"file":"dlr-eoc-utils-maps.mjs","sources":["../../../projects/utils-maps/src/lib/ol/utils-ol.ts","../../../projects/utils-maps/src/lib/webgl/utils.ts","../../../projects/utils-maps/src/lib/webgl/webgl.ts","../../../projects/utils-maps/src/lib/webgl/engine.core.ts","../../../projects/utils-maps/src/lib/webgl/engine.shapes.ts","../../../projects/utils-maps/src/lib/webgl/engine.helpers.ts","../../../projects/utils-maps/src/lib/ol/customRenderers/dtm_renderer.ts","../../../projects/utils-maps/src/lib/ol/customRenderers/interpolation_renderer.ts","../../../projects/utils-maps/src/lib/ol/customRenderers/particle_renderer.ts","../../../projects/utils-maps/src/public-api.ts","../../../projects/utils-maps/src/dlr-eoc-utils-maps.ts"],"sourcesContent":["import { Map, View } from 'ol';\nimport { Layer } from 'ol/layer';\nimport BaseLayer from 'ol/layer/Base';\nimport LayerGroup from 'ol/layer/Group';\nimport RenderEvent from 'ol/render/Event';\nimport { EventsKey } from 'ol/events';\nimport { unByKey } from 'ol/Observable';\nimport Interaction from 'ol/interaction/Interaction';\n\n\n\n\n\nexport function flattenLayers(layers: BaseLayer[]): Layer<any>[] {\n    let flattenedLayers: Layer<any>[] = [];\n    for (const layer of layers) {\n        if (layer instanceof LayerGroup) {\n            const subLayers = layer.getLayers().getArray();\n            const flattenedSubLayers = flattenLayers(subLayers);\n            flattenedLayers = Array.prototype.concat(flattenedLayers, flattenedSubLayers);\n        } else {\n            // this cast is ok: since `layer` is no LayerGroup, it must be a Layer.\n            // See the `Subclasses` section here: https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html\n            flattenedLayers.push(layer as Layer<any>);\n        }\n    }\n    return flattenedLayers;\n}\n\n\n\n/** Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. */\n/**\n * Merges all layers of a map into one canvas image.\n * Assumes that the ``targetCanvas`` has the same size as the map! If it doesn't, use `scaledMapToSingleCanvas` instead.\n * Create a target-canvas of an appropriate size.\n *  1. Trigger a layer-re-render.\n *  2. For each layer, we capture the 'postrender' event ...\n *  3. ... and copy the canvas-bitmap into the target.\n *\n * Note: if the user moves the original map while the render-process is still ongoing, this can distort the output.\n * We would suggest to deactivate user-interactions until the 'onDone' callback has been received.\n *\n * Note also: Before passing the canvas, set its drawing-buffer size: `canvas.width` and `canvas.height`.\n * This is the size of the actually drawn image in pixels.\n * Note that this value may differ from clientWidth/clientHeight: that is the size to which the actual image is scaled to in the DOM.\n */\nexport function mapToSingleCanvas(map: Map, targetCanvas: HTMLCanvasElement | OffscreenCanvas,\n    onDone: (updatedTargetCanvas: HTMLCanvasElement | OffscreenCanvas) => void, keepSynced = false): void {\n\n    // Step 0: inspecting targetCanvas\n    const targetContext = targetCanvas.getContext('2d');\n    if (!targetContext) {\n        throw new Error('The target-canvas needs to use a 2d-context.');\n    }\n    if (!targetCanvas.width || !targetCanvas.height) {\n        throw new Error('TargetCanvas: width or height have not been set.');\n    }\n    targetContext.clearRect(0, 0, targetCanvas.width, targetCanvas.height);\n\n    const mapSize = map.getSize();\n    const mapResolution = map.getView().getResolution();\n    targetCanvas.width = mapSize[0];\n    targetCanvas.height = mapSize[1];\n\n    const layers = flattenLayers(map.getLayers().getArray());\n    const subscriptions: EventsKey[] = [];\n    for (const layer of layers) {\n        if (layer.getVisible() && layer.getOpacity() > 0.0) {\n            // Step 2: catch each layer's postrender event.\n            // Note that ol/renderer/webgl/* does not call `this.postRender(context, frameState)`\n            // in `renderFrame` - so heatmaps won't be copied here!\n            const key = layer.on('postrender', (event: RenderEvent) => {\n                const sourceContext = event.context;\n                const sourceCanvas = sourceContext.canvas as HTMLCanvasElement;\n                // Step 3: copy source bitmap to target-canvas.\n                targetContext.drawImage(sourceCanvas, 0, 0, sourceCanvas.clientWidth, sourceCanvas.clientHeight, 0, 0, targetCanvas.width, targetCanvas.height);\n            });\n            if (Array.isArray(key)){\n              key.map(k => subscriptions.push(k));\n            }else{\n              subscriptions.push(key);\n            }\n        }\n    }\n\n    if (keepSynced) {\n        map.on('rendercomplete', (evt: RenderEvent) => {\n            onDone(targetCanvas);\n        });\n    } else {\n        // if we don't want the canvas to remain in sync with the map, we unsubscribe to further changes here.\n        map.once('rendercomplete', (evt: RenderEvent) => {\n            // note that a map-render-event does not have a context ... contrary to a layer-render-event.\n            for (const key of subscriptions) {\n                unByKey(key);\n            }\n            onDone(targetCanvas);\n        });\n    }\n\n    // Step 1: trigger a re-render of the map.\n    map.renderSync();\n\n}\n\n\n/**\n * Copies a map's layers onto a single canvas.\n * For this, we ...\n *  1. Update the original map's size to match the target-canvas.\n *  2. Get an image of the scaled map\n *  3. Reset the map's dimensions to the initial values.\n *\n * Note: if the user moves the original map while the render-process is still ongoing, this can distort the output.\n * We would suggest to deactivate user-interactions until the 'done' callback has been received.\n *\n * Note also: Before passing the canvas, set its drawing-buffer size: `canvas.width` and `canvas.height`.\n * This is the size of the actually drawn image in pixels.\n * Note that this value may differ from clientWidth/clientHeight: that is the size to which the actual image is scaled to in the DOM.\n */\nexport function scaledMapToSingleCanvas(map: Map, targetCanvas: HTMLCanvasElement | OffscreenCanvas,\n    onDone: (updatedTargetCanvas: HTMLCanvasElement | OffscreenCanvas) => void, keepSynced = false): void {\n    /* An alternative approach would be to create a new map with the desired size and copies of the old map's layers.\n     * This way we wouldn't have to mess with the original map's size.\n     * But unfortunately openlayers provides no means of cloning a layer.\n     * I could not find one, either: neither of JSON.parse, lodash.cloneDeep, ramda.clone or rfdc works here.\n     */\n\n    // Step 1: adjust map-size to match targetCanvas.\n    const initialMapSize = map.getSize();\n    const initialMapResolution = map.getView().getResolution();\n    map.setSize([targetCanvas.width, targetCanvas.height]);\n    const scale = Math.min(targetCanvas.width / initialMapSize[0], targetCanvas.height / initialMapSize[1]);\n    map.getView().setResolution(initialMapResolution / scale);\n\n    // Step 2: get image of scaled map\n    mapToSingleCanvas(map, targetCanvas, (updatedTargetCanvas: HTMLCanvasElement) => {\n        // Step 3: set map-size back to initial values.\n        map.setSize(initialMapSize);\n        map.getView().setResolution(initialMapResolution);\n        onDone(updatedTargetCanvas);\n    }, keepSynced);\n}\n\n\n/**\n * A comfort-function for getting a snapshot of a map into a canvas.\n * Halts all map-interactions to prevent the user from panning the map during rendering.\n * Sets the canvas' internal drawing-buffer-size: this way, the canvas' contents can be exported\n * in the drawing-buffer-size, which may differ from the display-size (the latter is set by the DOM/CSS).\n *\n * Example usage:\n * ```\n *   previewButton.addEventListener('click', () => {\n *   simpleMapToCanvas(map, previewCanvas, paper.widthPx, paper.heightPx, (updated) => {\n *       console.log('done');\n *   });\n *   downloadButton.addEventListener('click', () => {\n *      downloadUrl(previewCanvas.toDataURL('image/png'), 'full');\n *   });\n * ```\n */\nexport function simpleMapToCanvas(map: Map, targetCanvas: HTMLCanvasElement | OffscreenCanvas, drawingBufferWidth?: number, drawingBufferHeight?: number,\n    onDone?: (canvas: HTMLCanvasElement | OffscreenCanvas) => void, keepSynced = false) {\n\n    // Halting interactions: prevents user from panning map during drawing process.\n    const interactions = map.getInteractions();\n    interactions.forEach((interaction: Interaction) => {\n        interaction.setActive(false);\n    });\n\n    if (drawingBufferHeight && drawingBufferWidth) {\n        // Before passing the canvas, set its drawing-buffer size: `canvas.width` and `canvas.height`.\n        // This is the size of the actually drawn image in pixels.\n        // Note that this value may differ from clientWidth/clientHeight:\n        // that is the size to which the actual image is scaled to in the DOM.\n        targetCanvas.width = drawingBufferWidth;\n        targetCanvas.height = drawingBufferHeight;\n    }\n\n    scaledMapToSingleCanvas(map, targetCanvas, (updatedCanvas) => {\n\n        // reactivating interactions\n        interactions.forEach((interaction: Interaction) => {\n            interaction.setActive(true);\n        });\n\n        if (onDone) {\n            onDone(updatedCanvas);\n        }\n    }, keepSynced);\n}\n","export const flattenRecursive = (m: any[]): number[] => {\n    let flat: number[] = [];\n    for (const row of m) {\n        let flattenedRow;\n        if (Array.isArray(row[0])) {\n            flattenedRow = flattenRecursive(row);\n        } else {\n            flattenedRow = row;\n        }\n        flat = Array.prototype.concat(flat, flattenedRow);\n    }\n    return flat;\n};\n\n\nexport const createNDimArray = (dimensions: number[]) => {\n    if (dimensions.length > 0) {\n        const dim = dimensions[0];\n        const rest = dimensions.slice(1);\n        const newArray = new Array(dim);\n        for (let i = 0; i < dim; i++) {\n            newArray[i] = createNDimArray(rest);\n        }\n        return newArray;\n     } else {\n        return undefined;\n     }\n};\n\nexport const logN = (val: number, root: number): number => {\n    return Math.log(val) / Math.log(root);\n};\n\nexport const isPowerOf = (val: number, root: number): boolean => {\n    return logN(val, root) % 1 === 0;\n};\n\nexport const nextPowerOf = (val: number, root: number): number => {\n    const exponent = Math.ceil(logN(val, root));\n    return Math.pow(2, exponent);\n};","/**\n * WEBGL\n *\n * A rasterization engine that allows to draw points, line segments, or triangles.\n *\n * Vertex shaders take whatever coordinates you use and return a 3-d array with elements between -1 and 1.\n * Basically, this is a 3d-array, but WebGl does not use the z-axis for real perspective, but only to differentiate\n * what pixel lies in front of another.\n * This is not like looking in a 3d-box, but rather like looking on multiple stacked sheets on a projector.\n * Actually, this is a lie. WebGl uses 4 coordinates: x, y, z and w. The above only holds if you keep w at 1.\n * After applying the vertex shader, WebGl divides all coordinates by w, yielding (x/w, y/w, z/w, 1).\n * This can be used to calculate projections - google for 'homogeneous coordinates' to find out more.\n * Compare this [site](https://www.tomdalling.com/blog/modern-opengl/explaining-homogenous-coordinates-and-projective-geometry/)\n * and the shader `basic3d.vert.glsl`.\n *\n * WebGL knows two data structures:\n *  - buffers (generic byte arrays): usually positions, normals, texture-coordinates, vertex-colors etc.\n *    buffers are accessed in shaders as 'attributes'.\n *    note that buffers contain one entry for each vertex.\n *  - textures (bitmap images).\n *\n * Shaders use these data structures in two different ways.\n *  - Attributes are values, one per vertex.\n *    For the shader, attributes are read-only.\n *    Attributes default to [0, 0, 0, 1]\n *  - Uniforms are values, one per shader.\n *    For the shader, uniforms are read-only.\n *\n * Apart from this, shaders know about two more types of data:\n *  - Varyings are values that are passed from vertex-shader to fragment-shader.\n *    They are read-only only for the fragment-shader.\n *  - Const: a compile-time constant.\n *\n * A program is just a list of compiled and linked vertex- and fragment-shaders.\n *\n *\n * Drawing: there's drawArrays and drawElements.\n *  - drawArrays is the robust all-rounder.\n *  - drawElements can be more performant if you share vertices between objects.\n *\n *\n * Rendering data is fast, but uploading it into GPU memory is slow.\n * Optimizing WebGl performance mostly means: Avoiding having GPU and CPU wait for each other.\n * The more the GPU can do in bulk, the better. The more often you have to upload data from CPU to GPU, the worse.\n *  - So avoid switching programs, buffers and uniforms if you can.\n *    (You won't be able to avoid switching buffers, because every object is likely different. But sort your objects by their shaders, and you'll save a lot of time.)\n *  - Try to do translations, rotations and shears inside the vertex-shader instead of altering the object's buffer.\n *  - If appropriate, create über-shaders and über-buffers, that contain information for more than just one object.\n *\n * There is another thing that affects performance:\n * WebGL will only run fragment-shaders when the object's pixels aren't already obscured by a larger object in front of it.\n * That means it makes sense to first draw large objects that are close to the camera - all objects behind them won't need their fragment-shader executed.\n *\n * All `create*` functions unbind variables after setting their values. This is to avoid unwanted side-effects.\n *\n *\n *\n * WebGL components\n *    - global-state\n *        - ARRAY_BUFFER_BINDING: currently bound buffer\n *        - VERTEX_ARRAY_BINDING: currently bound vertex-array (in WebGL 1 this was always only the global vertex-array, in WebGL 2 you can now create your own ones)\n *        - ACTIVE_TEXTURE: currently bound texture\n *        - texture-units: a list of pointers to texture-buffers.\n *        - uniform-buffer-bindings (WebGL2 only): a list of pointers to uniform-buffers.\n *    - vertex-array: a list of pointers to attribute-buffers (+ metadata like datatype, stride, offset etc.).\n *        - all attributes must have the same number of elements (though one attribute's elements may be vec2's, while another one's may be vec3's)\n *        - drawArray: attributes repeat elements in groups of three for drawing triangles\n *        - drawElements: the indices for the triangles are defined in ELEMENT_ARRAY_BUFFER_BINDING\n *        - WebGL 2.0: allows you to create your own vertex-arrays, whereas 1.0 always only used one global vertex-array.\n */\n\nimport { flattenRecursive, isPowerOf } from './utils';\n\n\n\nconst shaderInputTextureBindPoint = 0;\nconst textureConstructionBindPoint = 7;\n\n\n\n\n/**\n * Compile shader.\n */\nexport const compileShader = (gl: WebGLRenderingContext, typeBit: number, shaderSource: string): WebGLShader => {\n    const shader = gl.createShader(typeBit);\n    if (!shader) {\n        throw new Error('No shader was created');\n    }\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        gl.deleteShader(shader);\n        throw new Error(`An error occurred compiling the shader: ${gl.getShaderInfoLog(shader)}.    \\n\\n Shader code: ${shaderSource}`);\n    }\n    return shader;\n};\n\n\n/**\n * Note that every program *must* have one and only one vertex-shader\n * and one and only one fragment shader.\n * That means you cannot add multiple fragment-shaders in one program. Instead, either load them in consecutively as part of different programs,\n * or generate an über-shader that contains both codes.\n */\nexport const createShaderProgram = (gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string): WebGLProgram => {\n\n    const program = gl.createProgram();\n    if (!program) {\n        throw new Error('No program was created');\n    }\n\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    gl.linkProgram(program);\n\n    gl.detachShader(program, vertexShader);\n    gl.detachShader(program, fragmentShader);\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        gl.deleteProgram(program);\n        throw new Error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n};\n\n\nexport const setup3dScene = (gl: WebGLRenderingContext): void => {\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LEQUAL);\n    gl.cullFace(gl.BACK);\n    clearBackground(gl, [0, 0, 0, 1]);\n};\n\nexport const updateViewPort = (gl: WebGLRenderingContext, x0: number, y0: number, x1: number, y1: number): void => {\n    gl.viewport(x0, y0, x1, y1);\n};\n\n\nexport const bindProgram = (gl: WebGLRenderingContext, program: WebGLProgram): void => {\n    gl.useProgram(program);\n};\n\n\nexport const clearBackground = (gl: WebGLRenderingContext, color: number[]): void => {\n    gl.clearColor(color[0], color[1], color[2], color[3]);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\n\n /**\n  * A generic buffer, together with it's metadata.\n  */\nexport interface BufferObject {\n    buffer: WebGLBuffer;\n    vectorSize: number;\n    vectorCount: number;\n    type: number;\n    normalize: boolean;\n    stride: number;\n    offset: number;\n    drawingMode: number; // gl.TRIANGLES, gl.POINTS, or gl.LINES\n}\n\n\n/**\n * Create buffer. Creation is slow! Do *before* render loop.\n */\nexport const createFloatBuffer = (gl: WebGLRenderingContext, data: number[][], drawingMode: number = gl.TRIANGLES): BufferObject => {\n\n    const dataFlattened = new Float32Array(flattenRecursive(data));\n\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n        throw new Error('No buffer was created');\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, dataFlattened, gl.STATIC_DRAW);\n    // STATIC_DRAW: tells WebGl that we are not likely to change this data much.\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);  // unbinding\n\n    const bufferObject: BufferObject = {\n        buffer: buffer,\n        vectorSize: data[0].length,\n        vectorCount: data.length,\n        type: gl.FLOAT,   // the data is 32bit floats\n        normalize: false, // don't normalize the data\n        stride: 0,        // 0 = move forward size * sizeof(type) each iteration to get the next position. Only change this in very-high-performance jobs.\n        offset: 0,        // start at the beginning of the buffer. Only change this in very-high-performance jobs.\n        drawingMode: drawingMode\n    };\n\n    return bufferObject;\n};\n\n\nexport const drawArray = (gl: WebGLRenderingContext, bo: BufferObject): void => {\n    gl.drawArrays(bo.drawingMode, bo.offset, bo.vectorCount);\n};\n\n\n\nexport const updateBufferData = (gl: WebGLRenderingContext, bo: BufferObject, newData: number[][]): BufferObject => {\n\n    const dataFlattened = new Float32Array(flattenRecursive(newData));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, bo.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, dataFlattened, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);  // unbinding\n\n    const newBufferObject: BufferObject = {\n        buffer: bo.buffer,\n        vectorSize: newData[0].length,\n        vectorCount: newData.length,\n        type: gl.FLOAT,   // the data is 32bit floats\n        normalize: false, // don't normalize the data\n        stride: 0,        // 0 = move forward size * sizeof(type) each iteration to get the next position. Only change this in very-high-performance jobs.\n        offset: 0,        // start at the beginning of the buffer. Only change this in very-high-performance jobs.\n        drawingMode: bo.drawingMode,\n    };\n\n    return newBufferObject;\n};\n\n\n\n\n/**\n * Fetch attribute's location (attribute declared in some shader). Slow! Do *before* render loop.\n */\nexport const getAttributeLocation = (gl: WebGLRenderingContext, program: WebGLProgram, attributeName: string): number => {\n    const loc = gl.getAttribLocation(program, attributeName);\n    if (loc === -1) {\n        throw new Error(`Couldn't find attribute ${attributeName} in program.`);\n    }\n    return loc;\n};\n\n\n\n/**\n * Attributes vary from vertex to vertex - that means that there are *many* of them.\n * So it makes sense for WebGl to store attribute values in a dedicated data structure - the buffer.\n */\nexport const bindBufferToAttribute = (gl: WebGLRenderingContext, attributeLocation: number, bufferObject: BufferObject): void => {\n    // Bind buffer to global-state ARRAY_BUFFER\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferObject.buffer);\n    // Enable editing of vertex-array-location\n    gl.enableVertexAttribArray(attributeLocation);\n    // Bind the buffer currently at global-state ARRAY_BUFFER to a vertex-array-location.\n    gl.vertexAttribPointer(\n        attributeLocation,\n        bufferObject.vectorSize, bufferObject.type, bufferObject.normalize, bufferObject.stride, bufferObject.offset);\n    // gl.disableVertexAttribArray(attributeLocation); <-- must not do this!\n};\n\n\nexport interface IndexBufferObject {\n    buffer: WebGLBuffer;\n    count: number;\n    type: number; // must be gl.UNSIGNED_SHORT\n    offset: number;\n    drawingMode: number; // gl.TRIANGLES, gl.POINTS, or gl.LINES\n}\n\nexport const createIndexBuffer = (gl: WebGLRenderingContext, indices: number[][], drawingMode: number = gl.TRIANGLES): IndexBufferObject => {\n\n    const indicesFlattened = new Uint16Array(flattenRecursive(indices));\n\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n        throw new Error('No buffer was created');\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicesFlattened, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n    const bufferObject: IndexBufferObject = {\n        buffer: buffer,\n        count: indicesFlattened.length,\n        type: gl.UNSIGNED_SHORT,\n        offset: 0,\n        drawingMode: drawingMode\n    };\n\n    return bufferObject;\n};\n\nexport const bindIndexBuffer = (gl: WebGLRenderingContext, ibo: IndexBufferObject) => {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo.buffer);\n};\n\nexport const drawElements = (gl: WebGLRenderingContext, ibo: IndexBufferObject): void => {\n    gl.drawElements(ibo.drawingMode, ibo.count, ibo.type, ibo.offset);\n};\n\n\n\n\n\n\nexport interface TextureObject {\n    texture: WebGLTexture;\n    width: number;\n    height: number;\n    level: number;\n    internalformat: number;\n    format: number;\n    type: number;\n    border: number;\n}\n\n/**\n * A shader's attributes get their buffer-values from the VERTEX_ARRAY, but they are constructed in the ARRAY_BUFFER.\n * Textures analogously are served from the TEXTURE_UNITS, while for construction they are bound to ACTIVE_TEXTURE.\n *\n * There is a big difference, however. Contrary to buffers which receive their initial value while still outside the ARRAY_BUFFER,\n * a texture does already have to be bound into the TEXTURE_UNITS when it's being created.\n * Since it'll always be bound into the slot that ACTIVE_TEXTURE points to, you can inadvertently overwrite another texture that is\n * currently in this place. To avoid this, we provide a dedicated `textureConstructionBindPoint`.\n *\n * Buffers are easier in this, since with vertexAttribPointer we are guaranteed to get a slot in the VERTEX_ARRAY that is not\n * already occupied by another buffer.\n */\nexport const createTexture = (gl: WebGLRenderingContext, image: HTMLImageElement | HTMLCanvasElement): TextureObject => {\n\n    const texture = gl.createTexture();  // analog to createBuffer\n    if (!texture) {\n        throw new Error('No texture was created');\n    }\n    gl.activeTexture(gl.TEXTURE0 + textureConstructionBindPoint); // so that we don't overwrite another texture in the next line.\n    gl.bindTexture(gl.TEXTURE_2D, texture);  // analog to bindBuffer. Binds texture to currently active texture-bindpoint (aka. texture unit).\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, image);  // analog to bufferData\n    gl.generateMipmap(gl.TEXTURE_2D); // mipmaps are mini-versions of the texture.\n    gl.bindTexture(gl.TEXTURE_2D, null);  // unbinding\n\n    let w, h: number;\n    if (image instanceof HTMLImageElement) {\n        w = image.naturalWidth;\n        h = image.naturalHeight;\n    } else {\n        w = image.width;\n        h = image.height;\n    }\n\n    const textureObj: TextureObject = {\n        texture: texture,\n        level: level,\n        internalformat: internalFormat,\n        format: format,\n        type: type,\n        width: w,\n        height: h,\n        border: 0\n    };\n\n    return textureObj;\n};\n\n\nexport type textureDataType = '';\n\n/**\n * This is just another texture, but optimized for carrying data, not for display.\n *\n * Valid combinations of texture-data parameters:\n *\n * | Internal Format | Format          | Type                      | Source Bytes Per Pixel |\n * |-----------------|-----------------|---------------------------|------------------------|\n * | RGBA            | RGBA            | UNSIGNED_BYTE             | 4                      |\n * | RGB\t         | RGB             | UNSIGNED_BYTE             | 3                      |\n * | RGBA            | RGBA            | UNSIGNED_SHORT_4_4_4_4    | 2                      |\n * | RGBA            | RGBA            | UNSIGNED_SHORT_5_5_5_1\t   | 2                      |\n * | RGB             | RGB             | UNSIGNED_SHORT_5_6_5      | 2                      |\n * | LUMINANCE_ALPHA | LUMINANCE_ALPHA | UNSIGNED_BYTE\t           | 2                      |\n * | LUMINANCE       | LUMINANCE       | UNSIGNED_BYTE             | 1                      |\n * | ALPHA           | ALPHA           | UNSIGNED_BYTE             | 1                      |\n * Plus many more in WebGL2.\n *\n */\nexport const createDataTexture = (gl: WebGLRenderingContext, data: number[][][]): TextureObject => {\n    const height = data.length;\n    const width = data[0].length;\n    const channels = data[0][0].length;\n    if ( !isPowerOf(width, 2) || !isPowerOf(height, 2) ) {\n        throw new Error(`Texture-data-dimensions must be a power of two, but are ${width} x ${height}`);\n    }\n    if ( channels !== 4) {\n        // @todo: remove this when we implement non-rgba data-textures.\n        throw new Error(`Expecting 4 channels, but ${channels} provided`);\n    }\n\n    const texture = gl.createTexture();  // analog to createBuffer\n    if (!texture) {\n        throw new Error('No texture was created');\n    }\n    gl.activeTexture(gl.TEXTURE0 + textureConstructionBindPoint); // so that we don't overwrite another texture in the next line.\n    gl.bindTexture(gl.TEXTURE_2D, texture);  // analog to bindBuffer. Binds texture to currently active texture-bindpoint (aka. texture unit).\n\n    // to be used for data. we want no interpolation of data, so disallow mipmap and interpolation.\n    const level = 0;\n    const border = 0;\n    const internalFormat = gl.RGBA;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n\n    const binData = new Uint8Array(flattenRecursive(data));\n\n    if (channels !== 4) {\n        // have WebGL digest data one byte at a time.\n        // (Per default tries 4 bytes at a time, which causes errors when our data is not a mulitple of 4).\n        const alignment = 1; // valid values are 1, 2, 4, and 8.\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);\n    }\n\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, binData); // analog to bufferData\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.bindTexture(gl.TEXTURE_2D, null);  // unbinding\n\n\n    const textureObj: TextureObject = {\n        texture: texture,\n        level: level,\n        internalformat: internalFormat,\n        format: format,\n        type: type,\n        width: width,\n        height: height,\n        border: border\n    };\n\n    return textureObj;\n};\n\n\n\nexport const createEmptyTexture = (gl: WebGLRenderingContext, width: number, height: number): TextureObject => {\n    if (width <= 0 || height <= 0) {\n        throw new Error('Width and height must be positive.');\n    }\n    const texture = gl.createTexture();\n    if (!texture) {\n        throw new Error('No texture was created');\n    }\n    gl.activeTexture(gl.TEXTURE0 + textureConstructionBindPoint); // so that we don't overwrite another texture in the next line.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    const textureObj: TextureObject = {\n        texture: texture,\n        level: 0,\n        internalformat: gl.RGBA,\n        format: gl.RGBA,\n        type: gl.UNSIGNED_BYTE,\n        width: width,\n        height: height,\n        border: 0\n    };\n\n    return textureObj;\n};\n\n\n/**\n * Even though we reference textures as uniforms in a fragment shader, assigning an actual texture-value to that uniform works differently from normal uniforms.\n * Normal uniforms have a concrete value.\n * Texture uniforms, on the other hand, are just an integer-index that points to a special slot in the GPU memory (the bindPoint) where the actual texture value lies.\n */\nexport const bindTextureToUniform = (gl: WebGLRenderingContext, texture: WebGLTexture, bindPoint: number, uniformLocation: WebGLUniformLocation): void =>  {\n    if (bindPoint > gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)) {\n        throw new Error(`There are only ${gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)} texture bind points, but you tried to bind to point nr. ${bindPoint}.`);\n    }\n    if (bindPoint === textureConstructionBindPoint) {\n        console.error(`You are about to bind to the dedicated texture-construction bind point (nr. ${bindPoint}).\n        If after this call another texture is built, your shader will now use that new texture instead of this one!\n        Consider using another bind point.`);\n    }\n    gl.activeTexture(gl.TEXTURE0 + bindPoint);  // analog to enableVertexAttribArray\n    gl.bindTexture(gl.TEXTURE_2D, texture);  // analog to bindBuffer. Binds texture to currently active texture-bindpoint (aka. texture unit).\n    gl.uniform1i(uniformLocation, bindPoint); // analog to vertexAttribPointer\n};\n\n\n\nexport const updateTexture = (gl: WebGLRenderingContext, to: TextureObject, newData: HTMLImageElement | HTMLCanvasElement | number[][][]): TextureObject => {\n\n    gl.activeTexture(gl.TEXTURE0 + textureConstructionBindPoint); // so that we don't overwrite another texture in the next line.\n    gl.bindTexture(gl.TEXTURE_2D, to.texture);  // analog to bindBuffer. Binds texture to currently active texture-bindpoint (aka. texture unit).\n    if (newData instanceof HTMLImageElement || newData instanceof HTMLCanvasElement) {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, newData);  // analog to bufferData\n    } else {\n        const width = newData[0].length;\n        const height = newData.length;\n        if ( !isPowerOf(width, 2) || !isPowerOf(height, 2) ) {\n            throw new Error(`Texture-data-dimensions must be a power of two, but are ${height} x ${width}`);\n        }\n        const binData = new Uint8Array(flattenRecursive(newData));  // @todo: use another ArrayBufferView depending on to.format?\n        gl.texImage2D(gl.TEXTURE_2D, to.level, to.internalformat, to.width, to.height, to.border, to.format, to.type, binData);\n    }\n    gl.generateMipmap(gl.TEXTURE_2D); // mipmaps are mini-versions of the texture.\n    gl.bindTexture(gl.TEXTURE_2D, null);  // unbinding\n\n    if (newData instanceof HTMLImageElement) {\n        to.width = newData.naturalWidth;\n        to.height = newData.naturalHeight;\n    } else if (newData instanceof HTMLCanvasElement) {\n        to.width = newData.width;\n        to.height = newData.height;\n    } else {\n        to.width = newData[0].length;\n        to.height = newData.length;\n    }\n\n    return to;\n};\n\n\nexport interface FramebufferObject {\n    framebuffer: WebGLFramebuffer;\n    texture: TextureObject;\n    width: number;\n    height: number;\n}\n\n\nexport const createFramebuffer = (gl: WebGLRenderingContext): WebGLFramebuffer => {\n    const fb = gl.createFramebuffer();  // analog to createBuffer\n    if (!fb) {\n        throw new Error(`Error creating framebuffer`);\n    }\n    return fb;\n};\n\n\n/**\n * The operations `clear`, `drawArrays` and `drawElements` only affect the currently bound framebuffer.\n *\n * Note that binding the framebuffer does *not* mean binding its texture.\n * In fact, if there is a bound texture, it must be the *input* to a shader, not the output.\n * Therefore, a framebuffer's texture must not be bound when the framebuffer is.\n */\nexport const bindFramebuffer = (gl: WebGLRenderingContext, fbo: FramebufferObject, manualViewport?: [number, number, number, number]) => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n    // It's EXTREMELY IMPORTANT to remember to call gl.viewport and set it to the size of the thing your rendering to.\n    // https://webglfundamentals.org/webgl/lessons/webgl-render-to-texture.html\n    if (manualViewport) {\n        if ((fbo.width / fbo.height) !== (manualViewport[2] / manualViewport[3])) {\n            console.warn(`Your viewport-aspect is different from the framebuffer-aspect.`);\n        }\n        gl.viewport(...manualViewport);\n    } else {\n        gl.viewport(0, 0, fbo.width, fbo.height);\n    }\n};\n\n/**\n * Webgl renders to the viewport, which is relative to canvas.width * canvas.height.\n * (To be more precise, only *polygons* are clipped to the viewport.\n * Operations like `clearColor()` et.al., will still draw to the *full* canvas.width * height!\n * If you want to also constrain clearColor, use `scissor` instead of viewport.)\n * That canvas.width * canvas.height then gets stretched to canvas.clientWidth * canvas.clientHeight.\n * (Note: the full canvas.width gets stretched to clientWidth, not just the viewport!)\n */\nexport const bindOutputCanvasToFramebuffer = (gl: WebGLRenderingContext, manualViewport?: [number, number, number, number]) => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    // It's EXTREMELY IMPORTANT to remember to call gl.viewport and set it to the size of the thing your rendering to.\n    // https://webglfundamentals.org/webgl/lessons/webgl-render-to-texture.html\n    if (manualViewport) {\n        if ((gl.canvas.width / gl.canvas.height) !== (manualViewport[2] / manualViewport[3])) {\n            console.warn(`Your viewport-aspect is different from the canvas-aspect.`);\n        }\n        gl.viewport(...manualViewport);\n    } else {\n        // Note: don't use clientWidth here.\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    }\n};\n\n\n/**\n * A framebuffer can have a texture - that is the bitmap that the shader-*out*put is drawn on.\n * Shaders may also have one or more *in*put texture(s), which must be provided to the shader as a uniform sampler2D.\n * Only the shader needs to know about any potential input texture, the framebuffer will always only know about it's output texture.\n */\nexport const bindTextureToFramebuffer = (gl: WebGLRenderingContext, texture: TextureObject, fb: WebGLFramebuffer): FramebufferObject => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.texture, 0); // analog to bufferData\n\n    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error(`Error creating framebuffer: framebuffer-status: ${gl.checkFramebufferStatus(gl.FRAMEBUFFER)} ; error-code: ${gl.getError()}`);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    const fbo: FramebufferObject = {\n        framebuffer: fb,\n        texture: texture,\n        width: texture.width,\n        height: texture.height\n    };\n\n    return fbo;\n};\n\n\n\n\n\n\n\n\n\n\n/**\n * Fetch uniform's location (uniform declared in some shader). Slow! Do *before* render loop.\n */\nexport const getUniformLocation = (gl: WebGLRenderingContext, program: WebGLProgram, uniformName: string): WebGLUniformLocation => {\n    const loc = gl.getUniformLocation(program, uniformName);\n    if (loc === null) {\n        throw new Error(`Couldn't find uniform ${uniformName} in program.`);\n    }\n    return loc;\n};\n\n\n\n\nexport type WebGLVariableType = 'bool'  | 'bvec2' | 'bvec3' | 'bvec4'| 'bool[]'  | 'bvec2[]' | 'bvec3[]' | 'bvec4[]'\n                              | 'int'   | 'ivec2' | 'ivec3' | 'ivec4'| 'int[]'   | 'ivec2[]' | 'ivec3[]' | 'ivec4[]'\n                              | 'float' | 'vec2'  | 'vec3'  | 'vec4' | 'float[]' | 'vec2[]'  | 'vec3[]'  | 'vec4[]'\n                                        | 'mat2'  | 'mat3'  | 'mat4';\n\n\n/**\n * Contrary to attributes, uniforms don't need to be stored in a buffer. (Note: in WebGL 2.0, however, there *are* uniform buffers!)\n *\n * 'v' is not about the shader, but how you provide data from the js-side.\n * uniform1fv(loc, [3.19]) === uniform1f(loc, 3.19)\n *\n * |js                                      |          shader                  |\n * |----------------------------------------|----------------------------------|\n * |uniform1f(loc, 3.19)                    |  uniform float u_pi;             |\n * |uniform2f(loc, 3.19, 2.72)              |  uniform vec2 u_constants;       |\n * |uniform2fv(loc, [3.19, 2.72])           |  uniform vec2 u_constants;       |\n * |uniform1fv(loc, [1, 2, 3, 4, 5, 6])     |  uniform float u_kernel[6];      |\n * |uniform2fv(loc, [1, 2, 3, 4, 5, 6])     |  uniform vec2 u_observations[3]; |\n * |uniformMatrix3fv(loc, [[...], [...]])   |  uniform mat3 u_matrix;          |\n *\n * A note about `structs`. A shader code like this:\n * ```glsl\n * struct LightInfo {\n *    vec4 Position;\n *    vec3 La;\n * };\n * uniform LightInfo Light;\n * ```\n * ... is accessed like that:\n * ```js\n * const lightPosLoc = gl.getUniformLocation(program, \"Light.Position\");\n * const lightLaLoc = gl.getUniformLocation(program, \"Light.La\");\n * gl.uniform4fv(lightPosLoc, [1, 2, 3, 4]);\n * gl.uniform3fv(lightLaLoc, [1, 2, 3]);\n * ```\n *\n */\nexport const bindValueToUniform = (gl: WebGLRenderingContext, uniformLocation: WebGLUniformLocation, type: WebGLVariableType, values: number[]): void => {\n    switch (type) {\n        case 'bool':\n            gl.uniform1i(uniformLocation, values[0]);\n            break;\n        case 'bvec2':\n            gl.uniform2i(uniformLocation, values[0], values[1]);\n            break;\n        case 'bvec3':\n            gl.uniform3i(uniformLocation, values[0], values[1], values[2]);\n            break;\n        case 'bvec4':\n            gl.uniform4i(uniformLocation, values[0], values[1], values[2], values[3]);\n            break;\n        case 'bool[]':\n            gl.uniform1iv(uniformLocation, values);\n            break;\n        case 'bvec2[]':\n            gl.uniform2iv(uniformLocation, values);\n            break;\n        case 'bvec3[]':\n            gl.uniform3iv(uniformLocation, values);\n            break;\n        case 'bvec4[]':\n            gl.uniform4iv(uniformLocation, values);\n            break;\n\n        case 'int':\n            gl.uniform1i(uniformLocation, values[0]);\n            break;\n        case 'ivec2':\n            gl.uniform2i(uniformLocation, values[0], values[1]);\n            break;\n        case 'ivec3':\n            gl.uniform3i(uniformLocation, values[0], values[1], values[2]);\n            break;\n        case 'ivec4':\n            gl.uniform4i(uniformLocation, values[0], values[1], values[2], values[3]);\n            break;\n        case 'int[]':\n            gl.uniform1iv(uniformLocation, values);\n            break;\n        case 'ivec2[]':\n            gl.uniform2iv(uniformLocation, values);\n            break;\n        case 'ivec3[]':\n            gl.uniform3iv(uniformLocation, values);\n            break;\n        case 'ivec4[]':\n            gl.uniform4iv(uniformLocation, values);\n            break;\n\n        case 'float':\n            gl.uniform1f(uniformLocation, values[0]);\n            break;\n        case 'vec2':\n            gl.uniform2f(uniformLocation, values[0], values[1]);\n            break;\n        case 'vec3':\n            gl.uniform3f(uniformLocation, values[0], values[1], values[2]);\n            break;\n        case 'vec4':\n            gl.uniform4f(uniformLocation, values[0], values[1], values[2], values[3]);\n            break;\n        case 'float[]':\n            gl.uniform1fv(uniformLocation, values);\n            break;\n        case 'vec2[]':\n            gl.uniform2fv(uniformLocation, values);\n            break;\n        case 'vec3[]':\n            gl.uniform3fv(uniformLocation, values);\n            break;\n        case 'vec4[]':\n            gl.uniform4fv(uniformLocation, values);\n            break;\n\n        // In the following *matrix* calls, the 'transpose' parameter must always be false.\n        // Quoting the OpenGL ES 2.0 spec:\n        // If the transpose parameter to any of the UniformMatrix* commands is\n        // not FALSE, an INVALID_VALUE error is generated, and no uniform values are\n        // changed.\n        case 'mat2':\n            gl.uniformMatrix2fv(uniformLocation, false, values);\n            break;\n\n        case 'mat3':\n            gl.uniformMatrix3fv(uniformLocation, false, values);\n            break;\n\n        case 'mat4':\n            gl.uniformMatrix4fv(uniformLocation, false, values);\n            break;\n\n        default:\n            throw Error(`Type ${type} not implemented.`);\n    }\n};\n\n\n/**\n * (From https://hacks.mozilla.org/2013/04/the-concepts-of-webgl/ and https://stackoverflow.com/questions/56303648/webgl-rendering-buffers:)\n * Ignoring handmade framebuffers, WebGl has two framebuffers that are always in use: the `frontbuffer/displaybuffer` and the `backbuffer/drawingbuffer`.\n * WebGl per default renders to the `drawingbuffer`, aka. the `backbuffer`.\n * There is also the currently displayed buffer, named the `frontbuffer` aka. the `displaybuffer`.\n * the WebGL programmer has no explicit access to the frontbuffer whatsoever.\n *\n * Once you called `clear`, `drawElements` or `drawArrays`, the browser marks the canvas as `needs to be composited`.\n * Assuming `preserveDrawingBuffer == false` (the default): Immediately before compositing, the browser\n *  - swaps the back- and frontbuffer\n *  - clears the new backbuffer.\n * If `preserveDrawingBuffer === true`: Immediately before compositing, the browser\n *  - copies the drawingbuffer to the frontbuffer.\n *\n * As a consequence, if you're going to use canvas.toDataURL or canvas.toBlob or gl.readPixels or any other way of getting data from a WebGL canvas,\n * unless you read it in the same event then it will likely be clear when you try to read it.\n *\n * In the past, old games always preserved the drawing buffer, so they'd only have to change those pixels that have actually changed. Nowadays preserveDrawingBuffer is false by default.\n *\n * A (almost brutal) workaround to get the canvas to preserve the drawingBuffer can be found here: https://stackoverflow.com/questions/26783586/canvas-todataurl-returns-blank-image\n */\nexport const getCurrentFramebuffersPixels = (canvas: HTMLCanvasElement): ArrayBuffer  => {\n    const gl = canvas.getContext('webgl');\n    if (!gl) {\n        throw new Error('no context');\n    }\n\n    const format = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);\n    const type = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);\n\n    let pixels;\n    if (type === gl.UNSIGNED_BYTE) {\n        pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);\n    } else if (type === gl.UNSIGNED_SHORT_5_6_5 || type === gl.UNSIGNED_SHORT_4_4_4_4 || type === gl.UNSIGNED_SHORT_5_5_5_1) {\n        pixels = new Uint16Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);\n    } else if (type === gl.FLOAT) {\n        pixels = new Float32Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);\n    } else {\n        throw new Error(`Did not understand pixel data type ${type} for format ${format}`);\n    }\n\n    // Just like `toDataURL` or `toBlob`, `readPixels` does not access the frontbuffer.\n    // It accesses the backbuffer or any other currently active framebuffer.\n    gl.readPixels(0, 0, canvas.width, canvas.height, format, type, pixels);\n\n    return pixels;\n};\n\nexport const getDebugInfo = (gl: WebGLRenderingContext): object => {\n    const baseInfo = {\n        renderer: gl.getParameter(gl.RENDERER),\n        currentProgram: gl.getParameter(gl.CURRENT_PROGRAM),\n        arrayBuffer: gl.getParameter(gl.ARRAY_BUFFER_BINDING),\n        elementArrayBuffer: gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING),\n        frameBuffer: gl.getParameter(gl.FRAMEBUFFER_BINDING),\n        renderBuffer: gl.getParameter(gl.RENDERBUFFER_BINDING),\n        texture: gl.getParameter(gl.TEXTURE_BINDING_2D),\n        viewPort: gl.getParameter(gl.VIEWPORT)\n    };\n    const programInfo = {\n        infoLog: gl.getProgramInfoLog(baseInfo.currentProgram)\n    };\n    return {\n        baseInfo, programInfo\n    }\n};\n","import { createShaderProgram, setup3dScene, createFloatBuffer, getAttributeLocation, bindBufferToAttribute, getUniformLocation, bindValueToUniform, clearBackground, BufferObject, WebGLVariableType, bindProgram, createTexture, bindTextureToUniform, TextureObject, FramebufferObject, bindFramebuffer, bindOutputCanvasToFramebuffer, updateBufferData, bindTextureToFramebuffer, createEmptyTexture, createFramebuffer, updateTexture, createIndexBuffer, IndexBufferObject, drawArray, drawElements, bindIndexBuffer, createDataTexture, updateViewPort } from './webgl';\n\n\n// dead-simple hash function - not intended to be secure in any way.\nconst hash = function(s: string): string {\n    let h = 0;\n    for (const c of s) {\n        h += c.charCodeAt(0);\n    }\n    return `${h}`;\n};\n\n\nexport interface IProgram {\n    program: WebGLProgram;\n    id: string;\n    vertexShaderSource: string;\n    fragmentShaderSource: string;\n}\n\n\nexport class Program implements IProgram {\n\n    readonly program: WebGLProgram;\n    readonly id: string;\n\n    constructor(gl: WebGLRenderingContext,\n        readonly vertexShaderSource: string,\n        readonly fragmentShaderSource: string) {\n        this.program = createShaderProgram(gl, vertexShaderSource, fragmentShaderSource);\n        this.id = hash(vertexShaderSource + fragmentShaderSource);\n    }\n}\n\n\nexport interface IUniform {\n    location: WebGLUniformLocation;\n    type: WebGLVariableType;\n    value: number[];\n    variableName: string;\n}\n\n\nexport class Uniform implements IUniform {\n\n    readonly location: WebGLUniformLocation;\n    readonly type: WebGLVariableType;\n    readonly value: number[];\n    readonly variableName: string;\n\n    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, type: WebGLVariableType, data: number[]) {\n        this.location = getUniformLocation(gl, program.program, variableName);\n        this.type = type;\n        this.value = data;\n        this.variableName = variableName;\n    }\n}\n\n\nexport interface ITexture {\n    location: WebGLUniformLocation;\n    bindPoint: number;\n    texture: TextureObject;\n    variableName: string;\n}\n\nexport class Texture implements ITexture {\n\n    readonly location: WebGLUniformLocation;\n    readonly bindPoint: number;\n    readonly texture: TextureObject;\n    readonly variableName: string;\n\n    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, im: HTMLImageElement | HTMLCanvasElement | TextureObject, bindPoint: number) {\n        this.location = getUniformLocation(gl, program.program, variableName);\n        if (im instanceof HTMLImageElement || im instanceof  HTMLCanvasElement) {\n            this.texture = createTexture(gl, im);\n        } else {\n            this.texture = im;\n        }\n        this.bindPoint = bindPoint;\n        this.variableName = variableName;\n    }\n}\n\nexport class DataTexture implements ITexture {\n    readonly location: WebGLUniformLocation;\n    readonly bindPoint: number;\n    readonly texture: TextureObject;\n    readonly variableName: string;\n\n    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, data: number[][][], bindPoint: number) {\n        this.location = getUniformLocation(gl, program.program, variableName);\n        this.texture = createDataTexture(gl, data);\n        this.bindPoint = bindPoint;\n        this.variableName = variableName;\n    }\n}\n\n\nexport interface IAttribute {\n    location: number;\n    value: BufferObject;\n    variableName: string;\n}\n\n\nexport type GlDrawingMode = 'triangles' | 'points' | 'lines';\n\nexport class Attribute implements IAttribute {\n\n    readonly location: number;\n    readonly value: BufferObject;\n    readonly variableName: string;\n    readonly drawingMode: number;\n\n    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, data: number[][], drawingMode: GlDrawingMode = 'triangles') {\n        let glDrawingMode: number;\n        switch (drawingMode) {\n            case 'triangles':\n                glDrawingMode = gl.TRIANGLES;\n                break;\n            case 'lines':\n                glDrawingMode = gl.LINES;\n                break;\n            case 'points':\n                glDrawingMode = gl.POINTS;\n                break;\n            default:\n                throw new Error(`Invalid drawing mode ${drawingMode}`);\n        }\n        this.location = getAttributeLocation(gl, program.program, variableName);\n        this.value = createFloatBuffer(gl, data, glDrawingMode);\n        this.variableName = variableName;\n        this.drawingMode = glDrawingMode;\n    }\n}\n\n\nexport class Index {\n    readonly index: IndexBufferObject;\n\n    constructor(gl: WebGLRenderingContext, indices: number[][], drawingMode: GlDrawingMode = 'triangles') {\n        let glDrawingMode: number;\n        switch (drawingMode) {\n            case 'triangles':\n                glDrawingMode = gl.TRIANGLES;\n                break;\n            case 'lines':\n                glDrawingMode = gl.LINES;\n                break;\n            case 'points':\n                glDrawingMode = gl.POINTS;\n                break;\n            default:\n                throw new Error(`Invalid drawing mode ${drawingMode}`);\n        }\n        this.index = createIndexBuffer(gl, indices, glDrawingMode);\n    }\n}\n\n\nfunction first<T>(arr: T[], condition: (el: T) => boolean): T | null {\n    for (const el of arr) {\n        if (condition(el)) {\n            return el;\n        }\n    }\n    return null;\n}\n\n\nfunction parseProgram(program: IProgram): [string[], string[], string[], string[]] {\n    const attributeRegex = /^\\s*attribute (int|float|vec2|vec3|vec4|mat2|mat3|mat4) (\\w*);/gm;\n    const uniformRegex = /^\\s*uniform (int|float|vec2|vec3|vec4|mat2|mat3|mat4) (\\w*)(\\[\\d\\])*;/gm;\n    const textureRegex = /^\\s*uniform sampler2D (\\w*);/gm;\n    const precisionRegex = /^\\s*precision (\\w*) float;/gm;\n\n    const shaderCode = program.fragmentShaderSource + '\\n\\n\\n' + program.vertexShaderSource;\n\n    const attributeNames = [];\n    let attributeMatches;\n    while ((attributeMatches = attributeRegex.exec(shaderCode)) !== null) {\n        attributeNames.push(attributeMatches[2]);\n    }\n    const uniformNames = [];\n    let uniformMatches;\n    while ((uniformMatches = uniformRegex.exec(shaderCode)) !== null) {\n        uniformNames.push(uniformMatches[2]);\n    }\n    const textureNames = [];\n    let textureMatches;\n    while ((textureMatches = textureRegex.exec(shaderCode)) !== null) {\n        textureNames.push(textureMatches[1]);\n    }\n\n    const precisions = [];\n    let precisionMatches;\n    while ((precisionMatches = precisionRegex.exec(shaderCode)) !== null) {\n        precisions.push(precisionMatches[1]);\n    }\n\n    return [attributeNames, uniformNames, textureNames, precisions];\n}\n\n\nexport type RenderMode = 'points' | 'lines' | 'triangles';\n\ninterface IShader {\n    program: IProgram;\n    index?: Index;\n    attributes: IAttribute[];\n    uniforms: IUniform[];\n    textures: ITexture[];\n    bind: (gl: WebGLRenderingContext) => void;\n    render: (gl: WebGLRenderingContext, background?: number[], frameBuffer?: FramebufferObject, viewport?: [number, number, number, number]) => void;\n    updateAttributeData: (gl: WebGLRenderingContext, variableName: string, newData: number[][]) => void;\n    updateUniformData: (gl: WebGLRenderingContext, variableName: string, newData: number[]) => void;\n    updateTextureData: (gl: WebGLRenderingContext, variableName: string, newImage: HTMLImageElement | HTMLCanvasElement) => void;\n}\n\nexport class Shader implements IShader {\n    constructor(\n        readonly program: IProgram,\n        readonly attributes: IAttribute[],\n        readonly uniforms: IUniform[],\n        readonly textures: ITexture[],\n        readonly index?: Index\n    ) {\n        const [attributeNames, uniformNames, textureNames, precisions] = parseProgram(program);\n        for (const attrName of attributeNames) {\n            const found = attributes.filter(a => a.variableName === attrName);\n            if (found.length !== 1) {\n                throw new Error(`Provided ${found.length} values for shader's attribute ${attrName}.`);\n            }\n        }\n        for (const uniformName of uniformNames) {\n            const found = uniforms.filter(a => a.variableName === uniformName);\n            if (found.length !== 1) {\n                throw new Error(`Provided ${found.length} values for shader's uniform ${uniformName}.`);\n            }\n        }\n        for (const texName of textureNames) {\n            const found = textures.filter(a => a.variableName === texName);\n            if (found.length !== 1) {\n                throw new Error(`Provided ${found.length} values for shader's texture ${texName}.`);\n            }\n        }\n        if (precisions.length === 1) {\n            console.warn(`You have only provided one precision qualifier.\n            This can cause issues when you want to use a uniform in both the vertex- and the fragment-shader.`);\n        }\n        const lengths = this.attributes.map(a => a.value.vectorCount);\n        if (Math.min(...lengths) !== Math.max(...lengths)) {\n            throw new Error(`Your attributes are not of the same length!`);\n        }\n    }\n\n    public bind(gl: WebGLRenderingContext): void {\n        bindProgram(gl, this.program.program);\n        for (const a of this.attributes) {\n            bindBufferToAttribute(gl, a.location, a.value);\n        }\n        for (const u of this.uniforms) {\n            bindValueToUniform(gl, u.location, u.type, u.value);\n        }\n        for (const t of this.textures) {\n            bindTextureToUniform(gl, t.texture.texture, t.bindPoint, t.location);\n        }\n        if (this.index) {\n            bindIndexBuffer(gl, this.index.index);\n        }\n    }\n\n\n    public render(gl: WebGLRenderingContext, background?: number[], frameBuffer?: FramebufferObject, viewport?: [number, number, number, number]): void {\n        if (!frameBuffer) {\n            bindOutputCanvasToFramebuffer(gl, viewport);\n        } else {\n            bindFramebuffer(gl, frameBuffer, viewport);\n        }\n        if (background) {\n            clearBackground(gl, background);\n        }\n\n        if (this.index) {\n            drawElements(gl, this.index.index);\n        } else {\n            const firstAttribute = this.attributes[0];\n            drawArray(gl, firstAttribute.value);\n        }\n    }\n\n\n    public updateAttributeData(gl: WebGLRenderingContext, variableName: string, newData: number[][]): void {\n        const attribute = first<IAttribute>(this.attributes, el => el.variableName === variableName);\n        if (!attribute) {\n            throw new Error(`No such attribute ${variableName} to be updated.`);\n        }\n        updateBufferData(gl, attribute.value, newData);\n    }\n\n    public updateUniformData(gl: WebGLRenderingContext, variableName: string, newData: number[]): void {\n        const uniform = first<IUniform>(this.uniforms, el => el.variableName === variableName);\n        if (!uniform) {\n            throw new Error(`No such uniform ${variableName} to be updated.`);\n        }\n        uniform.value = newData;\n    }\n\n    public updateTextureData(gl: WebGLRenderingContext, variableName: string, newImage: HTMLImageElement | HTMLCanvasElement | number[][][]): void {\n        const original = first<ITexture>(this.textures, t => t.variableName === variableName);\n        if (!original) {\n            throw new Error(`No such texture ${variableName} to be updated.`);\n        }\n        const newTextureObject = updateTexture(gl, original.texture, newImage);\n        original.texture = newTextureObject;\n    }\n}\n\n\nexport class Framebuffer {\n\n    readonly fbo: FramebufferObject;\n\n    constructor(gl: WebGLRenderingContext, width: number, height: number) {\n        const fb = createFramebuffer(gl);\n        const fbTexture = createEmptyTexture(gl, width, height);\n        const fbo = bindTextureToFramebuffer(gl, fbTexture, fb);\n        this.fbo = fbo;\n    }\n}\n\n\n\n\nexport function renderLoop(fps: number, renderFunction: (tDelta: number) => void): void {\n\n    const tDeltaTarget = 1000 * 1.0 / fps;\n    let tDelta = tDeltaTarget;\n    let tStart, tNow, tSleep: number;\n\n    const render = () => {\n        tStart = window.performance.now();\n\n        renderFunction(tDelta);\n\n        tNow = window.performance.now();\n        tDelta = tNow - tStart;\n        tSleep = Math.max(tDeltaTarget - tDelta, 0);\n        setTimeout(() => {\n            requestAnimationFrame(render);\n        }, tSleep);\n\n    };\n\n    render();\n}\n\n\n\n\n\n\n\ninterface IEntity {\n    program: IProgram;\n    attributes: IAttribute[]; // note that attributes must all have the same number of entries!\n    uniforms: IUniform[];\n    textures: ITexture[];\n    update: (tDelta: number) => void;\n}\n\n\n\nexport class Entity implements IEntity {\n\n    constructor(\n        readonly program: IProgram,\n        readonly attributes: IAttribute[],\n        readonly uniforms: IUniform[],\n        readonly textures: ITexture[],\n        readonly updateFunction: (tDelta: number, attrs: IAttribute[], unis: IUniform[]) => void) {}\n\n    update(tDelta: number): void {\n        this.updateFunction(tDelta, this.attributes, this.uniforms);\n    }\n}\n\n\n\n\nexport class Engine {\n\n    readonly entities: IEntity[] = [];\n\n    constructor() {}\n\n    public renderLoop(gl: WebGLRenderingContext, fps: number): void {\n        setup3dScene(gl);\n\n        const tDeltaTarget = 1000 * 1.0 / fps;\n        let tStart, tNow: number, tDelta: number, tSleep;\n        let currentShader = '';\n        const render = () => {\n            tStart = window.performance.now();\n\n            // Part 1: allow objects to update their state\n            for (const e of this.entities) {\n                e.update(tDeltaTarget);\n            }\n\n            // Part 2: do the actual rendering work here\n            clearBackground(gl, [.7, .7, .7, 1]);\n            for (const e of this.entities) {\n                if (e.program.id !== currentShader) {\n                    bindProgram(gl, e.program.program);\n                    currentShader = e.program.id;\n                }\n                for (const a of e.attributes) {\n                    bindBufferToAttribute(gl, a.location, a.value);\n                }\n                for (const u of e.uniforms) {\n                    bindValueToUniform(gl, u.location, u.type, u.value);\n                }\n                for (const t of e.textures) {\n                    bindTextureToUniform(gl, t.texture.texture, t.bindPoint, t.location);\n                }\n                gl.drawArrays(gl.TRIANGLES, 0, e.attributes[0].value.vectorCount);\n            }\n\n            // Part 3: time-management\n            tNow = window.performance.now();\n            tDelta = tNow - tStart;\n            tSleep = Math.max(tDeltaTarget - tDelta, 0);\n            setTimeout(() => {\n                requestAnimationFrame(render);\n            }, tSleep);\n\n        };\n\n        render();\n    }\n\n    public addEntity(entity: IEntity): void {\n        this.entities.push(entity);\n        this.sortEntities();\n    }\n\n\n    private sortEntities(): void {\n        this.entities.sort((a: IEntity, b: IEntity) => {\n            return (a.program.id > b.program.id) ? 1 : -1;\n        });\n    }\n\n\n}\n","/**\n * While webgl's clip space has coordinates [-1, 1] (left to right), [-1, 1] (bottom to top),\n * textures go from [0, 1] (left to right), [0, 1] (bottom to top).\n */\n\n\n\nexport interface ShapeA {\n    vertices: [number, number, number][];\n    texturePositions: [number, number][];\n}\n\nexport interface ShapeE {\n    vertices: [number, number, number][];\n    texturePositions: [number, number][];\n    vertexIndices: [number, number, number][];\n}\n\n\n\nexport const triangleA = (width: number, height: number): ShapeA => {\n    return {\n        vertices: [\n            [-width / 2, -height / 2, 0],\n            [         0,  height / 2, 0],\n            [ width / 2, -height / 2, 0]\n        ],\n        texturePositions: [\n            [0, 0],\n            [0, 1],\n            [1, 0]\n        ]\n    };\n};\n\n\nexport const triangleE = (width: number, height: number): ShapeE => {\n    return {\n        vertices: [\n            [-width / 2, -height / 2, 0],\n            [         0,  height / 2, 0],\n            [ width / 2, -height / 2, 0]\n        ],\n        texturePositions: [\n            [0, 0],\n            [0, 1],\n            [1, 0]\n        ],\n        vertexIndices: [\n            [0, 1, 2]\n        ]\n    };\n};\n\n\nexport const rectangleA = (width: number, height: number): ShapeA => {\n    return {\n        vertices: [\n            [-width / 2,  height / 2, 0],\n            [-width / 2, -height / 2, 0],\n            [ width / 2, -height / 2, 0],\n            [-width / 2,  height / 2, 0],\n            [ width / 2, -height / 2, 0],\n            [ width / 2,  height / 2, 0],\n        ],\n        texturePositions: [\n            [0, 1],\n            [0, 0],\n            [1, 0],\n            [0, 1],\n            [1, 0],\n            [1, 1]\n        ]\n    };\n};\n\nexport const rectangleE = (width: number, height: number): ShapeE => {\n    return {\n        vertices: [\n            [-width / 2,  height / 2, 0],\n            [-width / 2, -height / 2, 0],\n            [ width / 2, -height / 2, 0],\n            [ width / 2,  height / 2, 0],\n        ],\n        texturePositions: [\n            [0, 1],\n            [0, 0],\n            [1, 0],\n            [1, 1]\n        ],\n        vertexIndices: [\n            [0, 1, 2],\n            [0, 2, 3]\n        ]\n    };\n};\n\n","import { TextureObject, createShaderProgram, createFloatBuffer, getAttributeLocation, bindBufferToAttribute, clearBackground, getUniformLocation, bindTextureToUniform, bindProgram, bindValueToUniform, createTexture } from './webgl';\nimport { rectangleA } from './engine.shapes';\n\n\n\nexport const displayImageOn = (canvas: HTMLCanvasElement, image: HTMLImageElement): void => {\n\n    const gl = canvas.getContext('webgl');\n    if (!gl) {\n        throw new Error('No context');\n    }\n\n    const vertexShaderSource = `\n    attribute vec4 a_vertex;\n    attribute vec2 a_textureCoord;\n    varying vec2 v_textureCoord;\n    void main() {\n        v_textureCoord = a_textureCoord;\n        gl_Position = a_vertex;\n    }\n    `;\n    const fragmentShaderSource = `\n    precision mediump float;\n    uniform sampler2D u_texture;\n    // uniform vec2 u_textureSize;\n    varying vec2 v_textureCoord;\n    void main() {\n        // vec2 delta = vec2(1., 1.) / u_textureSize;\n        gl_FragColor = texture2D(u_texture, v_textureCoord); //  * 0. + vec4(5., 5., 0., 1.);\n    }\n    `;\n    const program = createShaderProgram(gl, vertexShaderSource, fragmentShaderSource);\n    bindProgram(gl, program);\n\n    const rct = rectangleA(1.3, 1.3);\n\n    const bxData = createFloatBuffer(gl, rct.vertices);\n    const bxLoc = getAttributeLocation(gl, program, 'a_vertex');\n    bindBufferToAttribute(gl, bxLoc, bxData);\n\n    const texCoords = createFloatBuffer(gl, rct.texturePositions);\n    const texCoordsLoc = getAttributeLocation(gl, program, 'a_textureCoord');\n    bindBufferToAttribute(gl, texCoordsLoc, texCoords);\n\n    const texture = createTexture(gl, image);\n    const textureLoc = getUniformLocation(gl, program, 'u_texture');\n    bindTextureToUniform(gl, texture.texture, 0, textureLoc);\n\n    clearBackground(gl, [.9, .9, .9, 1.0]);\n    gl.drawArrays(gl.TRIANGLES, 0, rct.vertices.length);\n};\n\n\n\nexport const createTextCanvas = (text: string, width: number = 256, height: number = 256, color: string = 'red') => {\n    const ctx = document.createElement('canvas').getContext('2d');\n    if (!ctx) {\n        throw new Error('no context');\n    }\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.font = `bold ${height * 5 / 6 | 0}px sans-serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = color;\n    ctx.fillText(text, width / 2, height / 2);\n    return ctx.canvas;\n};\n\n\nexport const canvasToImage = (canvas: HTMLCanvasElement): HTMLImageElement => {\n    const image = document.createElement('img');\n    image.width = canvas.width;\n    image.height = canvas.height;\n    image.src = canvas.toDataURL('image/png');\n    return image;\n};\n\nexport const arrayToCanvas = (data: number[][][]) => {\n    const rows = data.length;\n    const cols = data[0].length;\n\n    const buffer = new Uint8ClampedArray(cols * rows * 4);\n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n            const pos = (r * cols + c) * 4;\n            buffer[pos    ] = data[r][c][0];\n            buffer[pos + 1] = data[r][c][1];\n            buffer[pos + 2] = data[r][c][2];\n            buffer[pos + 3] = data[r][c][3];\n        }\n    }\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = cols;\n    canvas.height = rows;\n    const imageDataContainer = ctx.createImageData(cols, rows);\n    imageDataContainer.data.set(buffer);\n    ctx.putImageData(imageDataContainer, 0, 0);\n\n    return canvas;\n};\n\n","import LayerRenderer from 'ol/renderer/Layer';\nimport ImageLayer from 'ol/layer/Image';\nimport ImageSource from 'ol/source/Image';\nimport { FrameState } from 'ol/PluggableMap';\nimport { transformExtent } from 'ol/proj';\nimport Static from 'ol/source/ImageStatic';\nimport { Shader, Program, Uniform, Texture, Attribute } from '../../webgl/engine.core';\nimport { createTextCanvas } from '../../webgl/engine.helpers';\nimport { bindProgram } from '../../webgl/webgl';\nimport { ShapeA, rectangleA } from '../../webgl/engine.shapes';\nimport { flattenRecursive } from '../../webgl/utils';\n\n\n\nexport class DtmLayer extends ImageLayer<ImageSource> {\n    private renderer: DtmImageRenderer;\n\n    constructor(options) {\n        super(options);\n    }\n\n    createRenderer(): DtmImageRenderer {\n        this.renderer = new DtmImageRenderer(this);\n        return this.renderer;\n    }\n\n    updateSunAngle(angle: number[]): void {\n        this.renderer.updateSunAngle(angle);\n    }\n}\n\n\n/**\n * This renderer serves as a illustration of a very common technique in WebGL: normal-maps.\n * Here we use a texture from NASA's SRTM mission as our base-DTM.\n * Based on this, we calculate surface-normals. For each pixel in the DTM, we check how the surface-normal\n * is aligned with an incoming sun-ray.\n *\n * In real-world applications, many more such techniques are employed. Alongside normal-maps there are:\n *  - specular maps,\n *  - occlusion maps,\n *  - ...\n */\nexport class DtmImageRenderer extends LayerRenderer<ImageLayer<ImageSource>> {\n\n    readonly canvas: HTMLCanvasElement;\n    readonly gl: WebGLRenderingContext;\n    readonly shader: Shader;\n    readonly projection;\n    private state: 'loading' | 'ready' = 'loading';\n\n    constructor(layer: ImageLayer<ImageSource>) {\n        super(layer);\n\n        // Step 1: setting up canvas\n        const canvas = document.createElement('canvas');\n        canvas.width = 1200;\n        canvas.height = 800;\n        canvas.style.position = 'absolute';\n\n        // Step 2: setting up webgl\n        const gl = canvas.getContext('webgl');\n\n        // Step 3: setting up variables for program\n        const source = layer.getSource() as Static;\n        const currentProjection = source.getProjection();\n        const bbox = source.getImageExtent();\n        const rectangleInWorldPosition = this.bboxOntoRectangle(2, 2, bbox);\n        const image = createTextCanvas('test', 2048, 2048, 'red');\n\n        // Step 4: setting up program\n        const program = new Program(gl, `\n            attribute vec3 a_position;\n            attribute vec2 a_texturePosition;\n            uniform mat3 u_world2pix;\n            uniform mat3 u_pix2canv;\n            varying vec2 v_texturePosition;\n            void main() {\n                vec3 pixelPosition = u_world2pix * vec3(a_position.x, a_position.y, 1.);\n                vec3 canvasPosition = u_pix2canv * pixelPosition;\n                gl_Position = vec4(canvasPosition.x, canvasPosition.y, 0., 1.);\n                v_texturePosition = a_texturePosition;\n            }\n        `, `\n            precision mediump float;\n            uniform sampler2D u_srtm;\n            uniform float u_imageSize;\n            uniform vec3 u_sun;\n            varying vec2 v_texturePosition;\n            void main() {\n                float delta = 4. / u_imageSize;\n                float top = texture2D(u_srtm, vec2(v_texturePosition.x,         1. - v_texturePosition.y + delta)).r;\n                float bot = texture2D(u_srtm, vec2(v_texturePosition.x,         1. - v_texturePosition.y - delta)).r;\n                float lft = texture2D(u_srtm, vec2(v_texturePosition.x + delta, 1. - v_texturePosition.y        )).r;\n                float rgt = texture2D(u_srtm, vec2(v_texturePosition.x - delta, 1. - v_texturePosition.y        )).r;\n\n                vec3 surfaceNormal = vec3(\n                    lft - rgt,\n                    bot - top,\n                    2. * delta\n                );\n                surfaceNormal = normalize(surfaceNormal);\n                vec3 sunNormal = normalize(u_sun);\n                float alignment = abs(dot(sunNormal, surfaceNormal));\n\n                gl_FragColor = vec4(0., 0., 0., 0.5 * alignment);\n            }\n        `);\n        bindProgram(gl, program.program); // todo: is this required?\n\n        const shader = new Shader(\n            program,\n            [\n                new Attribute(gl, program, 'a_position', rectangleInWorldPosition.vertices),\n                new Attribute(gl, program, 'a_texturePosition', rectangleInWorldPosition.texturePositions)\n            ], [\n                new Uniform(gl, program, 'u_imageSize', 'float', [2048.]),\n                new Uniform(gl, program, 'u_sun', 'vec3', [0., 0., 1.]),  // array, pointing to sun from middle of map.\n                new Uniform(gl, program, 'u_world2pix', 'mat3', flattenRecursive([\n                    [1., 0., 0.],\n                    [0., 1., 0.],\n                    [0., 0., 1.]\n                ])),\n                new Uniform(gl, program, 'u_pix2canv', 'mat3', flattenRecursive([\n                    [1. /  (canvas.width / 2),  0.,                        0. ],\n                    [0,                        -1. / (canvas.height / 2),  0. ],\n                    [-1.,                      1.,                         1. ]\n                ]))\n            ], [\n                new Texture(gl, program, 'u_srtm', image, 0)\n            ]\n        );\n        shader.bind(gl);\n\n        // binding data for later use\n        this.shader = shader;\n        this.canvas = canvas;\n        this.gl = gl;\n        this.projection = currentProjection;\n\n        // step 5: loading actual image\n        const imageWrapper = source.getImage(bbox, 0.02197265625, 2.440000295639038, currentProjection);\n        imageWrapper.addEventListener('change', (evt: Event) => {\n            const newImage = imageWrapper.getImage() as HTMLImageElement | HTMLCanvasElement;\n            this.shader.updateTextureData(this.gl, 'u_srtm', newImage);\n            this.shader.bind(this.gl);\n            this.state = 'ready';\n            super.getLayer().changed();\n        });\n        imageWrapper.load();\n    }\n\n\n    prepareFrame(frameState: FrameState): boolean {\n        if (this.state === 'ready') {\n            const c2pT = frameState.coordinateToPixelTransform;\n            const worldToPixelTransform = [\n                [c2pT[0],   c2pT[1],    0. ],\n                [c2pT[2],   c2pT[3],    0. ],\n                [c2pT[4],   c2pT[5],    1. ]\n            ];\n            this.shader.updateUniformData(this.gl, 'u_world2pix', flattenRecursive(worldToPixelTransform));\n            this.shader.bind(this.gl); // <--- @TODO: inefficient! Only re-bind world2pix matrix.\n\n            if (frameState.viewState.projection !== this.projection) {\n                this.reprojectImage(frameState.viewState.projection);\n            }\n        }\n\n        return true;\n    }\n\n\n    renderFrame(frameState: FrameState, target: HTMLElement): HTMLElement {\n        if (this.state === 'ready') {\n            this.shader.render(this.gl);\n            this.transformCanvas(frameState);\n        }\n        return this.canvas;\n    }\n\n    renderDeclutter(frameState: FrameState) {\n    }\n\n\n    updateSunAngle(angle: number[]): void {\n        this.shader.updateUniformData(this.gl, 'u_sun', [angle[0], angle[1], 1.0]);\n        this.shader.bind(this.gl);\n        this.shader.render(this.gl);\n    }\n\n\n    private bboxOntoRectangle(width: number, height: number, bbox: number[]): ShapeA {\n        const rect = rectangleA(width, height);\n        for (const vertex of rect.vertices) {\n            const x = vertex[0];\n            const y = vertex[1];\n            vertex[0] = (x === width / 2) ? bbox[2] : bbox[0];\n            vertex[1] = (y === height / 2) ? bbox[3] : bbox[1];\n        }\n        return rect;\n    }\n\n    private reprojectImage(targetProjection): void {\n        const source = super.getLayer().getSource() as Static;\n        const sourceProjection = source.getProjection();\n        const bbox = source.getImageExtent();\n        const bboxInTargetProj = transformExtent(bbox, sourceProjection, targetProjection);\n        const newRectangleInWorldPosition = this.bboxOntoRectangle(2, 2, bboxInTargetProj);\n        this.shader.updateAttributeData(this.gl, 'a_position', newRectangleInWorldPosition.vertices);\n        this.shader.bind(this.gl);\n    }\n\n    private transformCanvas(frameState: FrameState): void {\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const pixelRatio = frameState.pixelRatio;\n        const size = frameState.size;\n        const width = Math.round(size[0] * pixelRatio);\n        const height = Math.round(size[1] * pixelRatio);\n        const opacity = layerState.opacity;\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.style.opacity = `${opacity}`;\n\n        const pix2canv = [\n            [1. /  (this.canvas.width / 2),  0.,                              0. ],\n            [0,                              -1. / (this.canvas.height / 2),  0. ],\n            [-1.,                            1.,                              1. ]\n        ];\n        this.shader.updateUniformData(this.gl, 'u_pix2canv', flattenRecursive(pix2canv));\n        // this.interpolationShader.bind(this.gl); <-- not required: already happens in `prepareFrame`\n    }\n}\n","import { Feature } from 'ol';\nimport { FrameState } from 'ol/PluggableMap';\nimport LayerRenderer from 'ol/renderer/Layer';\nimport CanvasVectorLayerRenderer from 'ol/renderer/canvas/VectorLayer';\nimport VectorLayer from 'ol/layer/Vector';\nimport Geometry from 'ol/geom/Geometry';\nimport Point from 'ol/geom/Point';\nimport { Vector as VectorSource, Cluster as olCluster } from 'ol/source';\nimport { replaceChildren } from 'ol/dom';\nimport { Projection } from 'ol/proj';\nimport { Shader, Framebuffer, Program, Uniform, Index, Texture, Attribute, DataTexture } from '../../webgl/engine.core';\nimport { FramebufferObject, getCurrentFramebuffersPixels } from '../../webgl/webgl';\nimport { rectangleA, rectangleE } from '../../webgl/engine.shapes';\nimport { nextPowerOf, flattenRecursive, createNDimArray } from '../../webgl/utils';\n\n\n\n\nexport type ColorRamp = {val: number, rgb: [number, number, number]}[];\n\n\n\nexport interface InterpolationLayerOptions {\n    source: VectorSource<Point>;\n    renderSettings: InterpolationRendererSettings;\n    [key: string]: any;\n}\n\nexport interface InterpolationRendererSettings {\n    /** maximum distance for interpolation */\n    maxEdgeLength: number;\n    power: number;\n    /** `val`/`color` pairs. a given `color` is used for all values strictly smaller than `val`.  */\n    colorRamp: ColorRamp;\n    /** show a smooth color-gradient or isolines? */\n    smooth: boolean;\n    /** which feature-property should be interpolated? */\n    valueProperty: string;\n    showLabels: boolean;\n    /** allows you to read out interpolated pixel values, but bad for performance */\n    storeInterpolatedPixelData: boolean;\n}\n\n\nexport class InterpolationLayer extends VectorLayer<VectorSource<Geometry>> {\n\n    readonly options: InterpolationLayerOptions;\n\n    constructor(options: InterpolationLayerOptions) {\n        super(options);\n        this.options = options;\n    }\n\n    createRenderer(): InterpolationRenderer {\n        return new InterpolationRenderer(this, this.options.renderSettings);\n    }\n\n    updateParas(power: number, smooth: boolean, showLabels: boolean): void {\n        const newSettings: InterpolationRendererSettings = {\n            colorRamp: this.options.renderSettings.colorRamp,\n            maxEdgeLength: this.options.renderSettings.maxEdgeLength,\n            storeInterpolatedPixelData: this.options.renderSettings.storeInterpolatedPixelData,\n            valueProperty: this.options.renderSettings.valueProperty,\n            power: power,\n            showLabels: showLabels,\n            smooth: smooth,\n        };\n        (super.getRenderer() as never as InterpolationRenderer).updateSettings(newSettings);\n        this.options.renderSettings = newSettings;\n    }\n}\n\n/**\n * This renderer runs three shaders in a row.\n *  1. interpolationShader: takes every observation at every pixel and executes the interpolation. The values are stored in `valueFb`.\n *  2. colorizationShader: uses the interpolated values from valueFb to apply the colorization according to the given colorRamp and smoothing-options.\n *  3. arrangementShader: the previous shaders have moved the data in the center of the canvas. this shader now arranges the pixels to the correct position relative to the map.\n *\n * Only the third shader needs to be executed with every frame. This way, the operation-heavy interpolation does not slow down the map.\n * It generally makes sense to arrange shaders in such a way that all openlayers-perspective-operations occur in the last shader.\n *\n * valueFb is also being used to handle click events: from this structure we get the actual value at a pixel when the user clicks.\n *\n * Note a few caveats.\n * This implementation is not really intended for updating observations, maxEdgeLength or colorRamps at runtime. These parameters are rather intended for the developer to set once.\n * While you can change the color-ramp at runtime, it's length is hardcoded in the colorization shader, so you'd have to recompile it to properly reflect the new ramp.\n * In the same way, the interpolation-shader has the number of observations baked into it. When new data becomes available, you must recompile the interpolation shader.\n */\nexport class InterpolationRenderer extends LayerRenderer< VectorLayer<VectorSource<Geometry>>> {\n\n    private container: HTMLDivElement;\n    private pointRenderer: CanvasVectorLayerRenderer;\n    private webGlCanvas: HTMLCanvasElement;\n    private gl: WebGLRenderingContext;\n    private interpolationShader: Shader;\n    private valueFb: Framebuffer;\n    private colorizationShader: Shader;\n    private colorFb: Framebuffer;\n    private arrangementShader: Shader;\n    private interpolatedValues: Uint8Array;\n\n    private projection: Projection;\n    private bbox: number[];\n\n    constructor(layer: VectorLayer<VectorSource<Geometry>>, private settings: InterpolationRendererSettings) {\n        super(layer);\n\n        // setting up HTML element\n        this.container = document.createElement('div');\n        this.container.classList.add('ol-layer');\n        this.container.style.setProperty('position', 'absolute');\n        this.container.style.setProperty('width', '100%');\n        this.container.style.setProperty('height', '100%');\n\n        this.webGlCanvas = document.createElement('canvas');\n        this.webGlCanvas.style.setProperty('position', 'absolute');\n        this.webGlCanvas.style.setProperty('left', '0px');\n        this.webGlCanvas.style.setProperty('top', '0px');\n        this.webGlCanvas.style.setProperty('width', '100%');\n        this.webGlCanvas.style.setProperty('height', '100%');\n        this.webGlCanvas.width = 1000;  // <-- make smaller for better performance\n        this.webGlCanvas.height = 1000;  // <-- make smaller for better performance\n        this.gl = this.webGlCanvas.getContext('webgl');\n        this.container.appendChild(this.webGlCanvas);\n\n        // setting up point-renderer\n        this.pointRenderer = new CanvasVectorLayerRenderer(layer);\n\n        // preparing data\n        const source = layer.getSource();\n        this.projection = source.getProjection();\n        const { coords, values, bboxDelta, maxVal } = this.parseData(source, this.settings.valueProperty, this.settings.maxEdgeLength);\n        const { observationsBbox, maxEdgeLengthBbox } = this.parseDataBbox(bboxDelta, coords, values, maxVal, this.settings.maxEdgeLength);\n        this.bbox = bboxDelta;\n\n        // setting up shaders\n        const identity = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n        this.interpolationShader = createInverseDistanceInterpolationShader(this.gl, observationsBbox, maxVal, this.settings.power, maxEdgeLengthBbox);\n        this.valueFb = new Framebuffer(this.gl, this.webGlCanvas.width, this.webGlCanvas.height);\n        this.colorizationShader = createColorizationShader(this.gl, this.settings.colorRamp, maxVal, this.settings.smooth, this.valueFb);\n        this.colorFb = new Framebuffer(this.gl, this.webGlCanvas.width, this.webGlCanvas.height);\n        this.arrangementShader = createArrangementShader(this.gl, identity, identity, bboxDelta, this.colorFb);\n\n        // running first two shaders once\n        this.runInterpolationShader(this.valueFb.fbo);\n        this.runColorizationShader(this.colorFb.fbo);\n    }\n\n    prepareFrame(frameState: FrameState): boolean {\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        this.webGlCanvas.style.opacity = `${layerState.opacity}`;\n\n        if (frameState.viewState.projection !== this.projection) {\n            this.projection = frameState.viewState.projection;\n            const source = super.getLayer().getSource();\n            const { coords, values, bboxDelta, maxVal } = this.parseData(source, this.settings.valueProperty, this.settings.maxEdgeLength);\n            const { observationsBbox, maxEdgeLengthBbox } = this.parseDataBbox(bboxDelta, coords, values, maxVal, this.settings.maxEdgeLength);\n            this.updateInterpolationShader(this.settings.power, observationsBbox, maxEdgeLengthBbox);\n            this.runInterpolationShader(this.valueFb.fbo);\n            this.runColorizationShader(this.colorFb.fbo);\n            this.bbox = bboxDelta;\n        }\n\n        const c2pT = frameState.coordinateToPixelTransform;\n        // using frameState.size instead of this.webGlCanvas.clientWidth because the latter is null when layer invisible.\n        this.updateArrangementShader(c2pT, frameState.size[0], frameState.size[1], this.bbox);\n        this.pointRenderer.prepareFrame(frameState);\n        return true;\n    }\n\n    renderFrame(frameState: FrameState, target: HTMLElement): HTMLElement {\n        this.runArrangementShader();  // @todo: arrangement shader could be replaced with a simple css-transformation-matrix.\n        if (this.settings.showLabels) {\n            const pointCanvas = this.pointRenderer.renderFrame(frameState, this.container);\n            replaceChildren(this.container, [this.webGlCanvas, pointCanvas]);\n        } else {\n            replaceChildren(this.container, [this.webGlCanvas]);\n        }\n        return this.container;\n    }\n\n    renderDeclutter(frameState: FrameState) {\n    }\n\n    public updateSettings(newSettings: InterpolationRendererSettings) {\n        const oldSettings = this.settings;\n        this.settings = newSettings;\n        if (newSettings.power !== oldSettings.power) {\n            this.updateInterpolationShader(newSettings.power);\n            this.runInterpolationShader(this.valueFb.fbo);\n            this.updateColorizationShader(newSettings.smooth);\n            this.runColorizationShader(this.colorFb.fbo);\n        } else if (newSettings.smooth !== oldSettings.smooth) {\n            this.updateColorizationShader(newSettings.smooth);\n            this.runColorizationShader(this.colorFb.fbo);\n        }\n        super.getLayer().changed();\n    }\n\n    /**\n     * Called at every renderFrame. Fast.\n     */\n    private updateArrangementShader(coordinateToPixelTransform: number[], canvasWidth: number, canvasHeight: number, bbox: number[]): void {\n        const world2pix = [\n            [coordinateToPixelTransform[0], coordinateToPixelTransform[1], 0.],\n            [coordinateToPixelTransform[2], coordinateToPixelTransform[3], 0.],\n            [coordinateToPixelTransform[4], coordinateToPixelTransform[5], 1.]\n        ];\n        const pix2clip = [\n            [1. / (canvasWidth / 2), 0., 0.],\n            [0, -1. / (canvasHeight / 2), 0.],\n            [-1., 1., 1.]\n        ];\n        this.arrangementShader.updateUniformData(this.gl, 'u_world2pix', flattenRecursive(world2pix));\n        this.arrangementShader.updateUniformData(this.gl, 'u_pix2clip', flattenRecursive(pix2clip));\n        this.arrangementShader.updateUniformData(this.gl, 'u_bbox', bbox);\n    }\n\n    /**\n     * Called at every renderFrame. Fast.\n     */\n    private runArrangementShader(target?: FramebufferObject): void {\n        this.arrangementShader.bind(this.gl);\n        this.arrangementShader.render(this.gl, [0, 0, 0, 0], target);\n    }\n\n    /**\n     * Slow! Avoid calling this too often.\n     */\n    private updateInterpolationShader(power: number, observations?: number[][], maxEdgeLengthBbox?: number): void {\n        this.interpolationShader.updateUniformData(this.gl, 'u_power', [power]);\n        if (observations) {\n            this.interpolationShader.updateTextureData(this.gl, 'u_dataTexture', [observations]);\n        }\n        if (maxEdgeLengthBbox) {\n            this.interpolationShader.updateUniformData(this.gl, 'u_maxDistance', [maxEdgeLengthBbox]);\n        }\n    }\n\n    /**\n     * Slow! Avoid calling this too often.\n     */\n    private runInterpolationShader(target?: FramebufferObject): void {\n        this.interpolationShader.bind(this.gl);\n        this.interpolationShader.render(this.gl, [0, 0, 0, 0], target);\n        if (this.settings.storeInterpolatedPixelData) {\n            this.interpolatedValues = getCurrentFramebuffersPixels(this.webGlCanvas) as Uint8Array;\n        }\n    }\n\n    /**\n     * Slow! Avoid calling this too often.\n     */\n    private updateColorizationShader(smooth: boolean): void {\n        // this.colorizationShader.updateUniformData(this.gl, 'u_colorRampValues', colorRamp.map(e => e.val));\n        // this.colorizationShader.updateUniformData(this.gl, 'u_colorRampColors', flattenRecursive( colorRamp.map(e => e.rgb) ));\n        this.colorizationShader.updateUniformData(this.gl, 'u_smooth', [smooth ? 1 : 0]);\n    }\n\n    /**\n     * Slow! Avoid calling this too often.\n     */\n    private runColorizationShader(target?: FramebufferObject): void {\n        this.colorizationShader.bind(this.gl);\n        this.colorizationShader.render(this.gl, [0, 0, 0, 0], target);\n    }\n\n    private parseData(source, valueProperty: string, maxEdgeLength: number) {\n        let features: Feature<Point>[] = source.getFeatures() as Feature<Point>[];\n        if (source instanceof olCluster) {\n            features = source.getSource().getFeatures() as Feature<Point>[];\n        } else {\n            features = source.getFeatures() as Feature<Point>[];\n        }\n\n        const coords = features.map(f => f.getGeometry().getCoordinates());\n        const values = features.map(f => parseFloat(f.getProperties()[valueProperty]));\n\n        const bbox = getBbox(coords);\n        const deltaX = bbox[2] - bbox[0];\n        const deltaY = bbox[3] - bbox[1];\n        let addX: number, addY: number;\n        if (deltaX > deltaY) {\n            addY = deltaX - deltaY;\n            addX = 0;\n        } else {\n            addY = 0;\n            addX = deltaY - deltaX;\n        }\n        const bboxDelta = [\n            bbox[0] - maxEdgeLength,\n            bbox[1] - maxEdgeLength,\n            bbox[2] + addX + maxEdgeLength,\n            bbox[3] + addY + maxEdgeLength\n        ];\n        const maxVal = values.reduce((prev, curr) => curr > prev ? curr : prev, 0);\n\n        return {\n            coords, values, bboxDelta, maxVal\n        };\n    }\n\n    private parseDataBbox(bbox, coords, values, maxVal, maxEdgeLength) {\n        const observationsBbox = zip(coords, values).map(o => {\n            const coordsBbox = worldCoords2clipBbox([o[0], o[1]], bbox);\n            return [\n                255 * (coordsBbox[0] + 1) / 2,\n                255 * (coordsBbox[1] + 1) / 2,\n                255 * o[2] / maxVal,\n                255\n            ];\n        });\n        const nrObservations = observationsBbox.length;\n        const nextPowerOfTwo = nextPowerOf(nrObservations, 2);\n        for (let i = 0; i < nextPowerOfTwo - nrObservations; i++) {\n            observationsBbox.push([0, 0, 0, 0]);\n        }\n\n        const deltaX = bbox[2] - bbox[0];\n        const deltaY = bbox[3] - bbox[1];\n        const maxEdgeLengthBbox = maxEdgeLength / Math.max(deltaX, deltaY);\n\n        return { observationsBbox, maxEdgeLengthBbox };\n    }\n}\n\nconst worldCoords2clipBbox = (point: number[], bbox: number[]): number[] => {\n    const xPerct = (point[0] - bbox[0]) / (bbox[2] - bbox[0]);\n    const yPerct = (point[1] - bbox[1]) / (bbox[3] - bbox[1]);\n    const xClip = 2 * xPerct - 1;\n    const yClip = 2 * yPerct - 1;\n    return [xClip, yClip];\n};\n\nconst createInverseDistanceInterpolationShader = (gl: WebGLRenderingContext, observationsBbox: number[][], maxValue: number, power: number, maxEdgeLengthBbox: number): Shader => {\n\n    const maxObservations = 10000;\n    const inverseDistanceProgram = new Program(gl, `\n            precision mediump float;\n            attribute vec3 a_position;\n            attribute vec2 a_texturePosition;\n            varying vec2 v_position;\n            varying vec2 v_texturePosition;\n\n            void main() {\n                v_position = a_position.xy;\n                v_texturePosition = a_texturePosition;\n                gl_Position = vec4(a_position.xy, 0.0, 1.0);\n            }\n        `, `\n            precision mediump float;\n            uniform float u_power;\n            uniform sampler2D u_dataTexture;\n            uniform int u_nrDataPoints;\n            uniform float u_maxValue;\n            uniform float u_maxDistance;\n            varying vec2 v_position;\n            varying vec2 v_texturePosition;\n\n            void main() {\n\n                float valSum = 0.0;\n                float wSum = 0.0;\n                float minD = 10000.0;\n                for (int i = 0; i < ${maxObservations}; i++) {\n                    if (i > u_nrDataPoints) {\n                        break;\n                    }\n                    vec4 dataPoint = texture2D(u_dataTexture, vec2(float(i) / float(u_nrDataPoints), 0.5));\n                    if (dataPoint.w > 0.0) {  // texture is padded to next power of two with transparent 0-values.\n                        vec2 coords = dataPoint.xy * 2.0 - 1.0;  // transforming coords from [0, 1] to [-1, 1]\n                        float value = dataPoint.z * u_maxValue;  // transforming value from [0, 1] to [0, maxValue]\n\n                        float d = distance(v_position, coords);\n                        float w = 1.0 / pow(d, u_power);\n                        valSum += value * w;\n                        wSum += w;\n                        if (d < minD) {\n                            minD = d;\n                        }\n                    }\n                }\n                float interpolatedValue = valSum / wSum;\n                float alpha = 1.0;\n                if (minD > u_maxDistance) {\n                    alpha = 0.0;\n                }\n                vec4 color = vec4(interpolatedValue / u_maxValue, 0.0, 0.0, alpha);\n\n                gl_FragColor = color;\n            }\n        `);\n\n    const viewPort = rectangleE(2, 2);\n    const inverseDistanceShader = new Shader(inverseDistanceProgram, [\n        new Attribute(gl, inverseDistanceProgram, 'a_position', viewPort.vertices),\n        new Attribute(gl, inverseDistanceProgram, 'a_texturePosition', viewPort.texturePositions)\n    ], [\n        new Uniform(gl, inverseDistanceProgram, 'u_power', 'float', [power]),\n        new Uniform(gl, inverseDistanceProgram, 'u_nrDataPoints', 'int', [observationsBbox.length]),\n        new Uniform(gl, inverseDistanceProgram, 'u_maxValue', 'float', [maxValue]),\n        new Uniform(gl, inverseDistanceProgram, 'u_maxDistance', 'float', [maxEdgeLengthBbox])\n    ], [\n        new DataTexture(gl, inverseDistanceProgram, 'u_dataTexture', [observationsBbox], 0)\n    ], new Index(gl, viewPort.vertexIndices));\n\n    return inverseDistanceShader;\n};\n\nconst createColorizationShader = (gl: WebGLRenderingContext, colorRamp: ColorRamp, maxVal: number, smooth: boolean, valueFb: Framebuffer): Shader => {\n\n    const maxColorRampValues = 15;\n    const colorizationProgram = new Program(gl, `\n            precision mediump float;\n            attribute vec2 a_position;\n            attribute vec2 a_textureCoord;\n            varying vec2 v_textureCoord;\n\n            void main() {\n                v_textureCoord = a_textureCoord;\n                gl_Position = vec4(a_position.xy, 0.0, 1.0);\n            }\n        `, `\n            precision mediump float;\n            uniform float u_colorRampValues[${maxColorRampValues}];\n            uniform vec3 u_colorRampColors[${maxColorRampValues}];\n            uniform int u_nrColorRampValues;\n            uniform float u_maxValue;\n            uniform bool u_smooth;\n            uniform sampler2D u_valueTexture;\n            varying vec2 v_textureCoord;\n\n            vec3 valueToSmoothColor(in float value) {\n                if (value < u_colorRampValues[0]) {\n                    return u_colorRampColors[0];\n                }\n                for (int i = 1; i < ${maxColorRampValues}; i++) {\n                    if (i > u_nrColorRampValues) {\n                        break;\n                    }\n                    if (value < u_colorRampValues[i]) {\n                        float alpha = (value - u_colorRampValues[i-1]) / (u_colorRampValues[i] - u_colorRampValues[i-1]);\n                        vec3 color = alpha * (u_colorRampColors[i] - u_colorRampColors[i-1]) + u_colorRampColors[i-1];\n                        return color;\n                    }\n                    if (i == u_nrColorRampValues) {\n                        return u_colorRampColors[i];\n                    }\n                }\n            }\n\n            vec3 valueToStepColor(in float value) {\n                for (int i = 0; i < ${maxColorRampValues}; i++) {\n                    if (i > u_nrColorRampValues) {\n                        break;\n                    }\n                    if (value < u_colorRampValues[i]) {\n                        return u_colorRampColors[i];\n                    }\n                    if (i == u_nrColorRampValues) {\n                        return u_colorRampColors[i];\n                    }\n                }\n            }\n\n            void main() {\n                vec4 pixelData = texture2D(u_valueTexture, v_textureCoord);\n                float val = pixelData.r * u_maxValue;\n                float alpha = pixelData.w;\n                vec3 rgb = vec3(0.0, 0.0, 0.0);\n                if (alpha > 0.01) {\n                    if (u_smooth) {\n                        rgb = valueToSmoothColor(val);\n                    } else {\n                        rgb = valueToStepColor(val);\n                    }\n                }\n                gl_FragColor = vec4(rgb.x / 255.0, rgb.y / 255.0, rgb.z / 255.0, alpha);\n            }\n        `);\n\n    const colorizationShader = new Shader(colorizationProgram, [\n        new Attribute(gl, colorizationProgram, 'a_position', rectangleA(2.0, 2.0).vertices),\n        new Attribute(gl, colorizationProgram, 'a_textureCoord', rectangleA(2.0, 2.0).texturePositions)\n    ], [\n        new Uniform(gl, colorizationProgram, 'u_colorRampValues', 'float[]', colorRamp.map(e => e.val)),\n        new Uniform(gl, colorizationProgram, 'u_colorRampColors', 'vec3[]', flattenRecursive( colorRamp.map(e => e.rgb) )),\n        new Uniform(gl, colorizationProgram, 'u_nrColorRampValues', 'int', [colorRamp.length]),\n        new Uniform(gl, colorizationProgram, 'u_maxValue', 'float', [maxVal]),\n        new Uniform(gl, colorizationProgram, 'u_smooth', 'bool', [smooth ? 1 : 0]),\n    ], [\n        new Texture(gl, colorizationProgram, 'u_valueTexture', valueFb.fbo.texture, 0)\n    ]);\n\n    return colorizationShader;\n};\n\n\nconst createArrangementShader = (gl: WebGLRenderingContext, world2pix: number[][], pix2clip: number[][], bbox: number[], colorFb: Framebuffer): Shader => {\n    const arrangementProgram = new Program(gl, `\n            precision mediump float;\n            attribute vec3 a_pos;\n            attribute vec2 a_posTexture;\n            uniform mat3 u_world2pix;\n            uniform mat3 u_pix2clip;\n            uniform vec4 u_bbox;\n            varying vec2 v_posTexture;\n\n            vec2 clipBbx2worldCoords(vec2 clipCoords, vec4 bbox) {\n                float xPerct = ( clipCoords.x + 1.0 ) / 2.0;\n                float yPerct = ( clipCoords.y + 1.0 ) / 2.0;\n                float xWorld = xPerct * (bbox.z - bbox.x) + bbox.x;\n                float yWorld = yPerct * (bbox.w - bbox.y) + bbox.y;\n                return vec2(xWorld, yWorld);\n            }\n\n            void main() {\n                v_posTexture = a_posTexture;\n                vec2 worldPos = clipBbx2worldCoords(a_pos.xy, u_bbox);\n                vec3 clipPos = u_pix2clip * u_world2pix * vec3(worldPos.xy, 1.0);\n                gl_Position = vec4(clipPos.xy, 0.0, 1.0);\n            }\n        `, `\n            precision mediump float;\n            uniform sampler2D u_texture;\n            varying vec2 v_posTexture;\n\n            void main() {\n                gl_FragColor = texture2D(u_texture, v_posTexture);\n            }\n        `);\n\n    const arrangementShader = new Shader(arrangementProgram, [\n        new Attribute(gl, arrangementProgram, 'a_pos', rectangleA(2, 2).vertices),\n        new Attribute(gl, arrangementProgram, 'a_posTexture', rectangleA(2, 2).texturePositions),\n    ], [\n        new Uniform(gl, arrangementProgram, 'u_world2pix', 'mat3', flattenRecursive(world2pix)),\n        new Uniform(gl, arrangementProgram, 'u_pix2clip', 'mat3', flattenRecursive(pix2clip)),\n        new Uniform(gl, arrangementProgram, 'u_bbox', 'vec4', bbox)\n    ], [\n        new Texture(gl, arrangementProgram, 'u_texture', colorFb.fbo.texture, 0)\n    ]);\n\n    return arrangementShader;\n};\n\nconst getBbox = (obs: number[][]): number[] => {\n    const xs = obs.map(p => p[0]);\n    const ys = obs.map(p => p[1]);\n    const xMin = Math.min(...xs);\n    const xMax = Math.max(...xs);\n    const yMin = Math.min(...ys);\n    const yMax = Math.max(...ys);\n    return [xMin, yMin, xMax, yMax];\n};\n\nconst zip = (arr0: any[], arr1: any[]): any[] => {\n    const out = [];\n    for (let i = 0; i < arr0.length; i++) {\n        out.push(arr0[i].concat(arr1[i]));\n    }\n    return out;\n};\n\nconst createDistanceMatrix = (coords: number[][]): number[][] => {\n    const matrix = createNDimArray([coords.length, coords.length]);\n    for (let i = 0; i < coords.length; i++) {\n        for (let j = i + 1; j < coords.length; j++) {\n            const d = pointDistance(coords[i], coords[j]);\n            matrix[i][j] = d;\n            matrix[j][i] = d;\n        }\n    }\n    return matrix;\n};\n\nconst create7NearestNeighborsTextureData = (distanceMatrix: number[][], coords: number[][], values: number[]): number[][][] => {\n    const rows = nextPowerOf(values.length, 2);\n    const data = createNDimArray([rows, 8, 4]);\n    for (let r = 0; r < values.length; r++) {\n        data[r][0] = [coords[r][0], coords[r][1], values[r], 255];\n        const neighborIndices = getNIndicesSmallest(7, distanceMatrix[r]);\n        for (let n = 1; n < 8; n++) {\n            const ni = neighborIndices[n - 1];\n            data[r][n] = [coords[ni][0], coords[ni][1], values[ni], 255];\n        }\n    }\n    return data;\n};\n\nconst pointDistance = (a: number[], b: number[]): number => {\n    return Math.sqrt(Math.pow((a[0] - b[0]), 2) + Math.pow((a[1] - b[1]), 2));\n};\n\nconst getNIndicesSmallest = (n: number, values: number[]): number[] => {\n    const smallest = getNSmallest(n, values);\n    const indices = getIndicesInArray(smallest, values);\n    return indices;\n};\n\nconst getIndicesInArray = (pickedValues: number[], allValues: number[]): number[] => {\n    return pickedValues.map(v => allValues.findIndex(a => a === v));\n};\n\nconst getNSmallest = (n: number, values: number[]): number[] => {\n    return values.sort(function(a, b){ return a - b; }).slice(0, n);\n};\n","import { Feature } from 'ol';\nimport { FrameState } from 'ol/PluggableMap';\nimport LayerRenderer from 'ol/renderer/Layer';\nimport VectorLayer from 'ol/layer/Vector';\nimport Geometry from 'ol/geom/Geometry';\nimport { Vector as VectorSource } from 'ol/source';\nimport Point from 'ol/geom/Point';\nimport Delaunator from 'delaunator';\nimport { Shader, Framebuffer, Program, Uniform, Texture, renderLoop, Attribute } from '../../webgl/engine.core';\nimport { rectangleA } from '../../webgl/engine.shapes';\nimport { flattenRecursive } from '../../webgl/utils';\n\n\nexport class WindFieldLayer extends VectorLayer<VectorSource<Geometry>> {\n    constructor(options) {\n        super(options);\n    }\n\n    createRenderer(): ParticleRenderer {\n        return new ParticleRenderer(this);\n    }\n\n    startAnimation(fps: number): void {\n        // @ts-ignore\n        (this.getRenderer() as ParticleRenderer).startAnimation(fps);\n    }\n}\n\n/**\n * This renderer illustrates how WebGL can be used to to pixel-by-pixel calculations\n * that would be too expensive on a CPU but are easily done on a GPU.\n * In our shader we go through every pixel and calculate its new state from\n * its old state and that of it's environment.\n *\n * Note how similar in principle this is to Conway's Game of Life: one pixel's state is determined\n * by its surroundings from the time-step before.\n *\n * This renderer also illustrates another common technique in WebGL: `framebuffer-ping-pong`.\n * This is where the output of one shader is stored on a framebuffer and then passed to a subsequent shader.\n * With this, we can create a multi-step-pipeline, where each shader uses the previous\n * one's output as its own input.\n */\nexport class ParticleRenderer extends LayerRenderer<VectorLayer<VectorSource<Geometry>>> {\n\n\n    readonly canvas: HTMLCanvasElement;\n    readonly gl: WebGLRenderingContext;\n    readonly interpolationShader: Shader;\n    readonly particleShader: Shader;\n    readonly textureMixShader: Shader;\n    readonly interpolFb: Framebuffer;\n    readonly particleFb1: Framebuffer;\n    readonly particleFb2: Framebuffer;\n    private fps = 30;\n\n    constructor(layer: VectorLayer<VectorSource<Geometry>>) {\n        super(layer);\n\n        // setting up canvas\n        const canvas = document.createElement('canvas');\n        canvas.width = 1000;\n        canvas.height = 1000;\n        canvas.style.position = 'absolute';\n\n\n        // preparing data\n        const source = layer.getSource();\n        const features = source.getFeatures() as Feature<Point>[];\n        const aObservation = this.pointsToObservations(features);\n\n        const gl = canvas.getContext('webgl');\n        const rect = rectangleA(2.0, 2.0);\n\n\n\n        // --------- Step 1: interpolating field between data points. ------------------------------------------\n\n        const interpolProgram = new Program(gl, `\n            attribute vec4 a_observation;\n            uniform mat3 u_world2pix;\n            uniform mat3 u_pix2canv;\n            varying vec2 v_value;\n\n            void main() {\n                vec3 pixelPosition = u_world2pix * vec3(a_observation.x, a_observation.y, 1.);\n                vec3 canvasPosition = u_pix2canv * pixelPosition;\n                v_value = (a_observation.zw / 2.0) + 0.5;\n                gl_Position = vec4(canvasPosition.xy, 0.0, 1.0);\n            }\n        `, `\n            precision mediump float;\n            varying vec2 v_value;\n\n            void main() {\n                gl_FragColor = vec4(v_value.xy, 0.0, 1.0);\n            }\n        `);\n\n        const interpolShader = new Shader(interpolProgram, [\n            new Attribute(gl, interpolProgram, 'a_observation', aObservation)\n        ], [\n            new Uniform(gl, interpolProgram, 'u_world2pix', 'mat3', flattenRecursive([\n                [1., 0., 0.],\n                [0., 1., 0.],\n                [0., 0., 1.]\n            ])),\n            new Uniform(gl, interpolProgram, 'u_pix2canv', 'mat3', flattenRecursive([\n                [1. /  (canvas.width / 2),  0.,                        0. ],\n                [0,                        -1. / (canvas.height / 2),  0. ],\n                [-1.,                      1.,                         1. ]\n            ]))\n        ], []);\n\n        const interpolFb = new Framebuffer(gl, canvas.width, canvas.height);\n\n\n\n\n        // ------------------ Step 2: moving particles along force field ------------------------------------\n\n        const particleFb1 = new Framebuffer(gl, canvas.width, canvas.height);\n        const particleFb2 = new Framebuffer(gl, canvas.width, canvas.height);\n\n        const particleProgram = new Program(gl, `\n            attribute vec3 a_vertex;\n            attribute vec2 a_textureCoord;\n            varying vec2 v_textureCoord;\n            void main() {\n                v_textureCoord = a_textureCoord;\n                gl_Position = vec4(a_vertex.xyz, 1.0);\n            }\n        `, `\n        precision mediump float;\n        uniform sampler2D u_forceTexture;\n        uniform sampler2D u_particleTexture;\n        uniform float u_deltaT;\n        varying vec2 v_textureCoord;\n\n        float rand(vec2 co){\n            return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n        }\n\n        void main() {\n            // moving particles\n            vec2 speed = ((texture2D(u_forceTexture, v_textureCoord) - 0.5 ) * 2.0).xy;\n            vec2 samplePoint = v_textureCoord - speed * u_deltaT * 0.1;\n            samplePoint = mod(samplePoint, 1.0);\n            gl_FragColor = texture2D(u_particleTexture, samplePoint);\n\n            // fade out\n            float fadeRate = 0.95;\n            if (gl_FragColor.x != 1.0) {\n                vec4 lastColor = texture2D(u_particleTexture, v_textureCoord);\n                vec4 fadedColor = vec4(lastColor.xyz * fadeRate, 1.0);\n                gl_FragColor = fadedColor;\n            }\n\n            // spawn and die-off\n            float spawnChance = 0.0005;\n            float dieChance = 0.2;\n            float randVal = rand(v_textureCoord * abs(sin(u_deltaT)) * 0.01);\n            if (randVal > (1. - spawnChance)) {  // spawn\n                gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            } if (randVal < dieChance) {   // die off\n                gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n            }\n\n            // no particles outside texture\n            if (texture2D(u_forceTexture, v_textureCoord) == vec4(0.0, 0.0, 0.0, 0.0)) {\n                gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n            }\n        }\n        `);\n\n        const particleShader = new Shader(particleProgram, [\n            new Attribute(gl, particleProgram, 'a_vertex', rect.vertices),\n            new Attribute(gl, particleProgram, 'a_textureCoord', rect.texturePositions)\n        ], [\n            new Uniform(gl, particleProgram, 'u_deltaT', 'float', [0.01])\n        ], [\n            new Texture(gl, particleProgram, 'u_forceTexture', interpolFb.fbo.texture, 0),\n            new Texture(gl, particleProgram, 'u_particleTexture', particleFb1.fbo.texture, 1)\n        ]);\n\n\n\n\n        // ------------------ Step 3: Mixing background-field and particles ------------------------------------\n\n        const textureMixProgram = new Program(gl, `\n            attribute vec3 a_vertex;\n            attribute vec2 a_textureCoord;\n            varying vec2 v_textureCoord;\n            void main() {\n                v_textureCoord = a_textureCoord;\n                gl_Position = vec4(a_vertex.xyz, 1.0);\n            }\n        `, `\n            precision mediump float;\n            uniform sampler2D u_bgTexture;\n            uniform sampler2D u_particleTexture;\n            varying vec2 v_textureCoord;\n            void main() {\n                vec4 bgColor = texture2D(u_bgTexture, v_textureCoord);\n                vec4 particleColor = texture2D(u_particleTexture, v_textureCoord);\n                vec4 colorMix = max(particleColor, bgColor);\n                gl_FragColor = colorMix;\n            }\n        `);\n        const textureMixShader = new Shader(textureMixProgram, [\n            new Attribute(gl, textureMixProgram, 'a_vertex', rect.vertices),\n            new Attribute(gl, textureMixProgram, 'a_textureCoord', rect.texturePositions)\n        ], [], [\n            new Texture(gl, textureMixProgram, 'u_bgTexture', interpolFb.fbo.texture, 0),\n            new Texture(gl, textureMixProgram, 'u_particleTexture', particleFb1.fbo.texture, 1)\n        ]);\n\n\n        // Setup\n        interpolShader.bind(gl);\n        interpolShader.render(gl, [0, 0, 0, 0], interpolFb.fbo);\n        textureMixShader.bind(gl);\n        textureMixShader.render(gl);\n        particleShader.bind(gl);\n\n        // making data available for later\n        this.canvas = canvas;\n        this.gl = gl;\n        this.interpolationShader = interpolShader;\n        this.particleShader = particleShader;\n        this.textureMixShader = textureMixShader;\n        this.interpolFb = interpolFb;\n        this.particleFb1 = particleFb1;\n        this.particleFb2 = particleFb2;\n    }\n\n    /**\n     * We could also have just started the animation right in the constructor.\n     * Instead we created a separate `startAnimation` function so that it can optionally be run outside angular's zone,\n     * preventing it from firing too many change cycles.\n     * We leave this decision to the user, however, because it is not an ol-renderers duty to handle any angular-logic.\n     */\n    startAnimation(fps: number): void {\n        this.fps = fps;\n\n        // Animation loop\n        let i = 0;\n        let fbIn;\n        let fbOut;\n        renderLoop(this.fps, (deltaT: number) => {\n            i += 1;\n\n            // framebuffer ping-pong\n            if (i % 2 === 1) {\n                fbIn = this.particleFb1;\n                fbOut = this.particleFb2;\n            } else {\n                fbIn = this.particleFb2;\n                fbOut = this.particleFb1;\n            }\n\n            // particle shader\n            this.particleShader.textures[1].texture = fbIn.fbo.texture;\n            this.particleShader.updateUniformData(this.gl, 'u_deltaT', [deltaT]);\n            this.particleShader.bind(this.gl);\n            this.particleShader.render(this.gl, null, fbOut.fbo);\n\n            // texture to output\n            this.textureMixShader.textures[1].texture = fbOut.fbo.texture;\n            this.textureMixShader.bind(this.gl);\n            this.textureMixShader.render(this.gl);\n        });\n    }\n\n    stopAnimation(): void {\n        this.fps = 0;\n    }\n\n\n    prepareFrame(frameState: FrameState): boolean {\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const size = frameState.size;\n        const opacity = layerState.opacity;\n        if (size[0] !== this.canvas.width || size[1] !== this.canvas.height) {\n            this.canvas.width = size[0];\n            this.canvas.height = size[1];\n        }\n        this.canvas.style.opacity = `${opacity}`;\n\n        // update world2pix\n        const c2pT = frameState.coordinateToPixelTransform;\n        const worldToPixelTransform = [\n            [c2pT[0],   c2pT[1],    0. ],\n            [c2pT[2],   c2pT[3],    0. ],\n            [c2pT[4],   c2pT[5],    1. ]\n        ];\n        this.interpolationShader.updateUniformData(this.gl, 'u_world2pix', flattenRecursive(worldToPixelTransform));\n\n        // update pix2canvas\n        const pix2canv = [\n            [1. /  (this.canvas.width / 2),  0.,                              0. ],\n            [0,                              -1. / (this.canvas.height / 2),  0. ],\n            [-1.,                            1.,                              1. ]\n        ];\n        this.interpolationShader.updateUniformData(this.gl, 'u_pix2canv', flattenRecursive(pix2canv));\n\n        // bind new data and render\n        this.interpolationShader.bind(this.gl);\n        this.interpolationShader.render(this.gl, [0, 0, 0, 0], this.interpolFb.fbo);\n\n        return true;\n    }\n\n\n    renderFrame(frameState: FrameState, target: HTMLElement): HTMLElement {\n        return this.canvas;\n    }\n\n\n    renderDeclutter(frameState: FrameState) {\n    }\n\n\n    private pointsToObservations(features: Feature<Point>[]): number[][] {\n\n        const pointToObservation = (feature: Feature<Point>): number[] => {\n            const coords = feature.getGeometry().getCoordinates();\n            const props = feature.getProperties();\n            return [coords[0], coords[1], props.wind[0], props.wind[1]];\n        };\n\n        const coordinates = features.map(f => f.getGeometry().getCoordinates());\n        const delauney = Delaunator.from(coordinates);\n        const indices = delauney.triangles;\n        const aObservations = [];\n        for (const i of indices) {\n            const o = pointToObservation(features[i]);\n            aObservations.push(o);\n        }\n\n        return aObservations;\n    }\n}\n","/*\n * Public API Surface of utils-maps\n */\n\nexport * from './lib/ol/utils-ol';\nexport * from './lib/ol/customRenderers/dtm_renderer';\nexport * from './lib/ol/customRenderers/interpolation_renderer';\nexport * from './lib/ol/customRenderers/particle_renderer';\nexport * from './lib/webgl/webgl';\nexport * from './lib/webgl/engine.core';\nexport * from './lib/webgl/engine.helpers';\nexport * from './lib/webgl/engine.shapes';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["olCluster"],"mappings":"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"}