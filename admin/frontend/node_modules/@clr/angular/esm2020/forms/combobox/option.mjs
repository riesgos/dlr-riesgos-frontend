/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { OptionData as OptionProxy } from './providers/combobox-focus-handler.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import * as i0 from "@angular/core";
import * as i1 from "../../utils/i18n/common-strings.service";
import * as i2 from "./providers/combobox-focus-handler.service";
import * as i3 from "./providers/option-selection.service";
import * as i4 from "@angular/common";
export class ClrOption {
    constructor(elRef, commonStrings, focusHandler, optionSelectionService, autoId) {
        this.elRef = elRef;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.optionSelectionService = optionSelectionService;
        this.autoId = autoId;
        // A proxy with only the necessary data to be used for a11y and the focus handler service.
        this.optionProxy = new OptionProxy(null, null);
        this.optionProxy.el = this.elRef.nativeElement;
    }
    set optionId(id) {
        this._id = id;
        this.optionProxy.id = this._id;
    }
    get optionId() {
        return this._id;
    }
    set value(value) {
        this._value = value;
        this.optionProxy.value = value;
    }
    get value() {
        return this._value;
    }
    get selected() {
        return (this.optionSelectionService.selectionModel && this.optionSelectionService.selectionModel.containsItem(this.value));
    }
    ngOnInit() {
        if (!this._id) {
            this._id = 'clr-option-' + this.autoId;
            this.optionProxy.id = this._id;
        }
    }
    onClick() {
        if (this.optionSelectionService.multiselectable) {
            this.optionSelectionService.toggle(this.value);
        }
        else {
            this.optionSelectionService.select(this.value);
        }
        // As the popover stays open in multi-select mode now, we have to take focus back to the input
        // This way we achieve two things:
        // - do not lose focus
        // - we're still able to use onBlur for "outside-click" handling
        this.focusHandler.focusInput();
    }
    get focusClass() {
        return this.focusHandler.pseudoFocus.containsItem(this.optionProxy);
    }
}
ClrOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrOption, deps: [{ token: i0.ElementRef }, { token: i1.ClrCommonStringsService }, { token: i2.ComboboxFocusHandler }, { token: i3.OptionSelectionService }, { token: UNIQUE_ID }], target: i0.ɵɵFactoryTarget.Component });
ClrOption.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ClrOption, selector: "clr-option", inputs: { optionId: ["id", "optionId"], value: ["clrValue", "value"] }, host: { listeners: { "click": "onClick()" }, properties: { "class.clr-combobox-option": "true", "attr.role": "\"option\"", "attr.tabindex": "-1", "attr.id": "optionId", "class.active": "this.selected", "class.clr-focus": "this.focusClass" } }, providers: [UNIQUE_ID_PROVIDER], ngImport: i0, template: `<ng-content></ng-content>
    <span *ngIf="selected" class="clr-sr-only"> {{ commonStrings.keys.comboboxSelected }} </span> `, isInline: true, directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrOption, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-option',
                    template: `<ng-content></ng-content>
    <span *ngIf="selected" class="clr-sr-only"> {{ commonStrings.keys.comboboxSelected }} </span> `,
                    providers: [UNIQUE_ID_PROVIDER],
                    host: {
                        '[class.clr-combobox-option]': 'true',
                        '[attr.role]': '"option"',
                        // Do not remove. Or click-selection will not work.
                        '[attr.tabindex]': '-1',
                        '[attr.id]': 'optionId',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ClrCommonStringsService }, { type: i2.ComboboxFocusHandler }, { type: i3.OptionSelectionService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [UNIQUE_ID]
                }] }]; }, propDecorators: { optionId: [{
                type: Input,
                args: ['id']
            }], value: [{
                type: Input,
                args: ['clrValue']
            }], selected: [{
                type: HostBinding,
                args: ['class.active']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], focusClass: [{
                type: HostBinding,
                args: ['class.clr-focus']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvZm9ybXMvY29tYm9ib3gvb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFjLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUd4RyxPQUFPLEVBQXdCLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM3RyxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0NBQStDLENBQUM7Ozs7OztBQWU5RixNQUFNLE9BQU8sU0FBUztJQStCcEIsWUFDUyxLQUFpQixFQUNqQixhQUFzQyxFQUNyQyxZQUFxQyxFQUNyQyxzQkFBaUQsRUFDOUIsTUFBYztRQUpsQyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2pCLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtRQUNyQyxpQkFBWSxHQUFaLFlBQVksQ0FBeUI7UUFDckMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEyQjtRQUM5QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBbkMzQywwRkFBMEY7UUFDbkYsZ0JBQVcsR0FBbUIsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBb0MvRCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztJQUNqRCxDQUFDO0lBbENELElBQ0ksUUFBUSxDQUFDLEVBQVU7UUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUdELElBQ0ksS0FBSyxDQUFDLEtBQVE7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQ0ksUUFBUTtRQUNWLE9BQU8sQ0FDTCxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEgsQ0FBQztJQUNKLENBQUM7SUFZRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLENBQUMsR0FBRyxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBR0QsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLGVBQWUsRUFBRTtZQUMvQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRDthQUFNO1lBQ0wsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEQ7UUFDRCw4RkFBOEY7UUFDOUYsa0NBQWtDO1FBQ2xDLHNCQUFzQjtRQUN0QixnRUFBZ0U7UUFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFDSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7O3NHQWpFVSxTQUFTLDZKQW9DVixTQUFTOzBGQXBDUixTQUFTLGlXQVRULENBQUMsa0JBQWtCLENBQUMsMEJBRnJCO21HQUN1RjsyRkFVdEYsU0FBUztrQkFickIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFO21HQUN1RjtvQkFDakcsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQy9CLElBQUksRUFBRTt3QkFDSiw2QkFBNkIsRUFBRSxNQUFNO3dCQUNyQyxhQUFhLEVBQUUsVUFBVTt3QkFDekIsbURBQW1EO3dCQUNuRCxpQkFBaUIsRUFBRSxJQUFJO3dCQUN2QixXQUFXLEVBQUUsVUFBVTtxQkFDeEI7aUJBQ0Y7OzBCQXFDSSxNQUFNOzJCQUFDLFNBQVM7NENBOUJmLFFBQVE7c0JBRFgsS0FBSzt1QkFBQyxJQUFJO2dCQVdQLEtBQUs7c0JBRFIsS0FBSzt1QkFBQyxVQUFVO2dCQVViLFFBQVE7c0JBRFgsV0FBVzt1QkFBQyxjQUFjO2dCQXlCM0IsT0FBTztzQkFETixZQUFZO3VCQUFDLE9BQU87Z0JBZWpCLFVBQVU7c0JBRGIsV0FBVzt1QkFBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9wdGlvblNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9vcHRpb24tc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tYm9ib3hGb2N1c0hhbmRsZXIsIE9wdGlvbkRhdGEgYXMgT3B0aW9uUHJveHkgfSBmcm9tICcuL3Byb3ZpZGVycy9jb21ib2JveC1mb2N1cy1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVU5JUVVFX0lELCBVTklRVUVfSURfUFJPVklERVIgfSBmcm9tICcuLi8uLi91dGlscy9pZC1nZW5lcmF0b3IvaWQtZ2VuZXJhdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLW9wdGlvbicsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDxzcGFuICpuZ0lmPVwic2VsZWN0ZWRcIiBjbGFzcz1cImNsci1zci1vbmx5XCI+IHt7IGNvbW1vblN0cmluZ3Mua2V5cy5jb21ib2JveFNlbGVjdGVkIH19IDwvc3Bhbj4gYCxcbiAgcHJvdmlkZXJzOiBbVU5JUVVFX0lEX1BST1ZJREVSXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuY2xyLWNvbWJvYm94LW9wdGlvbl0nOiAndHJ1ZScsXG4gICAgJ1thdHRyLnJvbGVdJzogJ1wib3B0aW9uXCInLFxuICAgIC8vIERvIG5vdCByZW1vdmUuIE9yIGNsaWNrLXNlbGVjdGlvbiB3aWxsIG5vdCB3b3JrLlxuICAgICdbYXR0ci50YWJpbmRleF0nOiAnLTEnLFxuICAgICdbYXR0ci5pZF0nOiAnb3B0aW9uSWQnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJPcHRpb248VD4gaW1wbGVtZW50cyBPbkluaXQge1xuICAvLyBBIHByb3h5IHdpdGggb25seSB0aGUgbmVjZXNzYXJ5IGRhdGEgdG8gYmUgdXNlZCBmb3IgYTExeSBhbmQgdGhlIGZvY3VzIGhhbmRsZXIgc2VydmljZS5cbiAgcHVibGljIG9wdGlvblByb3h5OiBPcHRpb25Qcm94eTxUPiA9IG5ldyBPcHRpb25Qcm94eShudWxsLCBudWxsKTtcblxuICBwcml2YXRlIF9pZDogc3RyaW5nO1xuICBASW5wdXQoJ2lkJylcbiAgc2V0IG9wdGlvbklkKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pZCA9IGlkO1xuICAgIHRoaXMub3B0aW9uUHJveHkuaWQgPSB0aGlzLl9pZDtcbiAgfVxuICBnZXQgb3B0aW9uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgcHJpdmF0ZSBfdmFsdWU6IFQ7XG4gIEBJbnB1dCgnY2xyVmFsdWUnKVxuICBzZXQgdmFsdWUodmFsdWU6IFQpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub3B0aW9uUHJveHkudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBnZXQgdmFsdWUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3RpdmUnKVxuICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMub3B0aW9uU2VsZWN0aW9uU2VydmljZS5zZWxlY3Rpb25Nb2RlbCAmJiB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uTW9kZWwuY29udGFpbnNJdGVtKHRoaXMudmFsdWUpXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbFJlZjogRWxlbWVudFJlZixcbiAgICBwdWJsaWMgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBmb2N1c0hhbmRsZXI6IENvbWJvYm94Rm9jdXNIYW5kbGVyPFQ+LFxuICAgIHByaXZhdGUgb3B0aW9uU2VsZWN0aW9uU2VydmljZTogT3B0aW9uU2VsZWN0aW9uU2VydmljZTxUPixcbiAgICBASW5qZWN0KFVOSVFVRV9JRCkgcHJpdmF0ZSBhdXRvSWQ6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLm9wdGlvblByb3h5LmVsID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLl9pZCkge1xuICAgICAgdGhpcy5faWQgPSAnY2xyLW9wdGlvbi0nICsgdGhpcy5hdXRvSWQ7XG4gICAgICB0aGlzLm9wdGlvblByb3h5LmlkID0gdGhpcy5faWQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2UubXVsdGlzZWxlY3RhYmxlKSB7XG4gICAgICB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2UudG9nZ2xlKHRoaXMudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICAvLyBBcyB0aGUgcG9wb3ZlciBzdGF5cyBvcGVuIGluIG11bHRpLXNlbGVjdCBtb2RlIG5vdywgd2UgaGF2ZSB0byB0YWtlIGZvY3VzIGJhY2sgdG8gdGhlIGlucHV0XG4gICAgLy8gVGhpcyB3YXkgd2UgYWNoaWV2ZSB0d28gdGhpbmdzOlxuICAgIC8vIC0gZG8gbm90IGxvc2UgZm9jdXNcbiAgICAvLyAtIHdlJ3JlIHN0aWxsIGFibGUgdG8gdXNlIG9uQmx1ciBmb3IgXCJvdXRzaWRlLWNsaWNrXCIgaGFuZGxpbmdcbiAgICB0aGlzLmZvY3VzSGFuZGxlci5mb2N1c0lucHV0KCk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNsci1mb2N1cycpXG4gIGdldCBmb2N1c0NsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLmZvY3VzSGFuZGxlci5wc2V1ZG9Gb2N1cy5jb250YWluc0l0ZW0odGhpcy5vcHRpb25Qcm94eSk7XG4gIH1cbn1cbiJdfQ==