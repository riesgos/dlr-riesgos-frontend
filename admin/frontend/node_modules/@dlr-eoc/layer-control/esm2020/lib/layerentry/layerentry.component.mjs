import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
// imports only for typings...
import { Layer, WmsLayer, WmtsLayer } from '@dlr-eoc/services-layers';
import * as i0 from "@angular/core";
import * as i1 from "@dlr-eoc/core-ui";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class LayerentryComponent {
    constructor() {
        this.expandable = true;
        this.update = new EventEmitter();
        this.canZoomToLayer = false;
        this.activeTabs = {
            settings: false,
            legend: true,
            description: false,
            changeStyle: false
        };
    }
    get visible() { return this.layer.visible; }
    get cssClass() { return this.layer.cssClass; }
    ;
    set expanded(value) {
        if (this.layer) {
            this.layer.expanded = value;
        }
    }
    get expanded() {
        if (this.layer) {
            return this.layer.expanded;
        }
        else {
            return false;
        }
    }
    /**
     * obj: {any| IDynamicComponent}
     */
    checkIsComponentItem(layer, compProp) {
        // https://stackoverflow.com/a/65347533/10850021
        const obj = layer[compProp];
        let isComp = false;
        if (obj && typeof obj === 'object') {
            if ('component' in obj) {
                if (!obj.inputs) {
                    // https://2ality.com/2014/01/object-assign.html#2.3
                    const layerClone = Object.assign({ __proto__: this.layer['__proto__'] }, layer);
                    console.log(layerClone);
                    if (layerClone && layerClone[compProp]) {
                        delete layerClone[compProp];
                    }
                    obj.inputs = { layer: layerClone };
                }
                else if (obj.inputs && !obj.inputs.layer) {
                    // https://2ality.com/2014/01/object-assign.html#2.3
                    const layerClone = Object.assign({ __proto__: this.layer['__proto__'] }, layer);
                    console.log(layerClone);
                    if (layerClone && layerClone[compProp]) {
                        delete layerClone[compProp];
                    }
                    obj.inputs = Object.assign({ layer: layerClone }, obj.inputs);
                }
                isComp = true;
            }
        }
        return isComp;
    }
    getLayerName(layer) {
        if (layer.displayName) {
            return layer.displayName;
        }
        else {
            return layer.name;
        }
    }
    ngOnInit() {
        if (!this.layersSvc) {
            console.error('you need to provide a layersService!');
        }
        // console.log(this.layer)
        if (!this.layer.legendImg) {
            this.activeTabs.description = true;
            this.activeTabs.legend = false;
            this.activeTabs.settings = false;
            this.activeTabs.changeStyle = false;
        }
        if (!this.layer.legendImg && !this.layer.description) {
            this.activeTabs.description = false;
            this.activeTabs.legend = false;
            this.activeTabs.settings = true;
        }
        if (this.layer.bbox && this.layer.bbox.length >= 4) {
            this.canZoomToLayer = true;
        }
    }
    /**
     * show or hide the layer
     */
    setLayerVisibility(selectedLayer, group) {
        if (!group) {
            if (selectedLayer.filtertype === 'Baselayers') {
                selectedLayer.visible = !selectedLayer.visible;
                const filterdlayers = this.layerGroups.filter((l) => l.filtertype === 'Baselayers');
                // console.log(filterdlayers);
                for (const layer of filterdlayers) {
                    if (layer instanceof Layer && layer.id !== selectedLayer.id) {
                        layer.visible = !selectedLayer.visible;
                        this.layersSvc.updateLayer(layer, layer.filtertype || 'Baselayers');
                    }
                }
            }
            else {
                selectedLayer.visible = !selectedLayer.visible;
                this.layersSvc.updateLayer(selectedLayer, selectedLayer.filtertype || 'Layers'); // TODO check for baselayers!!!!!!
            }
        }
        else {
            if (group.layers.length > 0) {
                /** "radio" for Baselayers */
                if (group.filtertype === 'Baselayers') {
                    for (const layer of group.layers) {
                        layer.visible = layer === selectedLayer;
                    }
                    this.update.emit({
                        layer: this.layer
                    });
                    /** "checkbox" for all other layers */
                }
                else {
                    const tempGroupVisible = group.visible;
                    /** change visibility of the selected layer */
                    selectedLayer.visible = !selectedLayer.visible;
                    /** check if group visibility has changed */
                    if (tempGroupVisible !== group.visible) {
                        this.update.emit({
                            layer: this.layer
                        });
                    }
                    else {
                        /** If the visibility of the group don't changes update only the layer  */
                        this.layersSvc.updateLayer(selectedLayer, selectedLayer.filtertype || 'Layers');
                    }
                }
            }
        }
    }
    /**
     * setLayerIndex
     */
    setLayerIndex(layer, dir, group) {
        // console.log('is First', this.isFirst(layer));
        // console.log('is Last', this.isLast(layer));
        // console.log(layer, group);
        if (group) {
            this.layersSvc.setLayerIndexInGroup(layer, dir, group);
        }
        else {
            this.layersSvc.setGroupLayerIndex(layer, dir);
        }
    }
    /**
     * remove the Layer if possible
     */
    removeLayer(group, selectedLayer) {
        // console.log("delete ", group, selectedLayer)
        if (group) {
            // console.log("delete layer from group")
            this.layersSvc.removeLayerFromGroup(selectedLayer, group);
        }
        else {
            // console.log('delete single layer');
            this.layersSvc.removeLayer(selectedLayer, selectedLayer.filtertype);
        }
    }
    zoomTo(layer) {
        if (this.mapState && layer.bbox && layer.bbox.length >= 4) {
            this.mapState.setExtent(layer.bbox);
        }
    }
    setLayerOpacity(layer) {
        if (!this.group) {
            this.layersSvc.updateLayer(layer, layer.filtertype || 'Layers'); // TODO check for baselayers!!!!!!
        }
        else {
            this.update.emit({
                layer
            });
        }
    }
    checkBaselayer(layer, group) {
        if (layer.filtertype === 'Baselayers' || group && group.filtertype === 'Baselayers') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * is expandable if layer has legend, description or opacity can be changed
     */
    is_expandable() {
        if (this.group) {
            return !this.layer.legendImg && this.group.filtertype === 'Baselayers';
        }
        else {
            return false; // !this.layer.legendImg; //this.layer.description
        }
    }
    showProperties() {
        if (!this.is_expandable()) {
            this.expanded = !this.expanded;
        }
    }
    switchTab(tabName) {
        for (const key of Object.keys(this.activeTabs)) {
            this.activeTabs[key] = tabName === key;
        }
    }
    isSelectedStyle(styleName) {
        if (this.layer instanceof WmsLayer) {
            return this.layer.params.STYLES === styleName;
        }
        else if (this.layer instanceof WmtsLayer) {
            return this.layer.params.style === styleName;
        }
        else {
            // TODO: how to compare styles for vector layers and custom layers?
            return false;
        }
    }
    executeChangeStyle(evt) {
        const newStyleName = evt.target.value;
        if (this.layer.styles) {
            const newStyle = this.layer.styles.find(s => s.name === newStyleName);
            if (newStyle) {
                this.layer.legendImg = newStyle.legendURL;
                if (this.layer instanceof WmsLayer) {
                    this.layer.params.STYLES = newStyle.name;
                }
                else if (this.layer instanceof WmtsLayer) {
                    this.layer.params.style = newStyle.name;
                }
                this.layersSvc.updateLayer(this.layer, this.layer.filtertype);
            }
        }
    }
    isFirst(layer) {
        if (this.group) {
            return this.layersSvc.isGroupFirst(layer, this.group.layers);
        }
        else {
            return this.layersSvc.isGroupFirst(layer, null, layer.filtertype);
        }
    }
    isLast(layer) {
        if (this.group) {
            return this.layersSvc.isGroupLast(layer, this.group.layers);
        }
        else {
            return this.layersSvc.isGroupLast(layer, null, layer.filtertype);
        }
    }
    getExpandShape() {
        // return this.openProperties ? 'down' : 'right';
        return this.expanded ? { transform: 'rotate(180deg)' } : { transform: 'rotate(90deg)' };
    }
}
LayerentryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayerentryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LayerentryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: LayerentryComponent, selector: "ukis-layerentry", inputs: { layersSvc: "layersSvc", mapState: "mapState", layer: "layer", group: "group", layerGroups: "layerGroups", expanded: "expanded", expandable: "expandable" }, outputs: { update: "update" }, host: { properties: { "class.layer-visible": "this.visible", "class": "this.cssClass" } }, ngImport: i0, template: "<div class=\"layer\">\n  <div class=\"head\">\n    <!-- layer expand icon -->\n    <clr-icon shape=\"angle\" [ngStyle]=\"getExpandShape()\" class=\"iconButton\" [ngClass]=\"{'disabled': is_expandable()}\"\n      (click)=\"showProperties()\" title=\"Details\"></clr-icon>\n\n    <!-- layer title -->\n    <div #ref class=\"item-title-replacement title\" (click)=\"showProperties()\" [title]=\"getLayerName(layer)\">\n      <ng-content></ng-content>\n    </div>\n    <span *ngIf=\"ref.children.length == 0\" class=\"title\" [title]=\"getLayerName(layer)\" (click)=\"showProperties()\">\n      {{getLayerName(layer)}}\n    </span>\n\n    <!-- setLayerIndex // for reversed layergroups on ngFor up is down -->\n    <span *ngIf=\"!checkBaselayer(layer,group)\">\n      <clr-icon [hidden]=\"layerGroups && layerGroups.length == 1\" class=\"iconButton\" shape=\"arrow\"\n        [ngClass]=\"{'disabled': isLast(layer)}\" (click)=\"setLayerIndex(layer, 'down', group)\" title=\"up\"></clr-icon>\n      <clr-icon [hidden]=\"layerGroups && layerGroups.length == 1\" class=\"iconButton\" shape=\"arrow\"\n        [ngClass]=\"{'disabled': isFirst(layer)}\" (click)=\"setLayerIndex(layer, 'up', group)\" title=\"down\" dir=\"down\">\n      </clr-icon>\n    </span>\n\n    <!-- setLayerVisibility -->\n    <input class=\"hide\" [type]=\"(checkBaselayer(layer,group))?'radio':'checkbox'\" [name]=\"'layer'\" [id]=\"layer.id\"\n      [checked]=\"layer.visible\" (change)=\"setLayerVisibility(layer, group)\">\n    <label [for]=\"layer.id\">\n      <clr-icon *ngIf=\"checkBaselayer(layer,group); else notBaselayer\" class=\"iconButton\"\n        [ngClass]=\"{'is-solid':layer.visible}\" [attr.shape]=\"(layer.visible)?'dot-circle':'circle'\"\n        title=\"{{layer.visible?'Choose another layer':'Show layer'}}\">\n      </clr-icon>\n      <ng-template #notBaselayer>\n        <clr-icon class=\"iconButton\" [ngClass]=\"{'is-solid':layer.visible}\"\n          [attr.shape]=\"(layer.visible)?'eye':'eye-hide'\" title=\"{{layer.visible?'Hide layer':'Show layer'}}\">\n        </clr-icon>\n      </ng-template>\n    </label>\n\n  </div>\n  <div *ngIf=\"expandable && expanded\" class=\"body\">\n    <!-- tools: zoomTo, remove, switch Tab -->\n    <div class=\"tools\">\n      <clr-icon *ngIf=\"!checkBaselayer(layer, group)\" title=\"Layer settings\" shape=\"cog\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['settings']}\" (click)=\"switchTab('settings')\"></clr-icon>\n      <clr-icon *ngIf=\"layer.legendImg\" title=\"Layer Legend\" shape=\"image\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['legend']}\" (click)=\"switchTab('legend')\"></clr-icon>\n      <clr-icon *ngIf=\"layer.description\" title=\"Layer info\" shape=\"info-standard\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['description']}\" (click)=\"switchTab('description')\"></clr-icon>\n      <clr-icon *ngIf=\"layer.styles?.length > 1\" title=\"Change style\" shape=\"cloud-chart\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['changeStyle']}\" (click)=\"switchTab('changeStyle')\"></clr-icon>\n\n      <clr-icon *ngFor=\"let item of layer.actions\" [attr.shape]=\"item.icon\" class=\"iconButton\"\n        (click)=\"item.action(layer)\" [title]=\"item.title\">\n      </clr-icon>\n\n\n      <span></span>\n      <clr-icon *ngIf=\"canZoomToLayer\" shape=\"zoom-in\" class=\"iconButton\" title=\"Zoom to layer\" (click)=\"zoomTo(layer)\">\n      </clr-icon>\n      <clr-icon *ngIf=\"layer.removable\" shape=\"trash\" class=\"iconButton\" (click)=\"removeLayer(group, layer)\"\n        title=\"Remove layer\"></clr-icon>\n    </div>\n    <div class=\"tabsbody\">\n      <div *ngIf=\"activeTabs.settings\" class=\"layersettings\">\n        <!-- setLayerOpacity -->\n        <div class=\"form-group\">\n          <label [for]=\"'layer_transparency_slider_'+layer.id\">Opacity:</label>\n          <input [id]=\"'layer_transparency_slider_'+layer.id\" type=\"range\" class=\"ukis-range-input opacity-input\"\n            name=\"points\" [value]=\"layer.opacity\" [min]=\"0.0\" [max]=\"1.0\" [step]=\"0.1\" (change)=\"setLayerOpacity(layer)\"\n            [(ngModel)]=\"layer.opacity\" />\n          <span>{{\" \"+layer.opacity}}</span>\n        </div>\n        <ng-container *ngIf=\"checkIsComponentItem(layer, 'action');\">\n          <ukis-dynamic-component [(dynamicComponent)]=\"layer.action\">\n          </ukis-dynamic-component>\n        </ng-container>\n      </div>\n      <!-- show Legend -->\n      <div *ngIf=\"activeTabs.legend && layer.legendImg\">\n        <ng-container *ngIf=\"checkIsComponentItem(layer,'legendImg'); else imageUrl\">\n          <ukis-dynamic-component [(dynamicComponent)]=\"layer.legendImg\"></ukis-dynamic-component>\n        </ng-container>\n\n        <ng-template #imageUrl>\n          <a [href]=\"layer.legendImg\" target=\"_blank\" title=\"Show full Image\"><img [src]=\"layer.legendImg\" /></a>\n        </ng-template>\n      </div>\n      <!-- show Description -->\n      <div *ngIf=\"activeTabs.description && layer.description\">\n        <span [innerHTML]=\"layer.description\"></span>\n      </div>\n      <!-- show style-switcher -->\n      <div *ngIf=\"activeTabs.changeStyle && layer.styles && layer.styles?.length > 1\">\n        <select clrSelect (change)=\"executeChangeStyle($event)\">\n          <option *ngFor=\"let style of layer.styles\" [value]=\"style.name\"\n            [attr.selected]=\"isSelectedStyle(style.name) ? true : null\">{{style.title}}</option>\n        </select>\n      </div>\n    </div>\n\n  </div>\n\n</div>\n", styles: [".title{cursor:pointer}.item-title-replacement:empty{display:none}.body{cursor:default}.tabsbody{overflow:hidden;word-break:break-all}.tabsbody img{height:auto;max-width:100%}\n"], components: [{ type: i1.DynamicComponentComponent, selector: "ukis-dynamic-component", inputs: ["dynamicComponent"], outputs: ["dynamicComponentChange"] }], directives: [{ type: i2.ClrIconCustomTag, selector: "clr-icon" }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.ClrLabel, selector: "label", inputs: ["for"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.ClrSelect, selector: "[clrSelect]" }, { type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: LayerentryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-layerentry', template: "<div class=\"layer\">\n  <div class=\"head\">\n    <!-- layer expand icon -->\n    <clr-icon shape=\"angle\" [ngStyle]=\"getExpandShape()\" class=\"iconButton\" [ngClass]=\"{'disabled': is_expandable()}\"\n      (click)=\"showProperties()\" title=\"Details\"></clr-icon>\n\n    <!-- layer title -->\n    <div #ref class=\"item-title-replacement title\" (click)=\"showProperties()\" [title]=\"getLayerName(layer)\">\n      <ng-content></ng-content>\n    </div>\n    <span *ngIf=\"ref.children.length == 0\" class=\"title\" [title]=\"getLayerName(layer)\" (click)=\"showProperties()\">\n      {{getLayerName(layer)}}\n    </span>\n\n    <!-- setLayerIndex // for reversed layergroups on ngFor up is down -->\n    <span *ngIf=\"!checkBaselayer(layer,group)\">\n      <clr-icon [hidden]=\"layerGroups && layerGroups.length == 1\" class=\"iconButton\" shape=\"arrow\"\n        [ngClass]=\"{'disabled': isLast(layer)}\" (click)=\"setLayerIndex(layer, 'down', group)\" title=\"up\"></clr-icon>\n      <clr-icon [hidden]=\"layerGroups && layerGroups.length == 1\" class=\"iconButton\" shape=\"arrow\"\n        [ngClass]=\"{'disabled': isFirst(layer)}\" (click)=\"setLayerIndex(layer, 'up', group)\" title=\"down\" dir=\"down\">\n      </clr-icon>\n    </span>\n\n    <!-- setLayerVisibility -->\n    <input class=\"hide\" [type]=\"(checkBaselayer(layer,group))?'radio':'checkbox'\" [name]=\"'layer'\" [id]=\"layer.id\"\n      [checked]=\"layer.visible\" (change)=\"setLayerVisibility(layer, group)\">\n    <label [for]=\"layer.id\">\n      <clr-icon *ngIf=\"checkBaselayer(layer,group); else notBaselayer\" class=\"iconButton\"\n        [ngClass]=\"{'is-solid':layer.visible}\" [attr.shape]=\"(layer.visible)?'dot-circle':'circle'\"\n        title=\"{{layer.visible?'Choose another layer':'Show layer'}}\">\n      </clr-icon>\n      <ng-template #notBaselayer>\n        <clr-icon class=\"iconButton\" [ngClass]=\"{'is-solid':layer.visible}\"\n          [attr.shape]=\"(layer.visible)?'eye':'eye-hide'\" title=\"{{layer.visible?'Hide layer':'Show layer'}}\">\n        </clr-icon>\n      </ng-template>\n    </label>\n\n  </div>\n  <div *ngIf=\"expandable && expanded\" class=\"body\">\n    <!-- tools: zoomTo, remove, switch Tab -->\n    <div class=\"tools\">\n      <clr-icon *ngIf=\"!checkBaselayer(layer, group)\" title=\"Layer settings\" shape=\"cog\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['settings']}\" (click)=\"switchTab('settings')\"></clr-icon>\n      <clr-icon *ngIf=\"layer.legendImg\" title=\"Layer Legend\" shape=\"image\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['legend']}\" (click)=\"switchTab('legend')\"></clr-icon>\n      <clr-icon *ngIf=\"layer.description\" title=\"Layer info\" shape=\"info-standard\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['description']}\" (click)=\"switchTab('description')\"></clr-icon>\n      <clr-icon *ngIf=\"layer.styles?.length > 1\" title=\"Change style\" shape=\"cloud-chart\" class=\"iconButton\"\n        [ngClass]=\"{'active': activeTabs['changeStyle']}\" (click)=\"switchTab('changeStyle')\"></clr-icon>\n\n      <clr-icon *ngFor=\"let item of layer.actions\" [attr.shape]=\"item.icon\" class=\"iconButton\"\n        (click)=\"item.action(layer)\" [title]=\"item.title\">\n      </clr-icon>\n\n\n      <span></span>\n      <clr-icon *ngIf=\"canZoomToLayer\" shape=\"zoom-in\" class=\"iconButton\" title=\"Zoom to layer\" (click)=\"zoomTo(layer)\">\n      </clr-icon>\n      <clr-icon *ngIf=\"layer.removable\" shape=\"trash\" class=\"iconButton\" (click)=\"removeLayer(group, layer)\"\n        title=\"Remove layer\"></clr-icon>\n    </div>\n    <div class=\"tabsbody\">\n      <div *ngIf=\"activeTabs.settings\" class=\"layersettings\">\n        <!-- setLayerOpacity -->\n        <div class=\"form-group\">\n          <label [for]=\"'layer_transparency_slider_'+layer.id\">Opacity:</label>\n          <input [id]=\"'layer_transparency_slider_'+layer.id\" type=\"range\" class=\"ukis-range-input opacity-input\"\n            name=\"points\" [value]=\"layer.opacity\" [min]=\"0.0\" [max]=\"1.0\" [step]=\"0.1\" (change)=\"setLayerOpacity(layer)\"\n            [(ngModel)]=\"layer.opacity\" />\n          <span>{{\" \"+layer.opacity}}</span>\n        </div>\n        <ng-container *ngIf=\"checkIsComponentItem(layer, 'action');\">\n          <ukis-dynamic-component [(dynamicComponent)]=\"layer.action\">\n          </ukis-dynamic-component>\n        </ng-container>\n      </div>\n      <!-- show Legend -->\n      <div *ngIf=\"activeTabs.legend && layer.legendImg\">\n        <ng-container *ngIf=\"checkIsComponentItem(layer,'legendImg'); else imageUrl\">\n          <ukis-dynamic-component [(dynamicComponent)]=\"layer.legendImg\"></ukis-dynamic-component>\n        </ng-container>\n\n        <ng-template #imageUrl>\n          <a [href]=\"layer.legendImg\" target=\"_blank\" title=\"Show full Image\"><img [src]=\"layer.legendImg\" /></a>\n        </ng-template>\n      </div>\n      <!-- show Description -->\n      <div *ngIf=\"activeTabs.description && layer.description\">\n        <span [innerHTML]=\"layer.description\"></span>\n      </div>\n      <!-- show style-switcher -->\n      <div *ngIf=\"activeTabs.changeStyle && layer.styles && layer.styles?.length > 1\">\n        <select clrSelect (change)=\"executeChangeStyle($event)\">\n          <option *ngFor=\"let style of layer.styles\" [value]=\"style.name\"\n            [attr.selected]=\"isSelectedStyle(style.name) ? true : null\">{{style.title}}</option>\n        </select>\n      </div>\n    </div>\n\n  </div>\n\n</div>\n", styles: [".title{cursor:pointer}.item-title-replacement:empty{display:none}.body{cursor:default}.tabsbody{overflow:hidden;word-break:break-all}.tabsbody img{height:auto;max-width:100%}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { visible: [{
                type: HostBinding,
                args: ['class.layer-visible']
            }], cssClass: [{
                type: HostBinding,
                args: ['class']
            }], layersSvc: [{
                type: Input,
                args: ['layersSvc']
            }], mapState: [{
                type: Input,
                args: ['mapState']
            }], layer: [{
                type: Input,
                args: ['layer']
            }], group: [{
                type: Input,
                args: ['group']
            }], layerGroups: [{
                type: Input,
                args: ['layerGroups']
            }], expanded: [{
                type: Input,
                args: ['expanded']
            }], expandable: [{
                type: Input,
                args: ['expandable']
            }], update: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,