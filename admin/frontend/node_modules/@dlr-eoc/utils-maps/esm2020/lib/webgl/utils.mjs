export const flattenRecursive = (m) => {
    let flat = [];
    for (const row of m) {
        let flattenedRow;
        if (Array.isArray(row[0])) {
            flattenedRow = flattenRecursive(row);
        }
        else {
            flattenedRow = row;
        }
        flat = Array.prototype.concat(flat, flattenedRow);
    }
    return flat;
};
export const createNDimArray = (dimensions) => {
    if (dimensions.length > 0) {
        const dim = dimensions[0];
        const rest = dimensions.slice(1);
        const newArray = new Array(dim);
        for (let i = 0; i < dim; i++) {
            newArray[i] = createNDimArray(rest);
        }
        return newArray;
    }
    else {
        return undefined;
    }
};
export const logN = (val, root) => {
    return Math.log(val) / Math.log(root);
};
export const isPowerOf = (val, root) => {
    return logN(val, root) % 1 === 0;
};
export const nextPowerOf = (val, root) => {
    const exponent = Math.ceil(logN(val, root));
    return Math.pow(2, exponent);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91dGlscy1tYXBzL3NyYy9saWIvd2ViZ2wvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFRLEVBQVksRUFBRTtJQUNuRCxJQUFJLElBQUksR0FBYSxFQUFFLENBQUM7SUFDeEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFDakIsSUFBSSxZQUFZLENBQUM7UUFDakIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZCLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QzthQUFNO1lBQ0gsWUFBWSxHQUFHLEdBQUcsQ0FBQztTQUN0QjtRQUNELElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDckQ7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQUM7QUFHRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxVQUFvQixFQUFFLEVBQUU7SUFDcEQsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkM7UUFDRCxPQUFPLFFBQVEsQ0FBQztLQUNsQjtTQUFNO1FBQ0osT0FBTyxTQUFTLENBQUM7S0FDbkI7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFVLEVBQUU7SUFDdEQsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBVyxFQUFFLElBQVksRUFBVyxFQUFFO0lBQzVELE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQVUsRUFBRTtJQUM3RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmbGF0dGVuUmVjdXJzaXZlID0gKG06IGFueVtdKTogbnVtYmVyW10gPT4ge1xuICAgIGxldCBmbGF0OiBudW1iZXJbXSA9IFtdO1xuICAgIGZvciAoY29uc3Qgcm93IG9mIG0pIHtcbiAgICAgICAgbGV0IGZsYXR0ZW5lZFJvdztcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocm93WzBdKSkge1xuICAgICAgICAgICAgZmxhdHRlbmVkUm93ID0gZmxhdHRlblJlY3Vyc2l2ZShyb3cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmxhdHRlbmVkUm93ID0gcm93O1xuICAgICAgICB9XG4gICAgICAgIGZsYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KGZsYXQsIGZsYXR0ZW5lZFJvdyk7XG4gICAgfVxuICAgIHJldHVybiBmbGF0O1xufTtcblxuXG5leHBvcnQgY29uc3QgY3JlYXRlTkRpbUFycmF5ID0gKGRpbWVuc2lvbnM6IG51bWJlcltdKSA9PiB7XG4gICAgaWYgKGRpbWVuc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBkaW0gPSBkaW1lbnNpb25zWzBdO1xuICAgICAgICBjb25zdCByZXN0ID0gZGltZW5zaW9ucy5zbGljZSgxKTtcbiAgICAgICAgY29uc3QgbmV3QXJyYXkgPSBuZXcgQXJyYXkoZGltKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaW07IGkrKykge1xuICAgICAgICAgICAgbmV3QXJyYXlbaV0gPSBjcmVhdGVORGltQXJyYXkocmVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0FycmF5O1xuICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nTiA9ICh2YWw6IG51bWJlciwgcm9vdDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gTWF0aC5sb2codmFsKSAvIE1hdGgubG9nKHJvb3QpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUG93ZXJPZiA9ICh2YWw6IG51bWJlciwgcm9vdDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIGxvZ04odmFsLCByb290KSAlIDEgPT09IDA7XG59O1xuXG5leHBvcnQgY29uc3QgbmV4dFBvd2VyT2YgPSAodmFsOiBudW1iZXIsIHJvb3Q6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgY29uc3QgZXhwb25lbnQgPSBNYXRoLmNlaWwobG9nTih2YWwsIHJvb3QpKTtcbiAgICByZXR1cm4gTWF0aC5wb3coMiwgZXhwb25lbnQpO1xufTsiXX0=