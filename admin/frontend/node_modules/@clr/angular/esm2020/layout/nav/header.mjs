/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component } from '@angular/core';
import { ResponsiveNavCodes } from './responsive-nav-codes';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./providers/responsive-navigation.service";
import * as i2 from "../../utils/i18n/common-strings.service";
import * as i3 from "@angular/common";
export class ClrHeader {
    constructor(responsiveNavService, commonStrings) {
        this.responsiveNavService = responsiveNavService;
        this.commonStrings = commonStrings;
        this.isNavLevel1OnPage = false;
        this.isNavLevel2OnPage = false;
        this.openNavLevel = null;
        this.responsiveNavCodes = ResponsiveNavCodes;
        this._subscription = this.responsiveNavService.registeredNavs.subscribe({
            next: (navLevelList) => {
                this.initializeNavTriggers(navLevelList);
            },
        });
        this._subscription.add(this.responsiveNavService.navControl
            .pipe(filter(({ controlCode }) => controlCode === ResponsiveNavCodes.NAV_CLOSE || controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL))
            .subscribe(() => {
            this.openNavLevel = null;
        }));
    }
    get responsiveNavCommonString() {
        const myCommonStrings = this.commonStrings.keys;
        if (this.openNavLevel !== this.responsiveNavCodes.NAV_LEVEL_1) {
            return myCommonStrings.responsiveNavToggleOpen;
        }
        else {
            return myCommonStrings.responsiveNavToggleClose;
        }
    }
    get responsiveOverflowCommonString() {
        const myCommonStrings = this.commonStrings.keys;
        if (this.openNavLevel !== this.responsiveNavCodes.NAV_LEVEL_2) {
            return myCommonStrings.responsiveNavOverflowOpen;
        }
        else {
            return myCommonStrings.responsiveNavOverflowClose;
        }
    }
    // reset triggers. handles cases when an application has different nav levels on different pages.
    resetNavTriggers() {
        this.isNavLevel1OnPage = false;
        this.isNavLevel2OnPage = false;
    }
    // decides which triggers to show on the header
    initializeNavTriggers(navList) {
        this.resetNavTriggers();
        if (navList.length > 2) {
            console.error('More than 2 Nav Levels detected.');
            return;
        }
        navList.forEach(navLevel => {
            if (navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {
                this.isNavLevel1OnPage = true;
            }
            else if (navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {
                this.isNavLevel2OnPage = true;
            }
        });
    }
    // closes the nav that is open
    closeOpenNav() {
        this.responsiveNavService.closeAllNavs();
    }
    /**
     * @deprecated Will be removed in with @clr/angular v15.0.0
     *
     * Use `openNav(navLevel)` instead to open the navigation and ResponsiveNavService to close it.
     */
    toggleNav(navLevel) {
        if (this.openNavLevel === navLevel) {
            this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, navLevel);
            return;
        }
        this.openNav(navLevel);
    }
    openNav(navLevel) {
        this.openNavLevel = navLevel;
        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, navLevel);
    }
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
}
ClrHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrHeader, deps: [{ token: i1.ResponsiveNavigationService }, { token: i2.ClrCommonStringsService }], target: i0.ɵɵFactoryTarget.Component });
ClrHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ClrHeader, selector: "clr-header", host: { properties: { "class.header": "true" } }, ngImport: i0, template: `
    <button
      type="button"
      *ngIf="isNavLevel1OnPage"
      class="header-hamburger-trigger"
      [attr.aria-label]="responsiveNavCommonString"
      [attr.aria-expanded]="openNavLevel === 1 ? 'true' : 'false'"
      (click)="openNav(responsiveNavCodes.NAV_LEVEL_1)"
    >
      <span></span>
    </button>
    <ng-content></ng-content>
    <button
      type="button"
      *ngIf="isNavLevel2OnPage"
      class="header-overflow-trigger"
      [attr.aria-label]="responsiveOverflowCommonString"
      [attr.aria-expanded]="openNavLevel === 2 ? 'true' : 'false'"
      (click)="openNav(responsiveNavCodes.NAV_LEVEL_2)"
    >
      <span></span>
    </button>
    <div class="header-backdrop" (click)="closeOpenNav()"></div>
  `, isInline: true, directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrHeader, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-header',
                    template: `
    <button
      type="button"
      *ngIf="isNavLevel1OnPage"
      class="header-hamburger-trigger"
      [attr.aria-label]="responsiveNavCommonString"
      [attr.aria-expanded]="openNavLevel === 1 ? 'true' : 'false'"
      (click)="openNav(responsiveNavCodes.NAV_LEVEL_1)"
    >
      <span></span>
    </button>
    <ng-content></ng-content>
    <button
      type="button"
      *ngIf="isNavLevel2OnPage"
      class="header-overflow-trigger"
      [attr.aria-label]="responsiveOverflowCommonString"
      [attr.aria-expanded]="openNavLevel === 2 ? 'true' : 'false'"
      (click)="openNav(responsiveNavCodes.NAV_LEVEL_2)"
    >
      <span></span>
    </button>
    <div class="header-backdrop" (click)="closeOpenNav()"></div>
  `,
                    host: { '[class.header]': 'true' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ResponsiveNavigationService }, { type: i2.ClrCommonStringsService }]; } });
//# sourceMappingURL=data:application/json;base64,