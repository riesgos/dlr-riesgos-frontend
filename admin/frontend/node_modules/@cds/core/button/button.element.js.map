{"version":3,"file":"button.element.js","sources":["../../../src/button/button.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { baseStyles, CdsBaseButton, getElementWidth, property } from '@cds/core/internal';\nimport styles from './button.element.scss';\nexport var ClrLoadingState;\n(function (ClrLoadingState) {\n    ClrLoadingState[\"default\"] = \"default\";\n    ClrLoadingState[\"loading\"] = \"loading\";\n    ClrLoadingState[\"success\"] = \"success\";\n    ClrLoadingState[\"error\"] = \"error\";\n})(ClrLoadingState || (ClrLoadingState = {}));\n/**\n * Buttons allow an application to communicate action and direct user intent.\n *\n * ```typescript\n * import '@cds/core/button/register.js';\n * ```\n *\n * ```html\n * <cds-button>submit</cds-button>\n * ```\n *\n * @element cds-button\n * @slot - Content slot for inside the button\n * @cssprop --background\n * @cssprop --border-color\n * @cssprop --border-radius\n * @cssprop --border-width\n * @cssprop --box-shadow-color\n * @cssprop --color\n * @cssprop --font-family\n * @cssprop --font-size\n * @cssprop --font-weight\n * @cssprop --height\n * @cssprop --letter-spacing\n * @cssprop --min-width\n * @cssprop --padding\n * @cssprop --text-decoration\n * @cssprop --text-transform\n */\nexport class CdsButton extends CdsBaseButton {\n    constructor() {\n        super(...arguments);\n        /**\n         * Define the type of action the button triggers\n         *\n         * - `solid`: buttons direct the userâ€™s attention to the primary action the application is suggesting that the user take.\n         * - `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n         * - `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.\n         */\n        this.action = 'solid';\n        /**\n         * Sets the color of the button to match the following string statuses\n         */\n        this.status = 'primary';\n        /**\n         * Sets the overall height and width of the button based on the following string values:\n         */\n        this.size = 'md';\n        /** Sets if the button should be full width with display block */\n        this.block = false;\n        /**\n         * Changes the button content based on the value passed.\n         * @type {default | loading | success | error}\n         *\n         * - `default`: shows the content of the button\n         * - `loading`: disables the button and shows a spinner inside the button\n         * - `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n         * - `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)\n         */\n        this.loadingState = ClrLoadingState.default;\n        this._disabled = false;\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        if (!this.isDefaultLoadingState(this.loadingState)) {\n            this.disabled = true;\n        }\n    }\n    update(props) {\n        if (props.has('loadingState')) {\n            if (this.isDefaultLoadingState(props.get('loadingState'))) {\n                // track prior disabled state to set prior value after button is re-enabled from a loading state\n                this._disabled = this.disabled;\n            }\n            if (props.get('loadingState') !== undefined) {\n                if (this.isDefaultLoadingState(this.loadingState)) {\n                    this.enableButton();\n                }\n                else {\n                    this.disableButton();\n                }\n            }\n        }\n        super.update(props);\n    }\n    render() {\n        return html `<div class=\"private-host\" cds-layout=\"horizontal gap:xs wrap:none align:center\">\n      ${this.loadingState === ClrLoadingState.success\n            ? html `<cds-icon shape=\"check\" status=\"success\" size=\"18\"></cds-icon>`\n            : ''}\n      ${this.loadingState === ClrLoadingState.error\n            ? html `<cds-icon shape=\"error-standard\" status=\"danger\" size=\"18\"></cds-icon>`\n            : ''}\n      ${this.loadingState === ClrLoadingState.loading\n            ? html `<cds-progress-circle .size=${this.size === 'sm' ? '12' : '18'} status=\"info\"></cds-progress-circle>`\n            : ''}\n      ${this.loadingState === ClrLoadingState.default ? html `<slot></slot>` : ''}\n    </div>`;\n    }\n    isDefaultLoadingState(state) {\n        return state === ClrLoadingState.default;\n    }\n    disableButton() {\n        this.style.width = getElementWidth(this);\n        this.disabled = true;\n    }\n    enableButton() {\n        this.style.removeProperty('width');\n        this.disabled = this._disabled;\n    }\n}\nCdsButton.styles = [baseStyles, styles];\n__decorate([\n    property({ type: String })\n], CdsButton.prototype, \"action\", void 0);\n__decorate([\n    property({ type: String })\n], CdsButton.prototype, \"status\", void 0);\n__decorate([\n    property({ type: String })\n], CdsButton.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsButton.prototype, \"block\", void 0);\n__decorate([\n    property({ type: String })\n], CdsButton.prototype, \"loadingState\", void 0);\n"],"names":["ClrLoadingState","CdsButton","CdsBaseButton","constructor","super","this","action","status","size","block","loadingState","default","_disabled","firstUpdated","props","isDefaultLoadingState","disabled","update","has","get","undefined","enableButton","disableButton","render","html","success","error","loading","state","style","width","getElementWidth","removeProperty","styles","baseStyles","__decorate","property","type","String","prototype","Boolean"],"mappings":"4MASU,IAACA,GACX,SAAWA,GACPA,EAAyB,QAAI,UAC7BA,EAAyB,QAAI,UAC7BA,EAAyB,QAAI,UAC7BA,EAAuB,MAAI,QAJ/B,CAKGA,IAAoBA,EAAkB,KA8BlC,MAAMC,UAAkBC,EAC3BC,cACIC,oBAQAC,KAAKC,OAAS,QAIdD,KAAKE,OAAS,UAIdF,KAAKG,KAAO,KAEZH,KAAKI,OAAQ,EAUbJ,KAAKK,aAAeV,EAAgBW,QACpCN,KAAKO,WAAY,EAErBC,aAAaC,GACTV,MAAMS,aAAaC,GACdT,KAAKU,sBAAsBV,KAAKK,gBACjCL,KAAKW,UAAW,GAGxBC,OAAOH,GACCA,EAAMI,IAAI,kBACNb,KAAKU,sBAAsBD,EAAMK,IAAI,mBAErCd,KAAKO,UAAYP,KAAKW,eAEQI,IAA9BN,EAAMK,IAAI,kBACNd,KAAKU,sBAAsBV,KAAKK,cAChCL,KAAKgB,eAGLhB,KAAKiB,kBAIjBlB,MAAMa,OAAOH,GAEjBS,SACI,OAAOC,CAAK,mFACZnB,KAAKK,eAAiBV,EAAgByB,QAChCD,CAAK,iEACL,MACNnB,KAAKK,eAAiBV,EAAgB0B,MAChCF,CAAK,yEACL,MACNnB,KAAKK,eAAiBV,EAAgB2B,QAChCH,CAAK,+BAA4C,OAAdnB,KAAKG,KAAgB,KAAO,6CAC/D,MACNH,KAAKK,eAAiBV,EAAgBW,QAAUa,CAAK,gBAAkB,WAG3ET,sBAAsBa,GAClB,OAAOA,IAAU5B,EAAgBW,QAErCW,gBACIjB,KAAKwB,MAAMC,MAAQC,EAAgB1B,MACnCA,KAAKW,UAAW,EAEpBK,eACIhB,KAAKwB,MAAMG,eAAe,SAC1B3B,KAAKW,SAAWX,KAAKO,WAG7BX,EAAUgC,OAAS,CAACC,EAAYD,GAChCE,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClBrC,EAAUsC,UAAW,cAAU,GAClCJ,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClBrC,EAAUsC,UAAW,cAAU,GAClCJ,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClBrC,EAAUsC,UAAW,YAAQ,GAChCJ,EAAW,CACPC,EAAS,CAAEC,KAAMG,WAClBvC,EAAUsC,UAAW,aAAS,GACjCJ,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClBrC,EAAUsC,UAAW,oBAAgB"}