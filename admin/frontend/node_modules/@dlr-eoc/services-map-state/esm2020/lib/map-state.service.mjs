import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MapState } from './types/map-state';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
const initialState = new MapState(0, { lat: 0, lon: 0 });
export class MapStateService {
    constructor() {
        this.mapState = new BehaviorSubject(initialState);
        this.lastAction = new BehaviorSubject(null);
    }
    getMapState() {
        return this.mapState;
    }
    setMapState(state) {
        if (!state) {
            return;
        }
        this.lastAction.next('setState');
        if (state instanceof MapState) {
            const newState = new MapState(state.zoom, state.center, state.options, state.extent);
            this.mapState.next(newState);
        }
        else {
            const stateOptions = { ...{ notifier: 'user' }, ...state.options };
            const newState = new MapState(state.zoom, state.center, stateOptions, state.extent);
            this.mapState.next(newState);
        }
    }
    getExtent() {
        return this.mapState.pipe(map((state) => state.extent));
    }
    setExtent(extent, notifier = 'user') {
        if (!extent) {
            return;
        }
        this.lastAction.next('setExtent');
        const state = this.getMapState().getValue();
        state.options.notifier = notifier;
        const newState = new MapState(state.zoom, state.center, state.options, extent);
        this.mapState.next(newState);
    }
    getLastAction() {
        return this.lastAction;
    }
}
MapStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MapStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zZXJ2aWNlcy1tYXAtc3RhdGUvc3JjL2xpYi9tYXAtc3RhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBK0IsTUFBTSxtQkFBbUIsQ0FBQztBQUUxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXJDLE1BQU0sWUFBWSxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFJekQsTUFBTSxPQUFPLGVBQWU7SUFHMUI7UUFGUSxhQUFRLEdBQUcsSUFBSSxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDNUMsZUFBVSxHQUFHLElBQUksZUFBZSxDQUEyQixJQUFJLENBQUMsQ0FBQztJQUV6RSxDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUEyQjtRQUM1QyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakMsSUFBSSxLQUFLLFlBQVksUUFBUSxFQUFFO1lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjthQUFNO1lBQ0wsTUFBTSxZQUFZLEdBQXFCLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyRixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFTSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTSxTQUFTLENBQUMsTUFBa0IsRUFBRSxXQUE2QyxNQUFNO1FBQ3RGLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFHTSxhQUFhO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDOzs0R0EzQ1UsZUFBZTtnSEFBZixlQUFlLGNBRmQsTUFBTTsyRkFFUCxlQUFlO2tCQUgzQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWFwU3RhdGUsIElNYXBTdGF0ZU9wdGlvbnMsIElNYXBTdGF0ZSB9IGZyb20gJy4vdHlwZXMvbWFwLXN0YXRlJztcbmltcG9ydCB7IFRHZW9FeHRlbnQgfSBmcm9tICdAZGxyLWVvYy9zZXJ2aWNlcy1sYXllcnMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSBuZXcgTWFwU3RhdGUoMCwgeyBsYXQ6IDAsIGxvbjogMCB9KTtcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1hcFN0YXRlU2VydmljZSB7XG4gIHByaXZhdGUgbWFwU3RhdGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGluaXRpYWxTdGF0ZSlcbiAgcHJpdmF0ZSBsYXN0QWN0aW9uID0gbmV3IEJlaGF2aW9yU3ViamVjdDwnc2V0RXh0ZW50JyB8ICdzZXRTdGF0ZSc+KG51bGwpO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXBTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBTdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRNYXBTdGF0ZShzdGF0ZTogTWFwU3RhdGUgfCBJTWFwU3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubGFzdEFjdGlvbi5uZXh0KCdzZXRTdGF0ZScpO1xuICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIE1hcFN0YXRlKSB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IG5ldyBNYXBTdGF0ZShzdGF0ZS56b29tLCBzdGF0ZS5jZW50ZXIsIHN0YXRlLm9wdGlvbnMsIHN0YXRlLmV4dGVudCk7XG4gICAgICB0aGlzLm1hcFN0YXRlLm5leHQobmV3U3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdGF0ZU9wdGlvbnM6IElNYXBTdGF0ZU9wdGlvbnMgPSB7IC4uLnsgbm90aWZpZXI6ICd1c2VyJyB9LCAuLi5zdGF0ZS5vcHRpb25zIH07XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IG5ldyBNYXBTdGF0ZShzdGF0ZS56b29tLCBzdGF0ZS5jZW50ZXIsIHN0YXRlT3B0aW9ucywgc3RhdGUuZXh0ZW50KTtcbiAgICAgIHRoaXMubWFwU3RhdGUubmV4dChuZXdTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldEV4dGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBTdGF0ZS5waXBlKG1hcCgoc3RhdGUpID0+IHN0YXRlLmV4dGVudCkpO1xuICB9XG5cbiAgcHVibGljIHNldEV4dGVudChleHRlbnQ6IFRHZW9FeHRlbnQsIG5vdGlmaWVyOiBJTWFwU3RhdGVbJ29wdGlvbnMnXVsnbm90aWZpZXInXSA9ICd1c2VyJykge1xuICAgIGlmICghZXh0ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubGFzdEFjdGlvbi5uZXh0KCdzZXRFeHRlbnQnKTtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0TWFwU3RhdGUoKS5nZXRWYWx1ZSgpO1xuICAgIHN0YXRlLm9wdGlvbnMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IG5ldyBNYXBTdGF0ZShzdGF0ZS56b29tLCBzdGF0ZS5jZW50ZXIsIHN0YXRlLm9wdGlvbnMsIGV4dGVudCk7XG4gICAgdGhpcy5tYXBTdGF0ZS5uZXh0KG5ld1N0YXRlKTtcbiAgfVxuXG5cbiAgcHVibGljIGdldExhc3RBY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubGFzdEFjdGlvbjtcbiAgfVxufVxuIl19