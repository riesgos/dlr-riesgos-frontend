import * as i0 from '@angular/core';
import { Injectable, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

class MapState {
    constructor(zoom, center, options, extent = [-180.0, -90.0, 180.0, 90.0], time = new Date().toISOString()) {
        const defaultOptions = {
            maxzoom: 0,
            minzoom: 0,
            notifier: 'map'
        };
        this.zoom = zoom;
        this.center = center;
        this.extent = extent;
        this.time = time;
        this.options = Object.assign(defaultOptions, options);
    }
    sameCenter(center) {
        if (this.center.lat === center.lat && this.center.lon === center.lon) {
            return true;
        }
        else {
            return false;
        }
    }
    sameZoom(zoom) {
        if (this.zoom === zoom) {
            return true;
        }
        else {
            return false;
        }
    }
    sameExtent(extent) {
        const len = extent.length;
        let isSame = false;
        if (this.extent.length === len) {
            isSame = this.extent.every((v, i) => extent[i] === v);
        }
        return isSame;
    }
    sameNotifier(notifier) {
        if (this.options.notifier === notifier) {
            return true;
        }
        else {
            return false;
        }
    }
}

const initialState = new MapState(0, { lat: 0, lon: 0 });
class MapStateService {
    constructor() {
        this.mapState = new BehaviorSubject(initialState);
        this.lastAction = new BehaviorSubject(null);
    }
    getMapState() {
        return this.mapState;
    }
    setMapState(state) {
        if (!state) {
            return;
        }
        this.lastAction.next('setState');
        if (state instanceof MapState) {
            const newState = new MapState(state.zoom, state.center, state.options, state.extent);
            this.mapState.next(newState);
        }
        else {
            const stateOptions = Object.assign({ notifier: 'user' }, state.options);
            const newState = new MapState(state.zoom, state.center, stateOptions, state.extent);
            this.mapState.next(newState);
        }
    }
    getExtent() {
        return this.mapState.pipe(map((state) => state.extent));
    }
    setExtent(extent, notifier = 'user') {
        if (!extent) {
            return;
        }
        this.lastAction.next('setExtent');
        const state = this.getMapState().getValue();
        state.options.notifier = notifier;
        const newState = new MapState(state.zoom, state.center, state.options, extent);
        this.mapState.next(newState);
    }
    getLastAction() {
        return this.lastAction;
    }
}
MapStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MapStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class MapStateModule {
}
MapStateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MapStateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateModule });
MapStateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateModule, providers: [MapStateService], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapStateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [MapStateService]
                }]
        }] });

/*
 * Public API Surface of services-map-state
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MapState, MapStateModule, MapStateService };
//# sourceMappingURL=dlr-eoc-services-map-state.mjs.map
