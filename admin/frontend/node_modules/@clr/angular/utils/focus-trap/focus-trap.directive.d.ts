import { AfterViewInit, ElementRef, Injector, OnDestroy, Renderer2, OnInit } from '@angular/core';
import { FocusTrapTracker } from './focus-trap-tracker.service';
import { FocusTrapConfig } from './focus-trap-config.interface';
import * as i0 from "@angular/core";
export declare const FOCUSABLES = "[href]:not([tabindex=\"-1\"]), button:not([disabled]):not([tabindex=\"-1\"]), input:not([disabled]):not([tabindex=\"-1\"]), select:not([disabled]):not([tabindex=\"-1\"]), textarea:not([disabled]):not([tabindex=\"-1\"]), [contenteditable=\"true\"]:not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"]) ";
export declare class FocusTrapDirective implements OnInit, AfterViewInit, OnDestroy {
    private el;
    private injector;
    private focusTrapsTracker;
    private renderer;
    private platformId;
    private previousActiveElement;
    private localFocusEscaped;
    private document;
    private parentElement;
    private topReboundEl;
    private bottomReboundEl;
    private firstFocusableEl;
    private lastFocusableEl;
    constructor(el: ElementRef, injector: Injector, focusTrapsTracker: FocusTrapTracker, renderer: Renderer2, platformId: any);
    private _config;
    set config(config: FocusTrapConfig | string);
    onFocusIn(event: any): void;
    private createFocusableOffScreenEl;
    private addReboundEls;
    private removeReboundEls;
    setPreviousFocus(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private get potentiallyFocusableEls();
    private focusFirstFocusable;
    private focusLastFocusable;
    private focusTrapElIfOutside;
    private focusElement;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FocusTrapDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FocusTrapDirective, "[clrFocusTrap]", never, { "config": "clrFocusTrap"; }, {}, never>;
}
