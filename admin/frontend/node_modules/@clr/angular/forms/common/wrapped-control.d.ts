import { InjectionToken, Injector, OnInit, Type, ViewContainerRef, Renderer2, ElementRef, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';
import { ControlIdService } from './providers/control-id.service';
import { NgControlService } from './providers/ng-control.service';
import { NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class WrappedFormControl<W extends DynamicWrapper> implements OnInit, OnDestroy {
    protected vcr: ViewContainerRef;
    protected wrapperType: Type<W>;
    private ngControl;
    protected ngControlService: NgControlService;
    private ifControlStateService;
    private controlClassService;
    private markControlService;
    private containerIdService;
    protected renderer: Renderer2;
    protected el: ElementRef<any>;
    protected subscriptions: Subscription[];
    protected index: number;
    protected controlIdService: ControlIdService;
    _id: string;
    constructor(vcr: ViewContainerRef, wrapperType: Type<W>, injector: Injector, ngControl: NgControl, renderer: Renderer2, el: ElementRef);
    get id(): string;
    set id(value: string);
    triggerValidation(): void;
    private markAsTouched;
    private _containerInjector;
    protected getProviderFromContainer<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T): T;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private setAriaDescribedBy;
    private getAriaDescribedById;
    static ɵfac: i0.ɵɵFactoryDeclaration<WrappedFormControl<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<WrappedFormControl<any>, never, never, { "id": "id"; }, {}, never>;
}
