import { NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare enum ClrAriaLivePoliteness {
    off = "off",
    polite = "polite",
    assertive = "assertive"
}
/**
 * @deprecated
 *
 * -- ClrAriaLiveService is deprecated in 5.0 to be removed in 6.0 --
 * Please consider using the LiveAnnouncer in the Angular Material CDK
 * if your project needs this functionality.
 * More info: https://material.angular.io/cdk/a11y/overview#example-1
 *
 * This service handle `aria-live` accessibility attribute. The issue is that you need
 * to have the DOM Element with attribute `aria-live` before you could insert content
 * and SR (Screen Reader) pick the change and announce it.
 *
 * ```typescript
 * import { ClrAriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';
 *
 * @Component({
 * selector: 'clr-demo-component',
 * providers: [ClrAriaLiveService],
 * template: `
 *   <ng-content></ng-content>
 * `,
 * })
 * export class DemoComponent {
 *  constructor(ariaLiveService: ClrAriaLiveService) {}
 *
 *  public actionThatWillTriggerChange() {
 *    this.ariaLiveService.announce('message that I want to announce to SR');
 *  }
 * }
 * ```
 *
 */
export declare class ClrAriaLiveService implements OnDestroy {
    private ngZone;
    private platformId;
    private ariaLiveElement;
    private document;
    private previousTimeout;
    constructor(ngZone: NgZone, _document: any, platformId: any);
    private _id;
    /**
     * get access to the internal HTML `id` that gonna be used for the AriaLive container.
     * @return ID of the DOM Element as string.
     */
    get id(): string;
    /**
     * Append text content inside the AriaLive Container. This method will check if the
     * DOM Element is existing if not it will create one for us and the will apply the text.
     *
     * ```typescript
     * this.ariaLiveService.announce(this.el.nativeElement);
     * // or
     * this.ariaLiveService.announce('Message to announce to SR');
     * ```
     *
     * @remark
     * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.
     * The reason for that is that we don't want to do additional work if the SR will ignore it.
     *
     * @param message - This could be simple string or HTMLElement
     * @param politeness - 'polite', 'assertive' or 'off'
     */
    announce(message: string | HTMLElement, politeness?: ClrAriaLivePoliteness): void;
    /**
     * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive
     * container from the document.
     */
    ngOnDestroy(): void;
    /**
     * Create AriaLive DOM element as a last child of the document.
     * After the element is created, we gonna apply Clarity class to hide it from
     * the screen and set the `aria-live` politness.
     *
     * `clr-sr-only` is the CSS class that is used to hide the element from the screen.
     *
     * @remark
     * Calling this method multiple times will create multiple DOM Elements, that
     * won't be tracked and will be GC after the service is destroyed.
     *
     * @return AriaLive container as HTMLElement
     *
     */
    private createContainer;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClrAriaLiveService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ClrAriaLiveService>;
}
