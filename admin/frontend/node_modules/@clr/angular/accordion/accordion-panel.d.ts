import { EventEmitter, SimpleChanges, OnInit, OnChanges, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { ClrCommonStringsService } from '../utils/i18n/common-strings.service';
import { AccordionService } from './providers/accordion.service';
import { AccordionStatus } from './enums/accordion-status.enum';
import { IfExpandService } from '../utils/conditional/if-expanded.service';
import { AccordionPanelModel } from './models/accordion.model';
import { ClrAccordionDescription } from './accordion-description';
import * as i0 from "@angular/core";
export declare class ClrAccordionPanel implements OnInit, OnChanges {
    commonStrings: ClrCommonStringsService;
    private accordionService;
    private ifExpandService;
    private _id;
    disabled: boolean;
    panelOpen: boolean;
    panelOpenChange: EventEmitter<boolean>;
    accordionDescription: QueryList<ClrAccordionDescription>;
    panel: Observable<AccordionPanelModel>;
    readonly AccordionStatus: typeof AccordionStatus;
    isAccordion: boolean;
    get id(): string;
    set id(value: string);
    constructor(commonStrings: ClrCommonStringsService, accordionService: AccordionService, ifExpandService: IfExpandService, _id: string);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    togglePanel(): void;
    collapsePanelOnAnimationDone(panel: AccordionPanelModel): void;
    getPanelStateClasses(panel: AccordionPanelModel): string;
    getAccordionContentId(id: string): string;
    getAccordionHeaderId(id: string): string;
    private emitPanelChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClrAccordionPanel, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ClrAccordionPanel, "clr-accordion-panel", never, { "disabled": "clrAccordionPanelDisabled"; "panelOpen": "clrAccordionPanelOpen"; }, { "panelOpenChange": "clrAccordionPanelOpenChange"; }, ["accordionDescription"], ["clr-accordion-title, clr-step-title", "clr-accordion-description, clr-step-description", "*"]>;
}
