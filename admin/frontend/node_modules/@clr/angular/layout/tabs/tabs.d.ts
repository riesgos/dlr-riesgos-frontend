import { AfterContentInit, ElementRef, OnDestroy } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { TabsService } from './providers/tabs.service';
import { ClrTabLink } from './tab-link.directive';
import * as i0 from "@angular/core";
export declare class ClrTabs implements AfterContentInit, OnDestroy {
    ifActiveService: IfActiveService;
    toggleService: ClrPopoverToggleService;
    tabsService: TabsService;
    tabsId: number;
    commonStrings: ClrCommonStringsService;
    private subscriptions;
    private get overflowPosition();
    private set tabContentViewContainer(value);
    set layout(layout: TabsLayout | string);
    get layout(): TabsLayout | string;
    private tabs;
    private _tabLinkDirectives;
    get tabLinkDirectives(): ClrTabLink[];
    tabLinkElements: HTMLElement[];
    keyFocus: ClrKeyFocus;
    constructor(ifActiveService: IfActiveService, toggleService: ClrPopoverToggleService, tabsService: TabsService, tabsId: number, commonStrings: ClrCommonStringsService);
    get activeTabInOverflow(): boolean;
    get activeTabPosition(): number;
    get tabIds(): string;
    get isCurrentInOverflow(): boolean;
    get isVertical(): boolean;
    toggleOverflowOnPosition(position: number): void;
    private _tabOverflowEl;
    set tabOverflowEl(value: ElementRef);
    resetKeyFocusCurrentToActive(event: FocusEvent): void;
    toggleOverflowOnClick(): void;
    _mousedown: boolean;
    openOverflowOnFocus(): void;
    closeOnFocusOut(event: FocusEvent): void;
    closeOnEscapeKey(): void;
    closeOnOutsideClick(event: Event, tabOverflowTrigger: HTMLElement): void;
    private listenForTabLinkChanges;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClrTabs, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ClrTabs, "clr-tabs", never, { "layout": "clrLayout"; }, {}, ["tabs"], never>;
}
