/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Optional, ViewChild, Input } from '@angular/core';
import { startWith } from 'rxjs/operators';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { ControlIdService } from '../common/providers/control-id.service';
import { FocusService } from '../common/providers/focus.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { LocaleHelperService } from './providers/locale-helper.service';
import { ClrPopoverPositions } from '../../utils/popover/enums/positions.enum';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ViewManagerService } from './providers/view-manager.service';
import { IfControlStateService } from '../common/if-control-state/if-control-state.service';
import { ClrAbstractContainer } from '../common/abstract-container';
import * as i0 from "@angular/core";
import * as i1 from "../../utils/popover/providers/popover-toggle.service";
import * as i2 from "./providers/date-navigation.service";
import * as i3 from "./providers/datepicker-enabled.service";
import * as i4 from "./providers/date-form-control.service";
import * as i5 from "./providers/date-io.service";
import * as i6 from "../../utils/i18n/common-strings.service";
import * as i7 from "../common/providers/focus.service";
import * as i8 from "./providers/view-manager.service";
import * as i9 from "../common/providers/control-class.service";
import * as i10 from "../common/providers/layout.service";
import * as i11 from "../common/providers/ng-control.service";
import * as i12 from "../common/if-control-state/if-control-state.service";
import * as i13 from "./datepicker-view-manager";
import * as i14 from "@angular/common";
import * as i15 from "../common/label";
import * as i16 from "../../utils/popover/popover-anchor";
import * as i17 from "../../utils/popover/popover-open-close-button";
import * as i18 from "../../icon/icon";
import * as i19 from "../../utils/popover/popover-content";
import * as i20 from "../../utils/focus-trap/focus-trap.directive";
export class ClrDateContainer extends ClrAbstractContainer {
    constructor(renderer, toggleService, dateNavigationService, datepickerEnabledService, dateFormControlService, dateIOService, commonStrings, focusService, viewManagerService, controlClassService, layoutService, ngControlService, ifControlStateService) {
        super(ifControlStateService, layoutService, controlClassService, ngControlService);
        this.renderer = renderer;
        this.toggleService = toggleService;
        this.dateNavigationService = dateNavigationService;
        this.datepickerEnabledService = datepickerEnabledService;
        this.dateFormControlService = dateFormControlService;
        this.dateIOService = dateIOService;
        this.commonStrings = commonStrings;
        this.focusService = focusService;
        this.viewManagerService = viewManagerService;
        this.controlClassService = controlClassService;
        this.layoutService = layoutService;
        this.ngControlService = ngControlService;
        this.ifControlStateService = ifControlStateService;
        this.focus = false;
        this.subscriptions.push(this.focusService.focusChange.subscribe(state => {
            this.focus = state;
        }));
        this.subscriptions.push(this.toggleService.openChange.subscribe(() => {
            this.dateFormControlService.markAsTouched();
        }));
    }
    set clrPosition(position) {
        if (position && ClrPopoverPositions[position]) {
            this.viewManagerService.position = ClrPopoverPositions[position];
        }
    }
    get popoverPosition() {
        return this.viewManagerService.position;
    }
    get open() {
        return this.toggleService.open;
    }
    set actionButton(button) {
        this.toggleButton = button;
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.toggleService.openChange.subscribe(open => {
            if (open) {
                this.initializeCalendar();
            }
            else {
                this.toggleButton.nativeElement.focus();
            }
        }));
        this.subscriptions.push(this.listenForDateChanges());
    }
    /**
     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
     */
    get isEnabled() {
        return this.datepickerEnabledService.isEnabled;
    }
    /**
     * Return if Datepicker is diabled or not as Form Control
     */
    get isInputDateDisabled() {
        /* clrForm wrapper or without clrForm */
        return ((this.control && this.control.disabled) || (this.dateFormControlService && this.dateFormControlService.disabled));
    }
    /**
     * Return the label for the toggle button.
     * If there's a selected date, the date is included in the label.
     */
    getToggleButtonLabel(day) {
        if (day) {
            const formattedDate = this.dateIOService.toLocaleDisplayFormatString(day.toDate());
            return (this.commonStrings.parse(this.commonStrings.keys.datepickerToggleChangeDateLabel, {
                SELECTED_DATE: formattedDate,
            }) || this.commonStrings.keys.datepickerToggle);
        }
        return this.commonStrings.keys.datepickerToggleChooseDateLabel || this.commonStrings.keys.datepickerToggle;
    }
    listenForDateChanges() {
        // because date-input.ts initializes the input in ngAfterViewInit,
        // using a databound attribute to change the button labels results in ExpressionChangedAfterItHasBeenCheckedError.
        // so instead, update the attribute directly on the element
        return this.dateNavigationService.selectedDayChange
            .pipe(startWith(this.dateNavigationService.selectedDay))
            .subscribe(day => {
            const label = this.getToggleButtonLabel(day);
            const toggleEl = this.toggleButton.nativeElement;
            this.renderer.setAttribute(toggleEl, 'aria-label', label);
            this.renderer.setAttribute(toggleEl, 'title', label);
        });
    }
    /**
     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
     */
    initializeCalendar() {
        this.dateNavigationService.initializeCalendar();
    }
}
ClrDateContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrDateContainer, deps: [{ token: i0.Renderer2 }, { token: i1.ClrPopoverToggleService }, { token: i2.DateNavigationService }, { token: i3.DatepickerEnabledService }, { token: i4.DateFormControlService }, { token: i5.DateIOService }, { token: i6.ClrCommonStringsService }, { token: i7.FocusService }, { token: i8.ViewManagerService }, { token: i9.ControlClassService }, { token: i10.LayoutService, optional: true }, { token: i11.NgControlService }, { token: i12.IfControlStateService }], target: i0.ɵɵFactoryTarget.Component });
ClrDateContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ClrDateContainer, selector: "clr-date-container", inputs: { clrPosition: "clrPosition" }, host: { properties: { "class.clr-date-container": "true", "class.clr-form-control-disabled": "isInputDateDisabled", "class.clr-form-control": "true", "class.clr-row": "addGrid()" } }, providers: [
        ControlIdService,
        ClrPopoverToggleService,
        ClrPopoverEventsService,
        ClrPopoverPositionService,
        LocaleHelperService,
        ControlClassService,
        FocusService,
        NgControlService,
        DateIOService,
        DateNavigationService,
        DatepickerEnabledService,
        DateFormControlService,
        ViewManagerService,
        IfControlStateService,
    ], viewQueries: [{ propertyName: "actionButton", first: true, predicate: ["actionButton"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper" clrPopoverAnchor>
        <div class="clr-input-group" [class.clr-focus]="focus">
          <ng-content select="[clrDate]"></ng-content>
          <button
            #actionButton
            type="button"
            clrPopoverOpenCloseButton
            class="clr-input-group-icon-action"
            [disabled]="isInputDateDisabled"
            *ngIf="isEnabled"
          >
            <cds-icon status="info" shape="calendar"></cds-icon>
          </button>
          <clr-datepicker-view-manager
            *clrPopoverContent="open; at: popoverPosition; outsideClickToClose: true; scrollToClose: true"
            clrFocusTrap
          ></clr-datepicker-view-manager>
        </div>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          status="danger"
          shape="exclamation-circle"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `, isInline: true, components: [{ type: i13.ClrDatepickerViewManager, selector: "clr-datepicker-view-manager" }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i15.ClrLabel, selector: "label", inputs: ["for"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i16.ClrPopoverAnchor, selector: "[clrPopoverAnchor]" }, { type: i17.ClrPopoverOpenCloseButton, selector: "[clrPopoverOpenCloseButton]", outputs: ["clrPopoverOpenCloseChange"] }, { type: i18.CdsIconCustomTag, selector: "cds-icon" }, { type: i19.ClrPopoverContent, selector: "[clrPopoverContent]", inputs: ["clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"] }, { type: i20.FocusTrapDirective, selector: "[clrFocusTrap]", inputs: ["clrFocusTrap"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ClrDateContainer, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-date-container',
                    template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper" clrPopoverAnchor>
        <div class="clr-input-group" [class.clr-focus]="focus">
          <ng-content select="[clrDate]"></ng-content>
          <button
            #actionButton
            type="button"
            clrPopoverOpenCloseButton
            class="clr-input-group-icon-action"
            [disabled]="isInputDateDisabled"
            *ngIf="isEnabled"
          >
            <cds-icon status="info" shape="calendar"></cds-icon>
          </button>
          <clr-datepicker-view-manager
            *clrPopoverContent="open; at: popoverPosition; outsideClickToClose: true; scrollToClose: true"
            clrFocusTrap
          ></clr-datepicker-view-manager>
        </div>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          status="danger"
          shape="exclamation-circle"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
                    providers: [
                        ControlIdService,
                        ClrPopoverToggleService,
                        ClrPopoverEventsService,
                        ClrPopoverPositionService,
                        LocaleHelperService,
                        ControlClassService,
                        FocusService,
                        NgControlService,
                        DateIOService,
                        DateNavigationService,
                        DatepickerEnabledService,
                        DateFormControlService,
                        ViewManagerService,
                        IfControlStateService,
                    ],
                    host: {
                        '[class.clr-date-container]': 'true',
                        '[class.clr-form-control-disabled]': 'isInputDateDisabled',
                        '[class.clr-form-control]': 'true',
                        '[class.clr-row]': 'addGrid()',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.ClrPopoverToggleService }, { type: i2.DateNavigationService }, { type: i3.DatepickerEnabledService }, { type: i4.DateFormControlService }, { type: i5.DateIOService }, { type: i6.ClrCommonStringsService }, { type: i7.FocusService }, { type: i8.ViewManagerService }, { type: i9.ControlClassService }, { type: i10.LayoutService, decorators: [{
                    type: Optional
                }] }, { type: i11.NgControlService }, { type: i12.IfControlStateService }]; }, propDecorators: { clrPosition: [{
                type: Input,
                args: ['clrPosition']
            }], actionButton: [{
                type: ViewChild,
                args: ['actionButton']
            }] } });
//# sourceMappingURL=data:application/json;base64,