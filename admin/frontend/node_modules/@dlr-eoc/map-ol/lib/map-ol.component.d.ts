import { OnInit, OnDestroy, AfterViewChecked, AfterViewInit, ElementRef, NgZone } from '@angular/core';
import { MapStateService } from '@dlr-eoc/services-map-state';
import { Subscription } from 'rxjs';
import { MapOlService } from './map-ol.service';
import { LayersService, VectorLayer } from '@dlr-eoc/services-layers';
import Map from 'ol/Map';
import olVectorSource from 'ol/source/Vector';
import olGeometry from 'ol/geom/Geometry';
import olVectorLayer from 'ol/layer/Vector';
import * as i0 from "@angular/core";
export interface IMapControls {
    /** @see (Attribution options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/Attribution.js#L13 */
    attribution?: boolean | object;
    /** @see (ScaleLine options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/ScaleLine.js#L39 */
    scaleLine?: boolean | object;
    /** @see (Zoom options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/Zoom.js#L11 */
    zoom?: boolean | object;
    crosshair?: boolean;
    /** @see (FullScreen options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/FullScreen.js#L13 */
    fullScreen?: boolean | object;
    /** @see (MousePosition options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/MousePosition.js#L25 */
    mousePosition?: boolean | object;
    /** @see (OverviewMap options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/OverviewMap.js#L46 */
    overviewMap?: boolean | object;
    /** @see (Rotate options) https://github.com/openlayers/openlayers/blob/v6.2.1/src/ol/control/Rotate.js#L11 */
    rotate?: boolean | object;
}
export declare class MapOlComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {
    private mapSvc;
    private ngZone;
    mapDivView: ElementRef;
    layersSvc: LayersService;
    mapStateSvc: MapStateService;
    controls: IMapControls;
    map: Map;
    subs: Subscription[];
    mapOnMoveend: any;
    mapOnClickMove: any;
    mapOnDclick: any;
    private privMapwidth;
    private get mapwidth();
    private set mapwidth(value);
    constructor(mapSvc: MapOlService, ngZone: NgZone);
    /**
     * - subscribe to layers oninit so they get pulled after view init
     */
    ngOnInit(): void;
    /**
     * - set target of ol map after angular has rendered the element
     * - then subscribe to map events
     */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private removePopupsOnMouseLeave;
    private addUpdateLayers;
    /** addresses an issue in openlayers: https://github.com/openlayers/openlayers/issues/6654 */
    private setZIndexForGroup;
    private updateLayerParamsWith;
    private updateWfsLayerParamsWith;
    /**
     * TODO: set all other props of GeoJsonLayer.options and GeoJsonLayer.cluster (see: IVectorLayerOptions)
     */
    updateGeojsonLayerParamsWith(oldLayer: olVectorLayer<olVectorSource<olGeometry>>, newGeojsonLayer: VectorLayer): void;
    private updateWmsLayerParamsWith;
    private updateWmtsLayerParamsWith;
    private shallowEqual;
    private addUpdateBaseLayers;
    private subscribeToLayers;
    private setMapState;
    private subscribeToMapState;
    private subscribeToMapEvents;
    private initMap;
    private setControls;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapOlComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapOlComponent, "ukis-map-ol", never, { "layersSvc": "layersSvc"; "mapStateSvc": "mapState"; "controls": "controls"; }, {}, never, never>;
}
