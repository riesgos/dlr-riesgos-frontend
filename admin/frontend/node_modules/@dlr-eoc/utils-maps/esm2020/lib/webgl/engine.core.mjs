import { createShaderProgram, setup3dScene, createFloatBuffer, getAttributeLocation, bindBufferToAttribute, getUniformLocation, bindValueToUniform, clearBackground, bindProgram, createTexture, bindTextureToUniform, bindFramebuffer, bindOutputCanvasToFramebuffer, updateBufferData, bindTextureToFramebuffer, createEmptyTexture, createFramebuffer, updateTexture, createIndexBuffer, drawArray, drawElements, bindIndexBuffer, createDataTexture } from './webgl';
// dead-simple hash function - not intended to be secure in any way.
const hash = function (s) {
    let h = 0;
    for (const c of s) {
        h += c.charCodeAt(0);
    }
    return `${h}`;
};
export class Program {
    constructor(gl, vertexShaderSource, fragmentShaderSource) {
        this.vertexShaderSource = vertexShaderSource;
        this.fragmentShaderSource = fragmentShaderSource;
        this.program = createShaderProgram(gl, vertexShaderSource, fragmentShaderSource);
        this.id = hash(vertexShaderSource + fragmentShaderSource);
    }
}
export class Uniform {
    constructor(gl, program, variableName, type, data) {
        this.location = getUniformLocation(gl, program.program, variableName);
        this.type = type;
        this.value = data;
        this.variableName = variableName;
    }
}
export class Texture {
    constructor(gl, program, variableName, im, bindPoint) {
        this.location = getUniformLocation(gl, program.program, variableName);
        if (im instanceof HTMLImageElement || im instanceof HTMLCanvasElement) {
            this.texture = createTexture(gl, im);
        }
        else {
            this.texture = im;
        }
        this.bindPoint = bindPoint;
        this.variableName = variableName;
    }
}
export class DataTexture {
    constructor(gl, program, variableName, data, bindPoint) {
        this.location = getUniformLocation(gl, program.program, variableName);
        this.texture = createDataTexture(gl, data);
        this.bindPoint = bindPoint;
        this.variableName = variableName;
    }
}
export class Attribute {
    constructor(gl, program, variableName, data, drawingMode = 'triangles') {
        let glDrawingMode;
        switch (drawingMode) {
            case 'triangles':
                glDrawingMode = gl.TRIANGLES;
                break;
            case 'lines':
                glDrawingMode = gl.LINES;
                break;
            case 'points':
                glDrawingMode = gl.POINTS;
                break;
            default:
                throw new Error(`Invalid drawing mode ${drawingMode}`);
        }
        this.location = getAttributeLocation(gl, program.program, variableName);
        this.value = createFloatBuffer(gl, data, glDrawingMode);
        this.variableName = variableName;
        this.drawingMode = glDrawingMode;
    }
}
export class Index {
    constructor(gl, indices, drawingMode = 'triangles') {
        let glDrawingMode;
        switch (drawingMode) {
            case 'triangles':
                glDrawingMode = gl.TRIANGLES;
                break;
            case 'lines':
                glDrawingMode = gl.LINES;
                break;
            case 'points':
                glDrawingMode = gl.POINTS;
                break;
            default:
                throw new Error(`Invalid drawing mode ${drawingMode}`);
        }
        this.index = createIndexBuffer(gl, indices, glDrawingMode);
    }
}
function first(arr, condition) {
    for (const el of arr) {
        if (condition(el)) {
            return el;
        }
    }
    return null;
}
function parseProgram(program) {
    const attributeRegex = /^\s*attribute (int|float|vec2|vec3|vec4|mat2|mat3|mat4) (\w*);/gm;
    const uniformRegex = /^\s*uniform (int|float|vec2|vec3|vec4|mat2|mat3|mat4) (\w*)(\[\d\])*;/gm;
    const textureRegex = /^\s*uniform sampler2D (\w*);/gm;
    const precisionRegex = /^\s*precision (\w*) float;/gm;
    const shaderCode = program.fragmentShaderSource + '\n\n\n' + program.vertexShaderSource;
    const attributeNames = [];
    let attributeMatches;
    while ((attributeMatches = attributeRegex.exec(shaderCode)) !== null) {
        attributeNames.push(attributeMatches[2]);
    }
    const uniformNames = [];
    let uniformMatches;
    while ((uniformMatches = uniformRegex.exec(shaderCode)) !== null) {
        uniformNames.push(uniformMatches[2]);
    }
    const textureNames = [];
    let textureMatches;
    while ((textureMatches = textureRegex.exec(shaderCode)) !== null) {
        textureNames.push(textureMatches[1]);
    }
    const precisions = [];
    let precisionMatches;
    while ((precisionMatches = precisionRegex.exec(shaderCode)) !== null) {
        precisions.push(precisionMatches[1]);
    }
    return [attributeNames, uniformNames, textureNames, precisions];
}
export class Shader {
    constructor(program, attributes, uniforms, textures, index) {
        this.program = program;
        this.attributes = attributes;
        this.uniforms = uniforms;
        this.textures = textures;
        this.index = index;
        const [attributeNames, uniformNames, textureNames, precisions] = parseProgram(program);
        for (const attrName of attributeNames) {
            const found = attributes.filter(a => a.variableName === attrName);
            if (found.length !== 1) {
                throw new Error(`Provided ${found.length} values for shader's attribute ${attrName}.`);
            }
        }
        for (const uniformName of uniformNames) {
            const found = uniforms.filter(a => a.variableName === uniformName);
            if (found.length !== 1) {
                throw new Error(`Provided ${found.length} values for shader's uniform ${uniformName}.`);
            }
        }
        for (const texName of textureNames) {
            const found = textures.filter(a => a.variableName === texName);
            if (found.length !== 1) {
                throw new Error(`Provided ${found.length} values for shader's texture ${texName}.`);
            }
        }
        if (precisions.length === 1) {
            console.warn(`You have only provided one precision qualifier.
            This can cause issues when you want to use a uniform in both the vertex- and the fragment-shader.`);
        }
        const lengths = this.attributes.map(a => a.value.vectorCount);
        if (Math.min(...lengths) !== Math.max(...lengths)) {
            throw new Error(`Your attributes are not of the same length!`);
        }
    }
    bind(gl) {
        bindProgram(gl, this.program.program);
        for (const a of this.attributes) {
            bindBufferToAttribute(gl, a.location, a.value);
        }
        for (const u of this.uniforms) {
            bindValueToUniform(gl, u.location, u.type, u.value);
        }
        for (const t of this.textures) {
            bindTextureToUniform(gl, t.texture.texture, t.bindPoint, t.location);
        }
        if (this.index) {
            bindIndexBuffer(gl, this.index.index);
        }
    }
    render(gl, background, frameBuffer, viewport) {
        if (!frameBuffer) {
            bindOutputCanvasToFramebuffer(gl, viewport);
        }
        else {
            bindFramebuffer(gl, frameBuffer, viewport);
        }
        if (background) {
            clearBackground(gl, background);
        }
        if (this.index) {
            drawElements(gl, this.index.index);
        }
        else {
            const firstAttribute = this.attributes[0];
            drawArray(gl, firstAttribute.value);
        }
    }
    updateAttributeData(gl, variableName, newData) {
        const attribute = first(this.attributes, el => el.variableName === variableName);
        if (!attribute) {
            throw new Error(`No such attribute ${variableName} to be updated.`);
        }
        updateBufferData(gl, attribute.value, newData);
    }
    updateUniformData(gl, variableName, newData) {
        const uniform = first(this.uniforms, el => el.variableName === variableName);
        if (!uniform) {
            throw new Error(`No such uniform ${variableName} to be updated.`);
        }
        uniform.value = newData;
    }
    updateTextureData(gl, variableName, newImage) {
        const original = first(this.textures, t => t.variableName === variableName);
        if (!original) {
            throw new Error(`No such texture ${variableName} to be updated.`);
        }
        const newTextureObject = updateTexture(gl, original.texture, newImage);
        original.texture = newTextureObject;
    }
}
export class Framebuffer {
    constructor(gl, width, height) {
        const fb = createFramebuffer(gl);
        const fbTexture = createEmptyTexture(gl, width, height);
        const fbo = bindTextureToFramebuffer(gl, fbTexture, fb);
        this.fbo = fbo;
    }
}
export function renderLoop(fps, renderFunction) {
    const tDeltaTarget = 1000 * 1.0 / fps;
    let tDelta = tDeltaTarget;
    let tStart, tNow, tSleep;
    const render = () => {
        tStart = window.performance.now();
        renderFunction(tDelta);
        tNow = window.performance.now();
        tDelta = tNow - tStart;
        tSleep = Math.max(tDeltaTarget - tDelta, 0);
        setTimeout(() => {
            requestAnimationFrame(render);
        }, tSleep);
    };
    render();
}
export class Entity {
    constructor(program, attributes, uniforms, textures, updateFunction) {
        this.program = program;
        this.attributes = attributes;
        this.uniforms = uniforms;
        this.textures = textures;
        this.updateFunction = updateFunction;
    }
    update(tDelta) {
        this.updateFunction(tDelta, this.attributes, this.uniforms);
    }
}
export class Engine {
    constructor() {
        this.entities = [];
    }
    renderLoop(gl, fps) {
        setup3dScene(gl);
        const tDeltaTarget = 1000 * 1.0 / fps;
        let tStart, tNow, tDelta, tSleep;
        let currentShader = '';
        const render = () => {
            tStart = window.performance.now();
            // Part 1: allow objects to update their state
            for (const e of this.entities) {
                e.update(tDeltaTarget);
            }
            // Part 2: do the actual rendering work here
            clearBackground(gl, [.7, .7, .7, 1]);
            for (const e of this.entities) {
                if (e.program.id !== currentShader) {
                    bindProgram(gl, e.program.program);
                    currentShader = e.program.id;
                }
                for (const a of e.attributes) {
                    bindBufferToAttribute(gl, a.location, a.value);
                }
                for (const u of e.uniforms) {
                    bindValueToUniform(gl, u.location, u.type, u.value);
                }
                for (const t of e.textures) {
                    bindTextureToUniform(gl, t.texture.texture, t.bindPoint, t.location);
                }
                gl.drawArrays(gl.TRIANGLES, 0, e.attributes[0].value.vectorCount);
            }
            // Part 3: time-management
            tNow = window.performance.now();
            tDelta = tNow - tStart;
            tSleep = Math.max(tDeltaTarget - tDelta, 0);
            setTimeout(() => {
                requestAnimationFrame(render);
            }, tSleep);
        };
        render();
    }
    addEntity(entity) {
        this.entities.push(entity);
        this.sortEntities();
    }
    sortEntities() {
        this.entities.sort((a, b) => {
            return (a.program.id > b.program.id) ? 1 : -1;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmNvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91dGlscy1tYXBzL3NyYy9saWIvd2ViZ2wvZW5naW5lLmNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQW1DLFdBQVcsRUFBRSxhQUFhLEVBQUUsb0JBQW9CLEVBQW9DLGVBQWUsRUFBRSw2QkFBNkIsRUFBRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQXFCLFNBQVMsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFrQixNQUFNLFNBQVMsQ0FBQztBQUcvaUIsb0VBQW9FO0FBQ3BFLE1BQU0sSUFBSSxHQUFHLFVBQVMsQ0FBUztJQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNmLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0lBQ0QsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQVdGLE1BQU0sT0FBTyxPQUFPO0lBS2hCLFlBQVksRUFBeUIsRUFDeEIsa0JBQTBCLEVBQzFCLG9CQUE0QjtRQUQ1Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFDMUIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFRO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsa0JB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LENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUdKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2hhZGVyUHJvZ3JhbSwgc2V0dXAzZFNjZW5lLCBjcmVhdGVGbG9hdEJ1ZmZlciwgZ2V0QXR0cmlidXRlTG9jYXRpb24sIGJpbmRCdWZmZXJUb0F0dHJpYnV0ZSwgZ2V0VW5pZm9ybUxvY2F0aW9uLCBiaW5kVmFsdWVUb1VuaWZvcm0sIGNsZWFyQmFja2dyb3VuZCwgQnVmZmVyT2JqZWN0LCBXZWJHTFZhcmlhYmxlVHlwZSwgYmluZFByb2dyYW0sIGNyZWF0ZVRleHR1cmUsIGJpbmRUZXh0dXJlVG9Vbmlmb3JtLCBUZXh0dXJlT2JqZWN0LCBGcmFtZWJ1ZmZlck9iamVjdCwgYmluZEZyYW1lYnVmZmVyLCBiaW5kT3V0cHV0Q2FudmFzVG9GcmFtZWJ1ZmZlciwgdXBkYXRlQnVmZmVyRGF0YSwgYmluZFRleHR1cmVUb0ZyYW1lYnVmZmVyLCBjcmVhdGVFbXB0eVRleHR1cmUsIGNyZWF0ZUZyYW1lYnVmZmVyLCB1cGRhdGVUZXh0dXJlLCBjcmVhdGVJbmRleEJ1ZmZlciwgSW5kZXhCdWZmZXJPYmplY3QsIGRyYXdBcnJheSwgZHJhd0VsZW1lbnRzLCBiaW5kSW5kZXhCdWZmZXIsIGNyZWF0ZURhdGFUZXh0dXJlLCB1cGRhdGVWaWV3UG9ydCB9IGZyb20gJy4vd2ViZ2wnO1xuXG5cbi8vIGRlYWQtc2ltcGxlIGhhc2ggZnVuY3Rpb24gLSBub3QgaW50ZW5kZWQgdG8gYmUgc2VjdXJlIGluIGFueSB3YXkuXG5jb25zdCBoYXNoID0gZnVuY3Rpb24oczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgaCA9IDA7XG4gICAgZm9yIChjb25zdCBjIG9mIHMpIHtcbiAgICAgICAgaCArPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgfVxuICAgIHJldHVybiBgJHtofWA7XG59O1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2dyYW0ge1xuICAgIHByb2dyYW06IFdlYkdMUHJvZ3JhbTtcbiAgICBpZDogc3RyaW5nO1xuICAgIHZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nO1xuICAgIGZyYWdtZW50U2hhZGVyU291cmNlOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIFByb2dyYW0gaW1wbGVtZW50cyBJUHJvZ3JhbSB7XG5cbiAgICByZWFkb25seSBwcm9ncmFtOiBXZWJHTFByb2dyYW07XG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgICAgIHJlYWRvbmx5IHZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBmcmFnbWVudFNoYWRlclNvdXJjZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IGNyZWF0ZVNoYWRlclByb2dyYW0oZ2wsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xuICAgICAgICB0aGlzLmlkID0gaGFzaCh2ZXJ0ZXhTaGFkZXJTb3VyY2UgKyBmcmFnbWVudFNoYWRlclNvdXJjZSk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVuaWZvcm0ge1xuICAgIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgICB0eXBlOiBXZWJHTFZhcmlhYmxlVHlwZTtcbiAgICB2YWx1ZTogbnVtYmVyW107XG4gICAgdmFyaWFibGVOYW1lOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIFVuaWZvcm0gaW1wbGVtZW50cyBJVW5pZm9ybSB7XG5cbiAgICByZWFkb25seSBsb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgcmVhZG9ubHkgdHlwZTogV2ViR0xWYXJpYWJsZVR5cGU7XG4gICAgcmVhZG9ubHkgdmFsdWU6IG51bWJlcltdO1xuICAgIHJlYWRvbmx5IHZhcmlhYmxlTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcHJvZ3JhbTogSVByb2dyYW0sIHZhcmlhYmxlTmFtZTogc3RyaW5nLCB0eXBlOiBXZWJHTFZhcmlhYmxlVHlwZSwgZGF0YTogbnVtYmVyW10pIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGdldFVuaWZvcm1Mb2NhdGlvbihnbCwgcHJvZ3JhbS5wcm9ncmFtLCB2YXJpYWJsZU5hbWUpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnZhbHVlID0gZGF0YTtcbiAgICAgICAgdGhpcy52YXJpYWJsZU5hbWUgPSB2YXJpYWJsZU5hbWU7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRleHR1cmUge1xuICAgIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgICBiaW5kUG9pbnQ6IG51bWJlcjtcbiAgICB0ZXh0dXJlOiBUZXh0dXJlT2JqZWN0O1xuICAgIHZhcmlhYmxlTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVGV4dHVyZSBpbXBsZW1lbnRzIElUZXh0dXJlIHtcblxuICAgIHJlYWRvbmx5IGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgICByZWFkb25seSBiaW5kUG9pbnQ6IG51bWJlcjtcbiAgICByZWFkb25seSB0ZXh0dXJlOiBUZXh0dXJlT2JqZWN0O1xuICAgIHJlYWRvbmx5IHZhcmlhYmxlTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcHJvZ3JhbTogSVByb2dyYW0sIHZhcmlhYmxlTmFtZTogc3RyaW5nLCBpbTogSFRNTEltYWdlRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50IHwgVGV4dHVyZU9iamVjdCwgYmluZFBvaW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGdldFVuaWZvcm1Mb2NhdGlvbihnbCwgcHJvZ3JhbS5wcm9ncmFtLCB2YXJpYWJsZU5hbWUpO1xuICAgICAgICBpZiAoaW0gaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50IHx8IGltIGluc3RhbmNlb2YgIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSBjcmVhdGVUZXh0dXJlKGdsLCBpbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSBpbTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJpbmRQb2ludCA9IGJpbmRQb2ludDtcbiAgICAgICAgdGhpcy52YXJpYWJsZU5hbWUgPSB2YXJpYWJsZU5hbWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRleHR1cmUgaW1wbGVtZW50cyBJVGV4dHVyZSB7XG4gICAgcmVhZG9ubHkgbG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uO1xuICAgIHJlYWRvbmx5IGJpbmRQb2ludDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHRleHR1cmU6IFRleHR1cmVPYmplY3Q7XG4gICAgcmVhZG9ubHkgdmFyaWFibGVOYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcm9ncmFtOiBJUHJvZ3JhbSwgdmFyaWFibGVOYW1lOiBzdHJpbmcsIGRhdGE6IG51bWJlcltdW11bXSwgYmluZFBvaW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGdldFVuaWZvcm1Mb2NhdGlvbihnbCwgcHJvZ3JhbS5wcm9ncmFtLCB2YXJpYWJsZU5hbWUpO1xuICAgICAgICB0aGlzLnRleHR1cmUgPSBjcmVhdGVEYXRhVGV4dHVyZShnbCwgZGF0YSk7XG4gICAgICAgIHRoaXMuYmluZFBvaW50ID0gYmluZFBvaW50O1xuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZSA9IHZhcmlhYmxlTmFtZTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBJQXR0cmlidXRlIHtcbiAgICBsb2NhdGlvbjogbnVtYmVyO1xuICAgIHZhbHVlOiBCdWZmZXJPYmplY3Q7XG4gICAgdmFyaWFibGVOYW1lOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IHR5cGUgR2xEcmF3aW5nTW9kZSA9ICd0cmlhbmdsZXMnIHwgJ3BvaW50cycgfCAnbGluZXMnO1xuXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlIGltcGxlbWVudHMgSUF0dHJpYnV0ZSB7XG5cbiAgICByZWFkb25seSBsb2NhdGlvbjogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHZhbHVlOiBCdWZmZXJPYmplY3Q7XG4gICAgcmVhZG9ubHkgdmFyaWFibGVOYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZHJhd2luZ01vZGU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHByb2dyYW06IElQcm9ncmFtLCB2YXJpYWJsZU5hbWU6IHN0cmluZywgZGF0YTogbnVtYmVyW11bXSwgZHJhd2luZ01vZGU6IEdsRHJhd2luZ01vZGUgPSAndHJpYW5nbGVzJykge1xuICAgICAgICBsZXQgZ2xEcmF3aW5nTW9kZTogbnVtYmVyO1xuICAgICAgICBzd2l0Y2ggKGRyYXdpbmdNb2RlKSB7XG4gICAgICAgICAgICBjYXNlICd0cmlhbmdsZXMnOlxuICAgICAgICAgICAgICAgIGdsRHJhd2luZ01vZGUgPSBnbC5UUklBTkdMRVM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsaW5lcyc6XG4gICAgICAgICAgICAgICAgZ2xEcmF3aW5nTW9kZSA9IGdsLkxJTkVTO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncG9pbnRzJzpcbiAgICAgICAgICAgICAgICBnbERyYXdpbmdNb2RlID0gZ2wuUE9JTlRTO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZHJhd2luZyBtb2RlICR7ZHJhd2luZ01vZGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGdldEF0dHJpYnV0ZUxvY2F0aW9uKGdsLCBwcm9ncmFtLnByb2dyYW0sIHZhcmlhYmxlTmFtZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBjcmVhdGVGbG9hdEJ1ZmZlcihnbCwgZGF0YSwgZ2xEcmF3aW5nTW9kZSk7XG4gICAgICAgIHRoaXMudmFyaWFibGVOYW1lID0gdmFyaWFibGVOYW1lO1xuICAgICAgICB0aGlzLmRyYXdpbmdNb2RlID0gZ2xEcmF3aW5nTW9kZTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIEluZGV4IHtcbiAgICByZWFkb25seSBpbmRleDogSW5kZXhCdWZmZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBpbmRpY2VzOiBudW1iZXJbXVtdLCBkcmF3aW5nTW9kZTogR2xEcmF3aW5nTW9kZSA9ICd0cmlhbmdsZXMnKSB7XG4gICAgICAgIGxldCBnbERyYXdpbmdNb2RlOiBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoZHJhd2luZ01vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3RyaWFuZ2xlcyc6XG4gICAgICAgICAgICAgICAgZ2xEcmF3aW5nTW9kZSA9IGdsLlRSSUFOR0xFUztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xpbmVzJzpcbiAgICAgICAgICAgICAgICBnbERyYXdpbmdNb2RlID0gZ2wuTElORVM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb2ludHMnOlxuICAgICAgICAgICAgICAgIGdsRHJhd2luZ01vZGUgPSBnbC5QT0lOVFM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBkcmF3aW5nIG1vZGUgJHtkcmF3aW5nTW9kZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGV4ID0gY3JlYXRlSW5kZXhCdWZmZXIoZ2wsIGluZGljZXMsIGdsRHJhd2luZ01vZGUpO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBmaXJzdDxUPihhcnI6IFRbXSwgY29uZGl0aW9uOiAoZWw6IFQpID0+IGJvb2xlYW4pOiBUIHwgbnVsbCB7XG4gICAgZm9yIChjb25zdCBlbCBvZiBhcnIpIHtcbiAgICAgICAgaWYgKGNvbmRpdGlvbihlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuXG5mdW5jdGlvbiBwYXJzZVByb2dyYW0ocHJvZ3JhbTogSVByb2dyYW0pOiBbc3RyaW5nW10sIHN0cmluZ1tdLCBzdHJpbmdbXSwgc3RyaW5nW11dIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVSZWdleCA9IC9eXFxzKmF0dHJpYnV0ZSAoaW50fGZsb2F0fHZlYzJ8dmVjM3x2ZWM0fG1hdDJ8bWF0M3xtYXQ0KSAoXFx3Kik7L2dtO1xuICAgIGNvbnN0IHVuaWZvcm1SZWdleCA9IC9eXFxzKnVuaWZvcm0gKGludHxmbG9hdHx2ZWMyfHZlYzN8dmVjNHxtYXQyfG1hdDN8bWF0NCkgKFxcdyopKFxcW1xcZFxcXSkqOy9nbTtcbiAgICBjb25zdCB0ZXh0dXJlUmVnZXggPSAvXlxccyp1bmlmb3JtIHNhbXBsZXIyRCAoXFx3Kik7L2dtO1xuICAgIGNvbnN0IHByZWNpc2lvblJlZ2V4ID0gL15cXHMqcHJlY2lzaW9uIChcXHcqKSBmbG9hdDsvZ207XG5cbiAgICBjb25zdCBzaGFkZXJDb2RlID0gcHJvZ3JhbS5mcmFnbWVudFNoYWRlclNvdXJjZSArICdcXG5cXG5cXG4nICsgcHJvZ3JhbS52ZXJ0ZXhTaGFkZXJTb3VyY2U7XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVOYW1lcyA9IFtdO1xuICAgIGxldCBhdHRyaWJ1dGVNYXRjaGVzO1xuICAgIHdoaWxlICgoYXR0cmlidXRlTWF0Y2hlcyA9IGF0dHJpYnV0ZVJlZ2V4LmV4ZWMoc2hhZGVyQ29kZSkpICE9PSBudWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZU5hbWVzLnB1c2goYXR0cmlidXRlTWF0Y2hlc1syXSk7XG4gICAgfVxuICAgIGNvbnN0IHVuaWZvcm1OYW1lcyA9IFtdO1xuICAgIGxldCB1bmlmb3JtTWF0Y2hlcztcbiAgICB3aGlsZSAoKHVuaWZvcm1NYXRjaGVzID0gdW5pZm9ybVJlZ2V4LmV4ZWMoc2hhZGVyQ29kZSkpICE9PSBudWxsKSB7XG4gICAgICAgIHVuaWZvcm1OYW1lcy5wdXNoKHVuaWZvcm1NYXRjaGVzWzJdKTtcbiAgICB9XG4gICAgY29uc3QgdGV4dHVyZU5hbWVzID0gW107XG4gICAgbGV0IHRleHR1cmVNYXRjaGVzO1xuICAgIHdoaWxlICgodGV4dHVyZU1hdGNoZXMgPSB0ZXh0dXJlUmVnZXguZXhlYyhzaGFkZXJDb2RlKSkgIT09IG51bGwpIHtcbiAgICAgICAgdGV4dHVyZU5hbWVzLnB1c2godGV4dHVyZU1hdGNoZXNbMV0pO1xuICAgIH1cblxuICAgIGNvbnN0IHByZWNpc2lvbnMgPSBbXTtcbiAgICBsZXQgcHJlY2lzaW9uTWF0Y2hlcztcbiAgICB3aGlsZSAoKHByZWNpc2lvbk1hdGNoZXMgPSBwcmVjaXNpb25SZWdleC5leGVjKHNoYWRlckNvZGUpKSAhPT0gbnVsbCkge1xuICAgICAgICBwcmVjaXNpb25zLnB1c2gocHJlY2lzaW9uTWF0Y2hlc1sxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFthdHRyaWJ1dGVOYW1lcywgdW5pZm9ybU5hbWVzLCB0ZXh0dXJlTmFtZXMsIHByZWNpc2lvbnNdO1xufVxuXG5cbmV4cG9ydCB0eXBlIFJlbmRlck1vZGUgPSAncG9pbnRzJyB8ICdsaW5lcycgfCAndHJpYW5nbGVzJztcblxuaW50ZXJmYWNlIElTaGFkZXIge1xuICAgIHByb2dyYW06IElQcm9ncmFtO1xuICAgIGluZGV4PzogSW5kZXg7XG4gICAgYXR0cmlidXRlczogSUF0dHJpYnV0ZVtdO1xuICAgIHVuaWZvcm1zOiBJVW5pZm9ybVtdO1xuICAgIHRleHR1cmVzOiBJVGV4dHVyZVtdO1xuICAgIGJpbmQ6IChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSA9PiB2b2lkO1xuICAgIHJlbmRlcjogKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGJhY2tncm91bmQ/OiBudW1iZXJbXSwgZnJhbWVCdWZmZXI/OiBGcmFtZWJ1ZmZlck9iamVjdCwgdmlld3BvcnQ/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSkgPT4gdm9pZDtcbiAgICB1cGRhdGVBdHRyaWJ1dGVEYXRhOiAoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmFyaWFibGVOYW1lOiBzdHJpbmcsIG5ld0RhdGE6IG51bWJlcltdW10pID0+IHZvaWQ7XG4gICAgdXBkYXRlVW5pZm9ybURhdGE6IChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2YXJpYWJsZU5hbWU6IHN0cmluZywgbmV3RGF0YTogbnVtYmVyW10pID0+IHZvaWQ7XG4gICAgdXBkYXRlVGV4dHVyZURhdGE6IChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2YXJpYWJsZU5hbWU6IHN0cmluZywgbmV3SW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFNoYWRlciBpbXBsZW1lbnRzIElTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICByZWFkb25seSBwcm9ncmFtOiBJUHJvZ3JhbSxcbiAgICAgICAgcmVhZG9ubHkgYXR0cmlidXRlczogSUF0dHJpYnV0ZVtdLFxuICAgICAgICByZWFkb25seSB1bmlmb3JtczogSVVuaWZvcm1bXSxcbiAgICAgICAgcmVhZG9ubHkgdGV4dHVyZXM6IElUZXh0dXJlW10sXG4gICAgICAgIHJlYWRvbmx5IGluZGV4PzogSW5kZXhcbiAgICApIHtcbiAgICAgICAgY29uc3QgW2F0dHJpYnV0ZU5hbWVzLCB1bmlmb3JtTmFtZXMsIHRleHR1cmVOYW1lcywgcHJlY2lzaW9uc10gPSBwYXJzZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgb2YgYXR0cmlidXRlTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gYXR0cmlidXRlcy5maWx0ZXIoYSA9PiBhLnZhcmlhYmxlTmFtZSA9PT0gYXR0ck5hbWUpO1xuICAgICAgICAgICAgaWYgKGZvdW5kLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZWQgJHtmb3VuZC5sZW5ndGh9IHZhbHVlcyBmb3Igc2hhZGVyJ3MgYXR0cmlidXRlICR7YXR0ck5hbWV9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdW5pZm9ybU5hbWUgb2YgdW5pZm9ybU5hbWVzKSB7XG4gICAgICAgICAgICBjb25zdCBmb3VuZCA9IHVuaWZvcm1zLmZpbHRlcihhID0+IGEudmFyaWFibGVOYW1lID09PSB1bmlmb3JtTmFtZSk7XG4gICAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm92aWRlZCAke2ZvdW5kLmxlbmd0aH0gdmFsdWVzIGZvciBzaGFkZXIncyB1bmlmb3JtICR7dW5pZm9ybU5hbWV9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdGV4TmFtZSBvZiB0ZXh0dXJlTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gdGV4dHVyZXMuZmlsdGVyKGEgPT4gYS52YXJpYWJsZU5hbWUgPT09IHRleE5hbWUpO1xuICAgICAgICAgICAgaWYgKGZvdW5kLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZWQgJHtmb3VuZC5sZW5ndGh9IHZhbHVlcyBmb3Igc2hhZGVyJ3MgdGV4dHVyZSAke3RleE5hbWV9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVjaXNpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBZb3UgaGF2ZSBvbmx5IHByb3ZpZGVkIG9uZSBwcmVjaXNpb24gcXVhbGlmaWVyLlxuICAgICAgICAgICAgVGhpcyBjYW4gY2F1c2UgaXNzdWVzIHdoZW4geW91IHdhbnQgdG8gdXNlIGEgdW5pZm9ybSBpbiBib3RoIHRoZSB2ZXJ0ZXgtIGFuZCB0aGUgZnJhZ21lbnQtc2hhZGVyLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aHMgPSB0aGlzLmF0dHJpYnV0ZXMubWFwKGEgPT4gYS52YWx1ZS52ZWN0b3JDb3VudCk7XG4gICAgICAgIGlmIChNYXRoLm1pbiguLi5sZW5ndGhzKSAhPT0gTWF0aC5tYXgoLi4ubGVuZ3RocykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91ciBhdHRyaWJ1dGVzIGFyZSBub3Qgb2YgdGhlIHNhbWUgbGVuZ3RoIWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGJpbmQoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgICAgICBiaW5kUHJvZ3JhbShnbCwgdGhpcy5wcm9ncmFtLnByb2dyYW0pO1xuICAgICAgICBmb3IgKGNvbnN0IGEgb2YgdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBiaW5kQnVmZmVyVG9BdHRyaWJ1dGUoZ2wsIGEubG9jYXRpb24sIGEudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdSBvZiB0aGlzLnVuaWZvcm1zKSB7XG4gICAgICAgICAgICBiaW5kVmFsdWVUb1VuaWZvcm0oZ2wsIHUubG9jYXRpb24sIHUudHlwZSwgdS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMudGV4dHVyZXMpIHtcbiAgICAgICAgICAgIGJpbmRUZXh0dXJlVG9Vbmlmb3JtKGdsLCB0LnRleHR1cmUudGV4dHVyZSwgdC5iaW5kUG9pbnQsIHQubG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluZGV4KSB7XG4gICAgICAgICAgICBiaW5kSW5kZXhCdWZmZXIoZ2wsIHRoaXMuaW5kZXguaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGJhY2tncm91bmQ/OiBudW1iZXJbXSwgZnJhbWVCdWZmZXI/OiBGcmFtZWJ1ZmZlck9iamVjdCwgdmlld3BvcnQ/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSk6IHZvaWQge1xuICAgICAgICBpZiAoIWZyYW1lQnVmZmVyKSB7XG4gICAgICAgICAgICBiaW5kT3V0cHV0Q2FudmFzVG9GcmFtZWJ1ZmZlcihnbCwgdmlld3BvcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmluZEZyYW1lYnVmZmVyKGdsLCBmcmFtZUJ1ZmZlciwgdmlld3BvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICBjbGVhckJhY2tncm91bmQoZ2wsIGJhY2tncm91bmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5kZXgpIHtcbiAgICAgICAgICAgIGRyYXdFbGVtZW50cyhnbCwgdGhpcy5pbmRleC5pbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdEF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlc1swXTtcbiAgICAgICAgICAgIGRyYXdBcnJheShnbCwgZmlyc3RBdHRyaWJ1dGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgdXBkYXRlQXR0cmlidXRlRGF0YShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2YXJpYWJsZU5hbWU6IHN0cmluZywgbmV3RGF0YTogbnVtYmVyW11bXSk6IHZvaWQge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBmaXJzdDxJQXR0cmlidXRlPih0aGlzLmF0dHJpYnV0ZXMsIGVsID0+IGVsLnZhcmlhYmxlTmFtZSA9PT0gdmFyaWFibGVOYW1lKTtcbiAgICAgICAgaWYgKCFhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3VjaCBhdHRyaWJ1dGUgJHt2YXJpYWJsZU5hbWV9IHRvIGJlIHVwZGF0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlQnVmZmVyRGF0YShnbCwgYXR0cmlidXRlLnZhbHVlLCBuZXdEYXRhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlVW5pZm9ybURhdGEoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmFyaWFibGVOYW1lOiBzdHJpbmcsIG5ld0RhdGE6IG51bWJlcltdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHVuaWZvcm0gPSBmaXJzdDxJVW5pZm9ybT4odGhpcy51bmlmb3JtcywgZWwgPT4gZWwudmFyaWFibGVOYW1lID09PSB2YXJpYWJsZU5hbWUpO1xuICAgICAgICBpZiAoIXVuaWZvcm0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3VjaCB1bmlmb3JtICR7dmFyaWFibGVOYW1lfSB0byBiZSB1cGRhdGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIHVuaWZvcm0udmFsdWUgPSBuZXdEYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVUZXh0dXJlRGF0YShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2YXJpYWJsZU5hbWU6IHN0cmluZywgbmV3SW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCB8IG51bWJlcltdW11bXSk6IHZvaWQge1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGZpcnN0PElUZXh0dXJlPih0aGlzLnRleHR1cmVzLCB0ID0+IHQudmFyaWFibGVOYW1lID09PSB2YXJpYWJsZU5hbWUpO1xuICAgICAgICBpZiAoIW9yaWdpbmFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHN1Y2ggdGV4dHVyZSAke3ZhcmlhYmxlTmFtZX0gdG8gYmUgdXBkYXRlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdUZXh0dXJlT2JqZWN0ID0gdXBkYXRlVGV4dHVyZShnbCwgb3JpZ2luYWwudGV4dHVyZSwgbmV3SW1hZ2UpO1xuICAgICAgICBvcmlnaW5hbC50ZXh0dXJlID0gbmV3VGV4dHVyZU9iamVjdDtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIEZyYW1lYnVmZmVyIHtcblxuICAgIHJlYWRvbmx5IGZibzogRnJhbWVidWZmZXJPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBmYiA9IGNyZWF0ZUZyYW1lYnVmZmVyKGdsKTtcbiAgICAgICAgY29uc3QgZmJUZXh0dXJlID0gY3JlYXRlRW1wdHlUZXh0dXJlKGdsLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgZmJvID0gYmluZFRleHR1cmVUb0ZyYW1lYnVmZmVyKGdsLCBmYlRleHR1cmUsIGZiKTtcbiAgICAgICAgdGhpcy5mYm8gPSBmYm87XG4gICAgfVxufVxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTG9vcChmcHM6IG51bWJlciwgcmVuZGVyRnVuY3Rpb246ICh0RGVsdGE6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuXG4gICAgY29uc3QgdERlbHRhVGFyZ2V0ID0gMTAwMCAqIDEuMCAvIGZwcztcbiAgICBsZXQgdERlbHRhID0gdERlbHRhVGFyZ2V0O1xuICAgIGxldCB0U3RhcnQsIHROb3csIHRTbGVlcDogbnVtYmVyO1xuXG4gICAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgICAgICB0U3RhcnQgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgICAgcmVuZGVyRnVuY3Rpb24odERlbHRhKTtcblxuICAgICAgICB0Tm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0RGVsdGEgPSB0Tm93IC0gdFN0YXJ0O1xuICAgICAgICB0U2xlZXAgPSBNYXRoLm1heCh0RGVsdGFUYXJnZXQgLSB0RGVsdGEsIDApO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgICB9LCB0U2xlZXApO1xuXG4gICAgfTtcblxuICAgIHJlbmRlcigpO1xufVxuXG5cblxuXG5cblxuXG5pbnRlcmZhY2UgSUVudGl0eSB7XG4gICAgcHJvZ3JhbTogSVByb2dyYW07XG4gICAgYXR0cmlidXRlczogSUF0dHJpYnV0ZVtdOyAvLyBub3RlIHRoYXQgYXR0cmlidXRlcyBtdXN0IGFsbCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbnRyaWVzIVxuICAgIHVuaWZvcm1zOiBJVW5pZm9ybVtdO1xuICAgIHRleHR1cmVzOiBJVGV4dHVyZVtdO1xuICAgIHVwZGF0ZTogKHREZWx0YTogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5cblxuZXhwb3J0IGNsYXNzIEVudGl0eSBpbXBsZW1lbnRzIElFbnRpdHkge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IHByb2dyYW06IElQcm9ncmFtLFxuICAgICAgICByZWFkb25seSBhdHRyaWJ1dGVzOiBJQXR0cmlidXRlW10sXG4gICAgICAgIHJlYWRvbmx5IHVuaWZvcm1zOiBJVW5pZm9ybVtdLFxuICAgICAgICByZWFkb25seSB0ZXh0dXJlczogSVRleHR1cmVbXSxcbiAgICAgICAgcmVhZG9ubHkgdXBkYXRlRnVuY3Rpb246ICh0RGVsdGE6IG51bWJlciwgYXR0cnM6IElBdHRyaWJ1dGVbXSwgdW5pczogSVVuaWZvcm1bXSkgPT4gdm9pZCkge31cblxuICAgIHVwZGF0ZSh0RGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUZ1bmN0aW9uKHREZWx0YSwgdGhpcy5hdHRyaWJ1dGVzLCB0aGlzLnVuaWZvcm1zKTtcbiAgICB9XG59XG5cblxuXG5cbmV4cG9ydCBjbGFzcyBFbmdpbmUge1xuXG4gICAgcmVhZG9ubHkgZW50aXRpZXM6IElFbnRpdHlbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgcHVibGljIHJlbmRlckxvb3AoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgZnBzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgc2V0dXAzZFNjZW5lKGdsKTtcblxuICAgICAgICBjb25zdCB0RGVsdGFUYXJnZXQgPSAxMDAwICogMS4wIC8gZnBzO1xuICAgICAgICBsZXQgdFN0YXJ0LCB0Tm93OiBudW1iZXIsIHREZWx0YTogbnVtYmVyLCB0U2xlZXA7XG4gICAgICAgIGxldCBjdXJyZW50U2hhZGVyID0gJyc7XG4gICAgICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRTdGFydCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgICAgICAgLy8gUGFydCAxOiBhbGxvdyBvYmplY3RzIHRvIHVwZGF0ZSB0aGVpciBzdGF0ZVxuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZW50aXRpZXMpIHtcbiAgICAgICAgICAgICAgICBlLnVwZGF0ZSh0RGVsdGFUYXJnZXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQYXJ0IDI6IGRvIHRoZSBhY3R1YWwgcmVuZGVyaW5nIHdvcmsgaGVyZVxuICAgICAgICAgICAgY2xlYXJCYWNrZ3JvdW5kKGdsLCBbLjcsIC43LCAuNywgMV0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZW50aXRpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5wcm9ncmFtLmlkICE9PSBjdXJyZW50U2hhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbmRQcm9ncmFtKGdsLCBlLnByb2dyYW0ucHJvZ3JhbSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTaGFkZXIgPSBlLnByb2dyYW0uaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYSBvZiBlLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYmluZEJ1ZmZlclRvQXR0cmlidXRlKGdsLCBhLmxvY2F0aW9uLCBhLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1IG9mIGUudW5pZm9ybXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYmluZFZhbHVlVG9Vbmlmb3JtKGdsLCB1LmxvY2F0aW9uLCB1LnR5cGUsIHUudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZS50ZXh0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICBiaW5kVGV4dHVyZVRvVW5pZm9ybShnbCwgdC50ZXh0dXJlLnRleHR1cmUsIHQuYmluZFBvaW50LCB0LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIGUuYXR0cmlidXRlc1swXS52YWx1ZS52ZWN0b3JDb3VudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBhcnQgMzogdGltZS1tYW5hZ2VtZW50XG4gICAgICAgICAgICB0Tm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgdERlbHRhID0gdE5vdyAtIHRTdGFydDtcbiAgICAgICAgICAgIHRTbGVlcCA9IE1hdGgubWF4KHREZWx0YVRhcmdldCAtIHREZWx0YSwgMCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgICAgICAgIH0sIHRTbGVlcCk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZW5kZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkRW50aXR5KGVudGl0eTogSUVudGl0eSk6IHZvaWQge1xuICAgICAgICB0aGlzLmVudGl0aWVzLnB1c2goZW50aXR5KTtcbiAgICAgICAgdGhpcy5zb3J0RW50aXRpZXMoKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc29ydEVudGl0aWVzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVudGl0aWVzLnNvcnQoKGE6IElFbnRpdHksIGI6IElFbnRpdHkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoYS5wcm9ncmFtLmlkID4gYi5wcm9ncmFtLmlkKSA/IDEgOiAtMTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbn1cbiJdfQ==