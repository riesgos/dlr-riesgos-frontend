"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const schema_1 = require("@schematics/angular/application/schema");
const path = require("path");
const collectionPath = require.resolve(path.join(__dirname, '../collection.json'));
describe('add-routing', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('@dlr-eoc/schematics', collectionPath);
    let appTree;
    const ngAddOptions = {
        project: 'ukisapp',
        addFiles: true,
        updateFiles: true
    };
    const workspaceOptions = {
        name: 'workspace',
        newProjectRoot: 'projects',
        version: '9.0.0',
    };
    const appOptions = {
        name: 'ukisapp',
        projectRoot: '',
        inlineStyle: false,
        inlineTemplate: false,
        routing: true,
        style: schema_1.Style.Css,
        skipTests: false
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner.runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions).toPromise();
        appTree = yield schematicRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree).toPromise();
    }));
    it('should include the angular project file', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield schematicRunner.runSchematicAsync('add-routing', ngAddOptions, appTree).toPromise();
        expect(tree.files.includes('/angular.json')).toBe(true);
    }));
    it('should add app files', () => __awaiter(void 0, void 0, void 0, function* () {
        const testFiles = [
            '/src/app/app.component.html',
            '/src/app/app-routing.module.ts',
            '/src/app/route-components/README.md',
            '/src/app/route-components/example-route/example-route.component.html',
            '/src/app/route-components/example-route/example-route.component.ts',
            '/src/app/route-components/example-route/example-route.component.scss'
        ];
        const tree = yield schematicRunner.runSchematicAsync('add-routing', ngAddOptions, appTree).toPromise();
        testFiles.every(f => {
            expect(tree.files).toContain(f);
        });
    }));
    it('should add Imports', () => __awaiter(void 0, void 0, void 0, function* () {
        const testImports = [
            'AppRoutingModule',
            'ExampleRouteComponent'
        ];
        const tree = yield schematicRunner.runSchematicAsync('add-routing', ngAddOptions, appTree).toPromise();
        const appModule = tree.readContent('/src/app/app.module.ts');
        testImports.every(i => {
            expect(appModule).toContain(i);
        });
    }));
});
//# sourceMappingURL=index_spec.js.map