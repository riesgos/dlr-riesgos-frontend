import { Component, ViewEncapsulation, Input, ViewChild } from '@angular/core';
import { MapState } from '@dlr-eoc/services-map-state';
import { skip } from 'rxjs/operators';
import { WmtsLayertype, WmsLayertype, CustomLayer, GeojsonLayertype, WfsLayertype } from '@dlr-eoc/services-layers';
import { getUid as olGetUid } from 'ol/util';
import olLayer from 'ol/layer/Layer';
import olLayerGroup from 'ol/layer/Group';
import Attribution from 'ol/control/Attribution';
import ScaleLine from 'ol/control/ScaleLine';
import Zoom from 'ol/control/Zoom';
import olMousePosition from 'ol/control/MousePosition';
import { toStringXY } from 'ol/coordinate';
import olFullScreen from 'ol/control/FullScreen';
import olOverviewMap from 'ol/control/OverviewMap';
import olTileLayer from 'ol/layer/Tile';
import olOSM from 'ol/source/OSM';
import olRotate from 'ol/control/Rotate';
import olRasterSource from 'ol/source/Raster';
import olSourceCluster from 'ol/source/Cluster';
import * as i0 from "@angular/core";
import * as i1 from "./map-ol.service";
import * as i2 from "@angular/common";
const ID_KEY = 'id';
export class MapOlComponent {
    constructor(mapSvc, ngZone) {
        this.mapSvc = mapSvc;
        this.ngZone = ngZone;
        this.subs = [];
        this.privMapwidth = 0;
        this.removePopupsOnMouseLeave = (evt) => {
            this.mapSvc.removeAllPopups((item) => {
                return item.get('addEvent') === 'pointermove';
            });
        };
    }
    get mapwidth() {
        return this.privMapwidth;
    }
    set mapwidth(width) {
        this.privMapwidth = width;
        this.map.updateSize();
    }
    /**
     * - subscribe to layers oninit so they get pulled after view init
     */
    ngOnInit() {
        /** Subscribe to mapStateSvc before map is created */
        this.subscribeToMapState();
        this.initMap();
        this.subscribeToLayers();
    }
    /**
     * - set target of ol map after angular has rendered the element
     * - then subscribe to map events
     */
    ngAfterViewInit() {
        this.map.setTarget(this.mapDivView.nativeElement);
        /** Get last state from mapStateSvc and set it, so a User can set the initial MapState in a component on ngOnInit */
        const oldMapState = this.mapStateSvc.getMapState().getValue();
        this.setMapState(oldMapState);
        /** Subscribe to map events when the map completely created  */
        this.subscribeToMapEvents();
        this.map.getTargetElement().addEventListener('mouseleave', this.removePopupsOnMouseLeave);
    }
    ngAfterViewChecked() {
        /**
         * - compare map size to update Map Size on container resize
         * - set Timeout to also resize map on route change
         */
        if (this.mapDivView) {
            const mapWidth = this.mapDivView.nativeElement.offsetWidth;
            if (mapWidth !== this.mapwidth) {
                this.ngZone.runOutsideAngular(() => {
                    setTimeout(() => {
                        this.mapwidth = mapWidth;
                    }, 100);
                });
            }
        }
    }
    ngOnDestroy() {
        this.subs.forEach(sub => sub.unsubscribe());
        if (this.map) {
            this.map.un('moveend', this.mapOnMoveend);
            this.map.un('click', this.mapOnClickMove);
            this.map.un('dblclick', this.mapOnDclick);
            this.map.getTargetElement().removeEventListener('mouseleave', this.removePopupsOnMouseLeave);
            this.map.getInteractions().forEach((i) => {
                this.map.removeInteraction(i);
            });
        }
    }
    addUpdateLayers(layers, filtertype, layersunderneath) {
        /** get all underneath layers for zIndex */
        let otherlayerslength = 0;
        layersunderneath.forEach(itemType => {
            otherlayerslength += this.mapSvc.getLayers(itemType).length;
        });
        /** if length of layers has changed add new layers */
        if (layers.length !== this.mapSvc.getLayers(filtertype).length) {
            this.mapSvc.setUkisLayers(layers, filtertype);
            // if layers underneath add thhen to the zIndex of layer
            if (otherlayerslength > 0) {
                for (const layer of layers) {
                    const ollayer = this.mapSvc.getLayerByKey({ key: ID_KEY, value: layer.id }, filtertype);
                    if (ollayer) {
                        if (ollayer.getZIndex() !== layers.indexOf(layer) + otherlayerslength) {
                            ollayer.setZIndex(layers.indexOf(layer) + otherlayerslength);
                            this.setZIndexForGroup(ollayer, layers, layer, otherlayerslength);
                        }
                    }
                }
            }
        }
        else {
            /** if layers already on the map -length not changed- update them */
            for (const layer of layers) {
                const ollayer = this.mapSvc.getLayerByKey({ key: ID_KEY, value: layer.id }, filtertype);
                if (ollayer) {
                    if (ollayer.getVisible() !== layer.visible) {
                        ollayer.setVisible(layer.visible);
                    }
                    if (ollayer.getOpacity() !== layer.opacity) {
                        ollayer.setOpacity(layer.opacity);
                    }
                    if (layer instanceof CustomLayer && ollayer instanceof olLayer) {
                        const newSource = layer.custom_layer.getSource();
                        const oldSource = ollayer.getSource();
                        if (newSource && olGetUid(oldSource) !== olGetUid(newSource)) {
                            ollayer.setSource(newSource);
                            // https://github.com/dlr-eoc/ukis-frontend-libraries/issues/100
                            if (oldSource instanceof olRasterSource) {
                                oldSource.dispose();
                            }
                        }
                    }
                    else if (layer instanceof CustomLayer && layer.custom_layer instanceof olLayerGroup && ollayer instanceof olLayerGroup) {
                        const newLayers = layer.custom_layer.getLayers().getArray();
                        const oldLayers = ollayer.getLayers().getArray();
                        /** assume the order and length of layers is not changing and no more grouping!!! */
                        oldLayers.forEach((l, i) => {
                            const newLayer = newLayers[i];
                            if (l instanceof olLayer && newLayer instanceof olLayer) {
                                const oldSource = l.getSource();
                                const newSource = newLayer.getSource();
                                if (newSource && olGetUid(oldSource) !== olGetUid(newSource)) {
                                    l.setSource(newSource);
                                }
                            }
                        });
                    }
                    if (otherlayerslength > 0) {
                        if (ollayer.getZIndex() !== layers.indexOf(layer) + otherlayerslength) {
                            ollayer.setZIndex(layers.indexOf(layer) + otherlayerslength);
                            this.setZIndexForGroup(ollayer, layers, layer, otherlayerslength);
                        }
                    }
                    else {
                        if (ollayer.getZIndex() !== layers.indexOf(layer)) {
                            ollayer.setZIndex(layers.indexOf(layer));
                            this.setZIndexForGroup(ollayer, layers, layer);
                        }
                    }
                    this.updateLayerParamsWith(ollayer, layer);
                }
            }
        }
    }
    /** addresses an issue in openlayers: https://github.com/openlayers/openlayers/issues/6654 */
    setZIndexForGroup(ollayer, layers, layer, otherlayerslength) {
        if (ollayer instanceof olLayerGroup) {
            ollayer.getLayers().forEach(l => {
                if (otherlayerslength) {
                    l.setZIndex(layers.indexOf(layer) + otherlayerslength);
                }
                else {
                    l.setZIndex(layers.indexOf(layer));
                }
            });
        }
    }
    updateLayerParamsWith(oldLayer, newLayer) {
        switch (newLayer.type) {
            case WmsLayertype:
                this.updateWmsLayerParamsWith(oldLayer, newLayer);
                break;
            case WmtsLayertype:
                this.updateWmtsLayerParamsWith(oldLayer, newLayer);
                break;
            case GeojsonLayertype:
                this.updateGeojsonLayerParamsWith(oldLayer, newLayer);
                break;
            case WfsLayertype:
                this.updateWfsLayerParamsWith(oldLayer, newLayer);
                break;
            default:
                break;
        }
    }
    updateWfsLayerParamsWith(oldLayer, newLayer) {
        // step 1: update style
        if (newLayer.options && newLayer.options.style !== oldLayer.getStyle()) {
            oldLayer.setStyle(newLayer.options.style);
        }
        // step 2: update source
        if (oldLayer.getSource().getUrl() !== newLayer.url) {
            oldLayer.getSource().setUrl(newLayer.url);
        }
    }
    /**
     * TODO: set all other props of GeoJsonLayer.options and GeoJsonLayer.cluster (see: IVectorLayerOptions)
     */
    updateGeojsonLayerParamsWith(oldLayer, newGeojsonLayer) {
        const oldSource = oldLayer.getSource();
        if (oldSource) {
            if (newGeojsonLayer.data) {
                const features = this.mapSvc.geoJsonToFeatures(newGeojsonLayer.data);
                if (oldSource instanceof olSourceCluster) {
                    const vectorSource = oldSource.getSource();
                    vectorSource.clear();
                    vectorSource.addFeatures(features);
                }
                else {
                    oldSource.clear();
                    oldSource.addFeatures(features);
                }
            }
            else if (newGeojsonLayer.url) {
                if (oldSource instanceof olSourceCluster) {
                    const vectorSource = oldSource.getSource();
                    vectorSource.setUrl(newGeojsonLayer.url);
                }
                else {
                    oldSource.setUrl(newGeojsonLayer.url);
                }
            }
            // 'distance' in also checks for 0 values
            if (typeof newGeojsonLayer?.cluster === 'object' && 'distance' in newGeojsonLayer.cluster && oldSource instanceof olSourceCluster) {
                oldSource.setDistance(newGeojsonLayer.cluster.distance);
            }
        }
        if (newGeojsonLayer?.options?.style) {
            oldLayer.setStyle(newGeojsonLayer.options.style);
        }
    }
    updateWmsLayerParamsWith(oldLayer, newWmsLayer) {
        if (oldLayer instanceof olLayer) {
            const source = oldLayer.getSource();
            const oldParams = source.getParams();
            const newParams = newWmsLayer.params;
            if (!this.shallowEqual(oldParams, newParams)) {
                oldLayer.getSource().updateParams(newParams);
            }
        }
    }
    updateWmtsLayerParamsWith(oldLayer, newWmtsLayer) {
        // contrary to a wms-source, a wmts-source has neither 'getParams' nor 'updateParams', so we need to do this manually.
        if (oldLayer instanceof olLayer) {
            const source = oldLayer.getSource();
            const oldStyle = source.getStyle();
            const oldFormat = source.getFormat();
            const oldVersion = source.getVersion();
            const oldMatrix = source.getMatrixSet();
            const newStyle = newWmtsLayer.params.style;
            const newFormat = newWmtsLayer.params.format;
            const newVersion = newWmtsLayer.params.version;
            const newMatrix = newWmtsLayer.params.matrixSetOptions.matrixSet;
            if (newStyle !== undefined && oldStyle !== newStyle
                || newFormat !== undefined && oldFormat !== newFormat
                || newVersion !== undefined && oldVersion !== newVersion
                || newMatrix !== undefined && oldMatrix !== newMatrix) {
                // console.log(oldStyle, oldFormat, oldVersion, oldMatrix)
                // console.log(newStyle, newFormat, newVersion, newMatrix)
                const olFiltertype = newWmtsLayer.filtertype.toLowerCase();
                // this.mapSvc.setUkisLayer(newWmtsLayer, olFiltertype);
                this.mapSvc.updateUkisLayer(newWmtsLayer, olFiltertype);
            }
        }
    }
    shallowEqual(a, b) {
        // Create arrays of property names
        const aProps = Object.getOwnPropertyNames(a);
        const bProps = Object.getOwnPropertyNames(b);
        // If number of properties is different,
        // objects are not equivalent
        if (aProps.length !== bProps.length) {
            return false;
        }
        for (const propName of aProps) {
            // If values of same property are not equal,
            // objects are not equivalent
            if (a[propName] !== b[propName]) {
                return false;
            }
        }
        // If we made it this far, objects
        // are considered equivalent
        return true;
    }
    addUpdateBaseLayers(layers) {
        /** if length of layers has changed add new layers */
        if (layers.length !== this.mapSvc.getLayers('baselayers').length) {
            // set only one visible at start
            const visiblelayers = layers.filter(l => l.visible === true);
            if (visiblelayers.length === 0) {
                layers[0].visible = true;
            }
            else if (visiblelayers.length > 1) {
                layers.forEach(l => l.visible = false);
                layers[0].visible = true;
            }
            this.mapSvc.setUkisLayers(layers, 'baselayers');
        }
        else {
            /** if layers already on the map -length not changed- update them */
            for (const layer of layers) {
                const bllayer = this.mapSvc.getLayerByKey({ key: ID_KEY, value: layer.id }, 'baselayers');
                if (bllayer) {
                    if (bllayer.getVisible() !== layer.visible) {
                        bllayer.setVisible(layer.visible);
                    }
                    if (bllayer.getZIndex() !== layers.indexOf(layer)) {
                        bllayer.setZIndex(layers.indexOf(layer));
                    }
                    if (bllayer.getOpacity() !== layer.opacity) {
                        bllayer.setOpacity(layer.opacity);
                    }
                }
            }
        }
    }
    subscribeToLayers() {
        // ----------------------
        // add/remove layers
        if (this.layersSvc) {
            const baselayersAddRemoveOn = this.layersSvc.getBaseLayers().subscribe(layers => this.addUpdateBaseLayers(layers));
            this.subs.push(baselayersAddRemoveOn);
            const onLayers = this.layersSvc.getLayers().subscribe(layers => this.addUpdateLayers(layers, 'layers', ['baselayers']));
            this.subs.push(onLayers);
            const onOverlays = this.layersSvc.getOverlays().subscribe(layers => this.addUpdateLayers(layers, 'overlays', ['baselayers', 'layers']));
            this.subs.push(onOverlays);
        }
    }
    setMapState(mapState) {
        const lastAction = this.mapStateSvc.getLastAction().getValue();
        if (mapState.options.notifier === 'user') {
            if (lastAction === 'setExtent') {
                this.mapSvc.setExtent(mapState.extent, true);
            }
            else if (lastAction === 'setState') {
                this.mapSvc.setZoom(mapState.zoom, mapState.options.notifier);
                this.mapSvc.setCenter([mapState.center.lon, mapState.center.lat], true);
            }
        }
        /* else if (mapState.options.notifier === 'map') {
          console.log("--------Map triggered mapState change", mapState);
        } */
    }
    subscribeToMapState() {
        if (this.mapStateSvc) {
            /** .pipe(skip(1)) skips the first, e.g. initial value of the BehaviorSubject!! -- https://www.learnrxjs.io/learn-rxjs/operators/filtering/skip#why-use-skip  */
            const mapStateOn = this.mapStateSvc.getMapState().pipe(skip(1)).subscribe(state => this.setMapState(state));
            this.subs.push(mapStateOn);
        }
    }
    subscribeToMapEvents() {
        this.mapOnMoveend = (evt) => {
            // const zoom = Math.round(this.mapSvc.getZoom());
            const zoom = this.mapSvc.getZoom();
            const center = this.mapSvc.getCenter(true);
            const extent = this.mapSvc.getCurrentExtent(true);
            // const newCenter = { lat: parseFloat(center[1].toFixed(6)), lon: parseFloat(center[0].toFixed(6)) };
            const newCenter = { lat: parseFloat(center[1]), lon: parseFloat(center[0]) };
            const ms = new MapState(zoom, newCenter, { notifier: 'map' }, extent);
            this.mapStateSvc.setMapState(ms);
        };
        this.map.on('moveend', this.mapOnMoveend);
        /** handle click and pointermove/mousemove */
        this.mapOnClickMove = (evt) => {
            this.mapSvc.layersOnMapEvent(evt);
        };
        this.map.on(['click', 'pointermove'], this.mapOnClickMove);
        /** handle double click */
        this.mapOnDclick = (evt) => {
            this.mapSvc.removeAllPopups();
        };
        this.map.on('dblclick', this.mapOnDclick);
    }
    initMap() {
        const olMapView = this.mapSvc.createMap();
        this.map = olMapView.map; //
        this.setControls();
        if (!this.layersSvc) {
            console.log('there is no layersSvc as defined!');
        }
        if (!this.mapStateSvc) {
            console.log('there is no mapStateSvc as defined!');
        }
    }
    setControls() {
        // add Control only if this functions is defined
        const tempControls = [];
        const oldControls = [];
        if (this.map) {
            const controlsArry = this.map.getControls().getArray();
            controlsArry.forEach(i => oldControls.push(i));
            /** fix: The Attribution Control is displayed twice #3 */
            this.map.getControls().clear();
        }
        if (this.controls && this.map) {
            if (this.controls.attribution !== false) {
                let attributionOptions = {
                    collapsible: true,
                    collapsed: false
                };
                if (typeof this.controls.attribution === 'object') {
                    attributionOptions = Object.assign(attributionOptions, this.controls.attribution);
                }
                const attribution = new Attribution(attributionOptions);
                tempControls.push(attribution);
            }
            if (this.controls.scaleLine) {
                let scaleLineOptions = {};
                if (typeof this.controls.scaleLine === 'object') {
                    scaleLineOptions = Object.assign(scaleLineOptions, this.controls.scaleLine);
                }
                const scaleLineControl = new ScaleLine(scaleLineOptions);
                tempControls.push(scaleLineControl);
            }
            if (this.controls.zoom !== false) {
                let zoomOptions = {};
                if (typeof this.controls.zoom === 'object') {
                    zoomOptions = Object.assign(zoomOptions, this.controls.zoom);
                }
                const zoomControl = new Zoom(zoomOptions);
                tempControls.push(zoomControl);
            }
            if (this.controls.mousePosition) {
                let mousePositionOptions = {
                    coordinateFormat: coordinate => {
                        return toStringXY(coordinate, 2);
                    },
                    projection: 'EPSG:4326'
                };
                if (typeof this.controls.mousePosition === 'object') {
                    mousePositionOptions = Object.assign(mousePositionOptions, this.controls.mousePosition);
                }
                const mousePosition = new olMousePosition(mousePositionOptions);
                tempControls.push(mousePosition);
            }
            if (this.controls.fullScreen) {
                let fullScreenOptions = {};
                if (typeof this.controls.fullScreen === 'object') {
                    fullScreenOptions = Object.assign(fullScreenOptions, this.controls.fullScreen);
                }
                const fullScreen = new olFullScreen(fullScreenOptions);
                tempControls.push(fullScreen);
            }
            if (this.controls.overviewMap) {
                const icon = document.createElement('spawn');
                icon.innerHTML = '<clr-icon shape="world"></clr-icon>';
                let overviewMapOptions = {
                    layers: [new olTileLayer({
                            source: new olOSM()
                        })],
                    label: icon
                };
                if (typeof this.controls.overviewMap === 'object') {
                    overviewMapOptions = Object.assign(overviewMapOptions, this.controls.overviewMap);
                }
                const overviewMap = new olOverviewMap(overviewMapOptions);
                tempControls.push(overviewMap);
            }
            if (this.controls.rotate) {
                let rotateOptions = {};
                if (typeof this.controls.rotate === 'object') {
                    rotateOptions = Object.assign(rotateOptions, this.controls.rotate);
                }
                const rotate = new olRotate(rotateOptions);
                tempControls.push(rotate);
            }
            if (tempControls.length) {
                /**
                 * check tempControls dose not include oldControls
                 * https://medium.com/@alvaro.saburido/set-theory-for-arrays-in-es6-eb2f20a61848#f22b
                 */
                const difference = oldControls.filter(x => !tempControls.includes(x));
                difference.forEach(i => tempControls.push(i));
                this.map.getControls().extend(tempControls);
            }
        }
    }
}
MapOlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapOlComponent, deps: [{ token: i1.MapOlService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
MapOlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: MapOlComponent, selector: "ukis-map-ol", inputs: { layersSvc: "layersSvc", mapStateSvc: ["mapState", "mapStateSvc"], controls: "controls" }, viewQueries: [{ propertyName: "mapDivView", first: true, predicate: ["mapDiv"], descendants: true }], ngImport: i0, template: "<div #mapDiv id=\"map\" ref=\"map\" class=\"map\">\n  <div *ngIf=\"controls && controls.crosshair\" id=\"crosshair\" class=\"crosshair\">+</div>\n</div>\n", styles: ["@charset \"UTF-8\";.ol-box{box-sizing:border-box;border-radius:2px;border:1.5px solid rgb(179,197,219);background-color:#fff6}.ol-mouse-position{top:8px;right:8px;position:absolute}.ol-scale-line{background:rgba(0,60,136,.3);border-radius:4px;bottom:8px;left:8px;padding:2px;position:absolute}.ol-scale-line-inner{border:1px solid #eee;border-top:none;color:#eee;font-size:10px;text-align:center;margin:1px;will-change:contents,width;transition:all .25s}.ol-scale-bar{position:absolute;bottom:8px;left:8px}.ol-scale-step-marker{width:1px;height:15px;background-color:#000;float:right;z-index:10}.ol-scale-step-text{position:absolute;bottom:-5px;font-size:12px;z-index:11;color:#000;text-shadow:-2px 0 #FFFFFF,0 2px #FFFFFF,2px 0 #FFFFFF,0 -2px #FFFFFF}.ol-scale-text{position:absolute;font-size:14px;text-align:center;bottom:25px;color:#000;text-shadow:-2px 0 #FFFFFF,0 2px #FFFFFF,2px 0 #FFFFFF,0 -2px #FFFFFF}.ol-scale-singlebar{position:relative;height:10px;z-index:9;box-sizing:border-box;border:1px solid black}.ol-unsupported{display:none}.ol-viewport,.ol-unselectable{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.ol-viewport canvas{all:unset}.ol-selectable{-webkit-touch-callout:default;-webkit-user-select:text;user-select:text}.ol-grabbing{cursor:grabbing}.ol-grab{cursor:move;cursor:grab}.ol-control{position:absolute;background-color:#fff6;border-radius:4px;padding:2px}.ol-control:hover{background-color:#fff9}.ol-zoom{top:.5em;left:.5em}.ol-rotate{top:.5em;right:.5em;transition:opacity .25s linear,visibility 0s linear}.ol-rotate.ol-hidden{opacity:0;visibility:hidden;transition:opacity .25s linear,visibility 0s linear .25s}.ol-zoom-extent{top:4.643em;left:.5em}.ol-full-screen{right:.5em;top:.5em}.ol-control button{display:block;margin:1px;padding:0;color:#fff;font-weight:700;text-decoration:none;font-size:inherit;text-align:center;height:1.375em;width:1.375em;line-height:.4em;background-color:#003c8880;border:none;border-radius:2px}.ol-control button::-moz-focus-inner{border:none;padding:0}.ol-zoom-extent button{line-height:1.4em}.ol-compass{display:block;font-weight:400;font-size:1.2em;will-change:transform}.ol-touch .ol-control button{font-size:1.5em}.ol-touch .ol-zoom-extent{top:5.5em}.ol-control button:hover,.ol-control button:focus{text-decoration:none;background-color:#003c88b3}.ol-zoom .ol-zoom-in{border-radius:2px 2px 0 0}.ol-zoom .ol-zoom-out{border-radius:0 0 2px 2px}.ol-attribution{text-align:right;bottom:.5em;right:.5em;max-width:calc(100% - 1.3em);display:flex;flex-flow:row-reverse;align-items:center}.ol-attribution a{color:#003c88b3;text-decoration:none}.ol-attribution ul{margin:0;padding:1px .5em;color:#000;text-shadow:0 0 2px #fff;font-size:12px}.ol-attribution li{display:inline;list-style:none}.ol-attribution li:not(:last-child):after{content:\" \"}.ol-attribution img{max-height:2em;max-width:inherit;vertical-align:middle}.ol-attribution button{flex-shrink:0}.ol-attribution.ol-collapsed ul{display:none}.ol-attribution:not(.ol-collapsed){background:rgba(255,255,255,.8)}.ol-attribution.ol-uncollapsible{bottom:0;right:0;border-radius:4px 0 0}.ol-attribution.ol-uncollapsible img{margin-top:-.2em;max-height:1.6em}.ol-attribution.ol-uncollapsible button{display:none}.ol-zoomslider{top:4.5em;left:.5em;height:200px}.ol-zoomslider button{position:relative;height:10px}.ol-touch .ol-zoomslider{top:5.5em}.ol-overviewmap{left:.5em;bottom:.5em}.ol-overviewmap.ol-uncollapsible{bottom:0;left:0;border-radius:0 4px 0 0}.ol-overviewmap .ol-overviewmap-map,.ol-overviewmap button{display:block}.ol-overviewmap .ol-overviewmap-map{border:1px solid #7b98bc;height:150px;margin:2px;width:150px}.ol-overviewmap:not(.ol-collapsed) button{bottom:2px;left:2px;position:absolute}.ol-overviewmap.ol-collapsed .ol-overviewmap-map,.ol-overviewmap.ol-uncollapsible button{display:none}.ol-overviewmap:not(.ol-collapsed){background:rgba(255,255,255,.8)}.ol-overviewmap-box{border:2px dotted rgba(0,60,136,.7)}.ol-overviewmap .ol-overviewmap-box:hover{cursor:move}:root{--ukis-crosshair-color: #ff0004;--ukis-popup-bg-color: rgb(238, 238, 238);--ukis-drop-shadow: drop-shadow(0 1px 4px rgba(0, 0, 0, .2));--ukis-ol-bbox-bg-color: rgba(255, 255, 255, .4);--ukis-ol-bbox-border-color: rgba(87, 87, 87, .4);--ukis-ol-overviewmap-left: .5em;--ukis-ol-overviewmap-bottom: 3em;--ukis-ol-control-bg-color: rgba(87, 87, 87, .6);--ukis-ol-control-border-color: rgba(87, 87, 87, .4)}.map{width:100%;height:100%;position:relative}.ol-popup{position:absolute;background-color:var(--ukis-popup-bg-color);filter:var(--ukis-drop-shadow);padding:15px;border-radius:2px;bottom:12px;left:-50px;min-width:280px;display:none;z-index:1000000}.ol-popup .ol-popup-closer{text-decoration:none;position:absolute;top:0px;right:8px;cursor:pointer}.ol-popup .ol-popup-closer:after{content:\"\\2716\"}.ol-popup:after,.ol-popup:before{top:100%;border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none}.ol-popup:after{border-top-color:var(--ukis-popup-bg-color);border-width:10px;left:48px;margin-left:-10px}.ol-popup:before{border-width:11px;left:48px;margin-left:-11px}.crosshair{top:50%;left:50%;font-size:large;color:var(--ukis-crosshair-color);z-index:1;position:absolute;cursor:default}.ol-control button{cursor:pointer;background-color:var(--ukis-ol-control-bg-color)}.ol-control button:focus{background-color:var(--ukis-ol-control-bg-color)}.ol-control button:hover{background-color:var(--ukis-ol-control-border-color)}.ol-scale-line{background:rgba(255,255,255,.4);line-height:1.375em}.ol-scale-line .ol-scale-line-inner{background:var(--ukis-ol-control-bg-color);border-color:var(--ukis-ol-control-bg-color)}.ol-attribution ul{font-size:.5rem}.ol-box{background-color:var(--ukis-ol-bbox-bg-color);border-color:var(--ukis-ol-bbox-border-color)!important}.ol-box.ol-drag-select{border-color:var(--clr-color-action-600, var(--fallback-color-no-clr))!important}.ol-overviewmap{left:var(--ukis-ol-overviewmap-left)!important;bottom:var(--ukis-ol-overviewmap-bottom)!important}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: MapOlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-map-ol', encapsulation: ViewEncapsulation.None, template: "<div #mapDiv id=\"map\" ref=\"map\" class=\"map\">\n  <div *ngIf=\"controls && controls.crosshair\" id=\"crosshair\" class=\"crosshair\">+</div>\n</div>\n", styles: ["@charset \"UTF-8\";.ol-box{box-sizing:border-box;border-radius:2px;border:1.5px solid rgb(179,197,219);background-color:#fff6}.ol-mouse-position{top:8px;right:8px;position:absolute}.ol-scale-line{background:rgba(0,60,136,.3);border-radius:4px;bottom:8px;left:8px;padding:2px;position:absolute}.ol-scale-line-inner{border:1px solid #eee;border-top:none;color:#eee;font-size:10px;text-align:center;margin:1px;will-change:contents,width;transition:all .25s}.ol-scale-bar{position:absolute;bottom:8px;left:8px}.ol-scale-step-marker{width:1px;height:15px;background-color:#000;float:right;z-index:10}.ol-scale-step-text{position:absolute;bottom:-5px;font-size:12px;z-index:11;color:#000;text-shadow:-2px 0 #FFFFFF,0 2px #FFFFFF,2px 0 #FFFFFF,0 -2px #FFFFFF}.ol-scale-text{position:absolute;font-size:14px;text-align:center;bottom:25px;color:#000;text-shadow:-2px 0 #FFFFFF,0 2px #FFFFFF,2px 0 #FFFFFF,0 -2px #FFFFFF}.ol-scale-singlebar{position:relative;height:10px;z-index:9;box-sizing:border-box;border:1px solid black}.ol-unsupported{display:none}.ol-viewport,.ol-unselectable{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.ol-viewport canvas{all:unset}.ol-selectable{-webkit-touch-callout:default;-webkit-user-select:text;user-select:text}.ol-grabbing{cursor:grabbing}.ol-grab{cursor:move;cursor:grab}.ol-control{position:absolute;background-color:#fff6;border-radius:4px;padding:2px}.ol-control:hover{background-color:#fff9}.ol-zoom{top:.5em;left:.5em}.ol-rotate{top:.5em;right:.5em;transition:opacity .25s linear,visibility 0s linear}.ol-rotate.ol-hidden{opacity:0;visibility:hidden;transition:opacity .25s linear,visibility 0s linear .25s}.ol-zoom-extent{top:4.643em;left:.5em}.ol-full-screen{right:.5em;top:.5em}.ol-control button{display:block;margin:1px;padding:0;color:#fff;font-weight:700;text-decoration:none;font-size:inherit;text-align:center;height:1.375em;width:1.375em;line-height:.4em;background-color:#003c8880;border:none;border-radius:2px}.ol-control button::-moz-focus-inner{border:none;padding:0}.ol-zoom-extent button{line-height:1.4em}.ol-compass{display:block;font-weight:400;font-size:1.2em;will-change:transform}.ol-touch .ol-control button{font-size:1.5em}.ol-touch .ol-zoom-extent{top:5.5em}.ol-control button:hover,.ol-control button:focus{text-decoration:none;background-color:#003c88b3}.ol-zoom .ol-zoom-in{border-radius:2px 2px 0 0}.ol-zoom .ol-zoom-out{border-radius:0 0 2px 2px}.ol-attribution{text-align:right;bottom:.5em;right:.5em;max-width:calc(100% - 1.3em);display:flex;flex-flow:row-reverse;align-items:center}.ol-attribution a{color:#003c88b3;text-decoration:none}.ol-attribution ul{margin:0;padding:1px .5em;color:#000;text-shadow:0 0 2px #fff;font-size:12px}.ol-attribution li{display:inline;list-style:none}.ol-attribution li:not(:last-child):after{content:\" \"}.ol-attribution img{max-height:2em;max-width:inherit;vertical-align:middle}.ol-attribution button{flex-shrink:0}.ol-attribution.ol-collapsed ul{display:none}.ol-attribution:not(.ol-collapsed){background:rgba(255,255,255,.8)}.ol-attribution.ol-uncollapsible{bottom:0;right:0;border-radius:4px 0 0}.ol-attribution.ol-uncollapsible img{margin-top:-.2em;max-height:1.6em}.ol-attribution.ol-uncollapsible button{display:none}.ol-zoomslider{top:4.5em;left:.5em;height:200px}.ol-zoomslider button{position:relative;height:10px}.ol-touch .ol-zoomslider{top:5.5em}.ol-overviewmap{left:.5em;bottom:.5em}.ol-overviewmap.ol-uncollapsible{bottom:0;left:0;border-radius:0 4px 0 0}.ol-overviewmap .ol-overviewmap-map,.ol-overviewmap button{display:block}.ol-overviewmap .ol-overviewmap-map{border:1px solid #7b98bc;height:150px;margin:2px;width:150px}.ol-overviewmap:not(.ol-collapsed) button{bottom:2px;left:2px;position:absolute}.ol-overviewmap.ol-collapsed .ol-overviewmap-map,.ol-overviewmap.ol-uncollapsible button{display:none}.ol-overviewmap:not(.ol-collapsed){background:rgba(255,255,255,.8)}.ol-overviewmap-box{border:2px dotted rgba(0,60,136,.7)}.ol-overviewmap .ol-overviewmap-box:hover{cursor:move}:root{--ukis-crosshair-color: #ff0004;--ukis-popup-bg-color: rgb(238, 238, 238);--ukis-drop-shadow: drop-shadow(0 1px 4px rgba(0, 0, 0, .2));--ukis-ol-bbox-bg-color: rgba(255, 255, 255, .4);--ukis-ol-bbox-border-color: rgba(87, 87, 87, .4);--ukis-ol-overviewmap-left: .5em;--ukis-ol-overviewmap-bottom: 3em;--ukis-ol-control-bg-color: rgba(87, 87, 87, .6);--ukis-ol-control-border-color: rgba(87, 87, 87, .4)}.map{width:100%;height:100%;position:relative}.ol-popup{position:absolute;background-color:var(--ukis-popup-bg-color);filter:var(--ukis-drop-shadow);padding:15px;border-radius:2px;bottom:12px;left:-50px;min-width:280px;display:none;z-index:1000000}.ol-popup .ol-popup-closer{text-decoration:none;position:absolute;top:0px;right:8px;cursor:pointer}.ol-popup .ol-popup-closer:after{content:\"\\2716\"}.ol-popup:after,.ol-popup:before{top:100%;border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none}.ol-popup:after{border-top-color:var(--ukis-popup-bg-color);border-width:10px;left:48px;margin-left:-10px}.ol-popup:before{border-width:11px;left:48px;margin-left:-11px}.crosshair{top:50%;left:50%;font-size:large;color:var(--ukis-crosshair-color);z-index:1;position:absolute;cursor:default}.ol-control button{cursor:pointer;background-color:var(--ukis-ol-control-bg-color)}.ol-control button:focus{background-color:var(--ukis-ol-control-bg-color)}.ol-control button:hover{background-color:var(--ukis-ol-control-border-color)}.ol-scale-line{background:rgba(255,255,255,.4);line-height:1.375em}.ol-scale-line .ol-scale-line-inner{background:var(--ukis-ol-control-bg-color);border-color:var(--ukis-ol-control-bg-color)}.ol-attribution ul{font-size:.5rem}.ol-box{background-color:var(--ukis-ol-bbox-bg-color);border-color:var(--ukis-ol-bbox-border-color)!important}.ol-box.ol-drag-select{border-color:var(--clr-color-action-600, var(--fallback-color-no-clr))!important}.ol-overviewmap{left:var(--ukis-ol-overviewmap-left)!important;bottom:var(--ukis-ol-overviewmap-bottom)!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MapOlService }, { type: i0.NgZone }]; }, propDecorators: { mapDivView: [{
                type: ViewChild,
                args: ['mapDiv']
            }], layersSvc: [{
                type: Input,
                args: ['layersSvc']
            }], mapStateSvc: [{
                type: Input,
                args: ['mapState']
            }], controls: [{
                type: Input,
                args: ['controls']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLW9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL21hcC1vbC9zcmMvbGliL21hcC1vbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tYXAtb2wvc3JjL2xpYi9tYXAtb2wuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxpQkFBaUIsRUFBRSxLQUFLLEVBQTJFLFNBQVMsRUFBc0IsTUFBTSxlQUFlLENBQUM7QUFLcEwsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR3ZELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0QyxPQUFPLEVBQWlCLGFBQWEsRUFBUyxZQUFZLEVBQXVCLFdBQVcsRUFBZSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUc1SyxPQUFPLEVBQUUsTUFBTSxJQUFJLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUc3QyxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLFdBQVcsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRCxPQUFPLFNBQVMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3QyxPQUFPLElBQUksTUFBTSxpQkFBaUIsQ0FBQztBQUVuQyxPQUFPLGVBQWUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sWUFBWSxNQUFNLHVCQUF1QixDQUFDO0FBRWpELE9BQU8sYUFBYSxNQUFNLHdCQUF3QixDQUFDO0FBQ25ELE9BQU8sV0FBVyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEtBQUssTUFBTSxlQUFlLENBQUM7QUFFbEMsT0FBTyxRQUFRLE1BQU0sbUJB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QUFDLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzdDO1NBQ0Y7SUFDSCxDQUFDOzsyR0E1ZlUsY0FBYzsrRkFBZCxjQUFjLDZQQ3JFM0IsNEpBR0E7MkZEa0VhLGNBQWM7a0JBTjFCLFNBQVM7K0JBQ0UsYUFBYSxpQkFHUixpQkFBaUIsQ0FBQyxJQUFJO3dIQUdoQixVQUFVO3NCQUE5QixTQUFTO3VCQUFDLFFBQVE7Z0JBRUMsU0FBUztzQkFBNUIsS0FBSzt1QkFBQyxXQUFXO2dCQUNDLFdBQVc7c0JBQTdCLEtBQUs7dUJBQUMsVUFBVTtnQkFDRSxRQUFRO3NCQUExQixLQUFLO3VCQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0LCBJbmplY3QsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5cblxuaW1wb3J0IHsgTWFwU3RhdGUgfSBmcm9tICdAZGxyLWVvYy9zZXJ2aWNlcy1tYXAtc3RhdGUnO1xuaW1wb3J0IHsgTWFwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGRsci1lb2Mvc2VydmljZXMtbWFwLXN0YXRlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1hcE9sU2VydmljZSwgVGdyb3VwZmlsdGVydHlwZSB9IGZyb20gJy4vbWFwLW9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5ZXJzU2VydmljZSwgV210c0xheWVydHlwZSwgTGF5ZXIsIFdtc0xheWVydHlwZSwgV210c0xheWVyLCBXbXNMYXllciwgQ3VzdG9tTGF5ZXIsIFZlY3RvckxheWVyLCBHZW9qc29uTGF5ZXJ0eXBlLCBXZnNMYXllcnR5cGUgfSBmcm9tICdAZGxyLWVvYy9zZXJ2aWNlcy1sYXllcnMnO1xuXG5pbXBvcnQgTWFwIGZyb20gJ29sL01hcCc7XG5pbXBvcnQgeyBnZXRVaWQgYXMgb2xHZXRVaWQgfSBmcm9tICdvbC91dGlsJztcblxuaW1wb3J0IG9sQmFzZUxheWVyIGZyb20gJ29sL2xheWVyL0Jhc2UnO1xuaW1wb3J0IG9sTGF5ZXIgZnJvbSAnb2wvbGF5ZXIvTGF5ZXInO1xuaW1wb3J0IG9sTGF5ZXJHcm91cCBmcm9tICdvbC9sYXllci9Hcm91cCc7XG5cbmltcG9ydCBBdHRyaWJ1dGlvbiBmcm9tICdvbC9jb250cm9sL0F0dHJpYnV0aW9uJztcbmltcG9ydCBTY2FsZUxpbmUgZnJvbSAnb2wvY29udHJvbC9TY2FsZUxpbmUnO1xuaW1wb3J0IFpvb20gZnJvbSAnb2wvY29udHJvbC9ab29tJztcblxuaW1wb3J0IG9sTW91c2VQb3NpdGlvbiBmcm9tICdvbC9jb250cm9sL01vdXNlUG9zaXRpb24nO1xuaW1wb3J0IHsgdG9TdHJpbmdYWSB9IGZyb20gJ29sL2Nvb3JkaW5hdGUnO1xuXG5pbXBvcnQgb2xGdWxsU2NyZWVuIGZyb20gJ29sL2NvbnRyb2wvRnVsbFNjcmVlbic7XG5cbmltcG9ydCBvbE92ZXJ2aWV3TWFwIGZyb20gJ29sL2NvbnRyb2wvT3ZlcnZpZXdNYXAnO1xuaW1wb3J0IG9sVGlsZUxheWVyIGZyb20gJ29sL2xheWVyL1RpbGUnO1xuaW1wb3J0IG9sT1NNIGZyb20gJ29sL3NvdXJjZS9PU00nO1xuXG5pbXBvcnQgb2xSb3RhdGUgZnJvbSAnb2wvY29udHJvbC9Sb3RhdGUnO1xuaW1wb3J0IG9sTWFwQnJvd3NlckV2ZW50IGZyb20gJ29sL01hcEJyb3dzZXJFdmVudCc7XG5pbXBvcnQgb2xNYXBFdmVudCBmcm9tICdvbC9NYXBFdmVudCc7XG5pbXBvcnQgeyBDb250cm9sIGFzIG9sQ29udHJvbCB9IGZyb20gJ29sL2NvbnRyb2wnO1xuaW1wb3J0IG9sVmVjdG9yU291cmNlIGZyb20gJ29sL3NvdXJjZS9WZWN0b3InO1xuaW1wb3J0IG9sUmFzdGVyU291cmNlIGZyb20gJ29sL3NvdXJjZS9SYXN0ZXInO1xuaW1wb3J0IG9sR2VvbWV0cnkgZnJvbSAnb2wvZ2VvbS9HZW9tZXRyeSc7XG5pbXBvcnQgb2xTb3VyY2VDbHVzdGVyIGZyb20gJ29sL3NvdXJjZS9DbHVzdGVyJztcbmltcG9ydCBvbFZlY3RvckxheWVyIGZyb20gJ29sL2xheWVyL1ZlY3Rvcic7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJTWFwQ29udHJvbHMge1xuICAvKiogQHNlZSAoQXR0cmlidXRpb24gb3B0aW9ucykgaHR0cHM6Ly9naXRodWIuY29tL29wZW5sYXllcnMvb3BlbmxheWVycy9ibG9iL3Y2LjIuMS9zcmMvb2wvY29udHJvbC9BdHRyaWJ1dGlvbi5qcyNMMTMgKi9cbiAgYXR0cmlidXRpb24/OiBib29sZWFuIHwgb2JqZWN0O1xuICAvKiogQHNlZSAoU2NhbGVMaW5lIG9wdGlvbnMpIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVubGF5ZXJzL29wZW5sYXllcnMvYmxvYi92Ni4yLjEvc3JjL29sL2NvbnRyb2wvU2NhbGVMaW5lLmpzI0wzOSAqL1xuICBzY2FsZUxpbmU/OiBib29sZWFuIHwgb2JqZWN0O1xuICAvKiogQHNlZSAoWm9vbSBvcHRpb25zKSBodHRwczovL2dpdGh1Yi5jb20vb3BlbmxheWVycy9vcGVubGF5ZXJzL2Jsb2IvdjYuMi4xL3NyYy9vbC9jb250cm9sL1pvb20uanMjTDExICovXG4gIHpvb20/OiBib29sZWFuIHwgb2JqZWN0O1xuICBjcm9zc2hhaXI/OiBib29sZWFuO1xuICAvKiogQHNlZSAoRnVsbFNjcmVlbiBvcHRpb25zKSBodHRwczovL2dpdGh1Yi5jb20vb3BlbmxheWVycy9vcGVubGF5ZXJzL2Jsb2IvdjYuMi4xL3NyYy9vbC9jb250cm9sL0Z1bGxTY3JlZW4uanMjTDEzICovXG4gIGZ1bGxTY3JlZW4/OiBib29sZWFuIHwgb2JqZWN0O1xuICAvKiogQHNlZSAoTW91c2VQb3NpdGlvbiBvcHRpb25zKSBodHRwczovL2dpdGh1Yi5jb20vb3BlbmxheWVycy9vcGVubGF5ZXJzL2Jsb2IvdjYuMi4xL3NyYy9vbC9jb250cm9sL01vdXNlUG9zaXRpb24uanMjTDI1ICovXG4gIG1vdXNlUG9zaXRpb24/OiBib29sZWFuIHwgb2JqZWN0O1xuICAvKiogQHNlZSAoT3ZlcnZpZXdNYXAgb3B0aW9ucykgaHR0cHM6Ly9naXRodWIuY29tL29wZW5sYXllcnMvb3BlbmxheWVycy9ibG9iL3Y2LjIuMS9zcmMvb2wvY29udHJvbC9PdmVydmlld01hcC5qcyNMNDYgKi9cbiAgb3ZlcnZpZXdNYXA/OiBib29sZWFuIHwgb2JqZWN0O1xuICAvKiogQHNlZSAoUm90YXRlIG9wdGlvbnMpIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVubGF5ZXJzL29wZW5sYXllcnMvYmxvYi92Ni4yLjEvc3JjL29sL2NvbnRyb2wvUm90YXRlLmpzI0wxMSAqL1xuICByb3RhdGU/OiBib29sZWFuIHwgb2JqZWN0O1xufVxuXG5jb25zdCBJRF9LRVkgPSAnaWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd1a2lzLW1hcC1vbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXAtb2wuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9tYXAtb2wuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBNYXBPbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZCgnbWFwRGl2JykgbWFwRGl2VmlldzogRWxlbWVudFJlZjtcblxuICBASW5wdXQoJ2xheWVyc1N2YycpIGxheWVyc1N2YzogTGF5ZXJzU2VydmljZTtcbiAgQElucHV0KCdtYXBTdGF0ZScpIG1hcFN0YXRlU3ZjOiBNYXBTdGF0ZVNlcnZpY2U7XG4gIEBJbnB1dCgnY29udHJvbHMnKSBjb250cm9sczogSU1hcENvbnRyb2xzO1xuXG4gIG1hcDogTWFwO1xuICBzdWJzOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICBtYXBPbk1vdmVlbmQ7XG4gIG1hcE9uQ2xpY2tNb3ZlO1xuICBtYXBPbkRjbGljaztcblxuICBwcml2YXRlIHByaXZNYXB3aWR0aCA9IDA7XG4gIHByaXZhdGUgZ2V0IG1hcHdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLnByaXZNYXB3aWR0aDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0IG1hcHdpZHRoKHdpZHRoKSB7XG4gICAgdGhpcy5wcml2TWFwd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLm1hcC51cGRhdGVTaXplKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1hcFN2YzogTWFwT2xTZXJ2aWNlLCBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XG4gIH1cbiAgLyoqXG4gICAqIC0gc3Vic2NyaWJlIHRvIGxheWVycyBvbmluaXQgc28gdGhleSBnZXQgcHVsbGVkIGFmdGVyIHZpZXcgaW5pdFxuICAgKi9cbiAgbmdPbkluaXQoKSB7XG4gICAgLyoqIFN1YnNjcmliZSB0byBtYXBTdGF0ZVN2YyBiZWZvcmUgbWFwIGlzIGNyZWF0ZWQgKi9cbiAgICB0aGlzLnN1YnNjcmliZVRvTWFwU3RhdGUoKTtcbiAgICB0aGlzLmluaXRNYXAoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvTGF5ZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogLSBzZXQgdGFyZ2V0IG9mIG9sIG1hcCBhZnRlciBhbmd1bGFyIGhhcyByZW5kZXJlZCB0aGUgZWxlbWVudFxuICAgKiAtIHRoZW4gc3Vic2NyaWJlIHRvIG1hcCBldmVudHNcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLm1hcC5zZXRUYXJnZXQodGhpcy5tYXBEaXZWaWV3Lm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgLyoqIEdldCBsYXN0IHN0YXRlIGZyb20gbWFwU3RhdGVTdmMgYW5kIHNldCBpdCwgc28gYSBVc2VyIGNhbiBzZXQgdGhlIGluaXRpYWwgTWFwU3RhdGUgaW4gYSBjb21wb25lbnQgb24gbmdPbkluaXQgKi9cbiAgICBjb25zdCBvbGRNYXBTdGF0ZSA9IHRoaXMubWFwU3RhdGVTdmMuZ2V0TWFwU3RhdGUoKS5nZXRWYWx1ZSgpO1xuICAgIHRoaXMuc2V0TWFwU3RhdGUob2xkTWFwU3RhdGUpO1xuXG4gICAgLyoqIFN1YnNjcmliZSB0byBtYXAgZXZlbnRzIHdoZW4gdGhlIG1hcCBjb21wbGV0ZWx5IGNyZWF0ZWQgICovXG4gICAgdGhpcy5zdWJzY3JpYmVUb01hcEV2ZW50cygpO1xuICAgIHRoaXMubWFwLmdldFRhcmdldEVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5yZW1vdmVQb3B1cHNPbk1vdXNlTGVhdmUpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIC8qKlxuICAgICAqIC0gY29tcGFyZSBtYXAgc2l6ZSB0byB1cGRhdGUgTWFwIFNpemUgb24gY29udGFpbmVyIHJlc2l6ZVxuICAgICAqIC0gc2V0IFRpbWVvdXQgdG8gYWxzbyByZXNpemUgbWFwIG9uIHJvdXRlIGNoYW5nZVxuICAgICAqL1xuICAgIGlmICh0aGlzLm1hcERpdlZpZXcpIHtcbiAgICAgIGNvbnN0IG1hcFdpZHRoID0gdGhpcy5tYXBEaXZWaWV3Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICBpZiAobWFwV2lkdGggIT09IHRoaXMubWFwd2lkdGgpIHtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXB3aWR0aCA9IG1hcFdpZHRoO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vicy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gICAgaWYgKHRoaXMubWFwKSB7XG4gICAgICB0aGlzLm1hcC51bignbW92ZWVuZCcsIHRoaXMubWFwT25Nb3ZlZW5kKTtcbiAgICAgIHRoaXMubWFwLnVuKCdjbGljaycsIHRoaXMubWFwT25DbGlja01vdmUpO1xuICAgICAgdGhpcy5tYXAudW4oJ2RibGNsaWNrJywgdGhpcy5tYXBPbkRjbGljayk7XG4gICAgICB0aGlzLm1hcC5nZXRUYXJnZXRFbGVtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMucmVtb3ZlUG9wdXBzT25Nb3VzZUxlYXZlKTtcbiAgICAgIHRoaXMubWFwLmdldEludGVyYWN0aW9ucygpLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgdGhpcy5tYXAucmVtb3ZlSW50ZXJhY3Rpb24oaSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVBvcHVwc09uTW91c2VMZWF2ZSA9IChldnQpID0+IHtcbiAgICB0aGlzLm1hcFN2Yy5yZW1vdmVBbGxQb3B1cHMoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBpdGVtLmdldCgnYWRkRXZlbnQnKSA9PT0gJ3BvaW50ZXJtb3ZlJztcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVXBkYXRlTGF5ZXJzKGxheWVyczogTGF5ZXJbXSwgZmlsdGVydHlwZTogVGdyb3VwZmlsdGVydHlwZSwgbGF5ZXJzdW5kZXJuZWF0aDogQXJyYXk8VGdyb3VwZmlsdGVydHlwZT4pIHtcbiAgICAvKiogZ2V0IGFsbCB1bmRlcm5lYXRoIGxheWVycyBmb3IgekluZGV4ICovXG4gICAgbGV0IG90aGVybGF5ZXJzbGVuZ3RoID0gMDtcbiAgICBsYXllcnN1bmRlcm5lYXRoLmZvckVhY2goaXRlbVR5cGUgPT4ge1xuICAgICAgb3RoZXJsYXllcnNsZW5ndGggKz0gdGhpcy5tYXBTdmMuZ2V0TGF5ZXJzKGl0ZW1UeXBlKS5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICAvKiogaWYgbGVuZ3RoIG9mIGxheWVycyBoYXMgY2hhbmdlZCBhZGQgbmV3IGxheWVycyAqL1xuICAgIGlmIChsYXllcnMubGVuZ3RoICE9PSB0aGlzLm1hcFN2Yy5nZXRMYXllcnMoZmlsdGVydHlwZSkubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcFN2Yy5zZXRVa2lzTGF5ZXJzKGxheWVycywgZmlsdGVydHlwZSk7XG4gICAgICAvLyBpZiBsYXllcnMgdW5kZXJuZWF0aCBhZGQgdGhoZW4gdG8gdGhlIHpJbmRleCBvZiBsYXllclxuICAgICAgaWYgKG90aGVybGF5ZXJzbGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVycykge1xuICAgICAgICAgIGNvbnN0IG9sbGF5ZXIgPSB0aGlzLm1hcFN2Yy5nZXRMYXllckJ5S2V5KHsga2V5OiBJRF9LRVksIHZhbHVlOiBsYXllci5pZCB9LCBmaWx0ZXJ0eXBlKTtcbiAgICAgICAgICBpZiAob2xsYXllcikge1xuICAgICAgICAgICAgaWYgKG9sbGF5ZXIuZ2V0WkluZGV4KCkgIT09IGxheWVycy5pbmRleE9mKGxheWVyKSArIG90aGVybGF5ZXJzbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG9sbGF5ZXIuc2V0WkluZGV4KGxheWVycy5pbmRleE9mKGxheWVyKSArIG90aGVybGF5ZXJzbGVuZ3RoKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRaSW5kZXhGb3JHcm91cChvbGxheWVyLCBsYXllcnMsIGxheWVyLCBvdGhlcmxheWVyc2xlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBpZiBsYXllcnMgYWxyZWFkeSBvbiB0aGUgbWFwIC1sZW5ndGggbm90IGNoYW5nZWQtIHVwZGF0ZSB0aGVtICovXG4gICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVycykge1xuICAgICAgICBjb25zdCBvbGxheWVyID0gdGhpcy5tYXBTdmMuZ2V0TGF5ZXJCeUtleSh7IGtleTogSURfS0VZLCB2YWx1ZTogbGF5ZXIuaWQgfSwgZmlsdGVydHlwZSkgYXMgb2xCYXNlTGF5ZXIgfCBvbExheWVyPGFueT4gfCBvbExheWVyR3JvdXA7XG4gICAgICAgIGlmIChvbGxheWVyKSB7XG4gICAgICAgICAgaWYgKG9sbGF5ZXIuZ2V0VmlzaWJsZSgpICE9PSBsYXllci52aXNpYmxlKSB7XG4gICAgICAgICAgICBvbGxheWVyLnNldFZpc2libGUobGF5ZXIudmlzaWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvbGxheWVyLmdldE9wYWNpdHkoKSAhPT0gbGF5ZXIub3BhY2l0eSkge1xuICAgICAgICAgICAgb2xsYXllci5zZXRPcGFjaXR5KGxheWVyLm9wYWNpdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGF5ZXIgaW5zdGFuY2VvZiBDdXN0b21MYXllciAmJiBvbGxheWVyIGluc3RhbmNlb2Ygb2xMYXllcikge1xuICAgICAgICAgICAgY29uc3QgbmV3U291cmNlID0gbGF5ZXIuY3VzdG9tX2xheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgY29uc3Qgb2xkU291cmNlID0gb2xsYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgIGlmIChuZXdTb3VyY2UgJiYgb2xHZXRVaWQob2xkU291cmNlKSAhPT0gb2xHZXRVaWQobmV3U291cmNlKSkge1xuICAgICAgICAgICAgICBvbGxheWVyLnNldFNvdXJjZShuZXdTb3VyY2UpO1xuICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGxyLWVvYy91a2lzLWZyb250ZW5kLWxpYnJhcmllcy9pc3N1ZXMvMTAwXG4gICAgICAgICAgICAgIGlmKG9sZFNvdXJjZSBpbnN0YW5jZW9mIG9sUmFzdGVyU291cmNlKXtcbiAgICAgICAgICAgICAgICBvbGRTb3VyY2UuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXllciBpbnN0YW5jZW9mIEN1c3RvbUxheWVyICYmIGxheWVyLmN1c3RvbV9sYXllciBpbnN0YW5jZW9mIG9sTGF5ZXJHcm91cCAmJiBvbGxheWVyIGluc3RhbmNlb2Ygb2xMYXllckdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdMYXllcnMgPSBsYXllci5jdXN0b21fbGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKTtcbiAgICAgICAgICAgIGNvbnN0IG9sZExheWVycyA9IG9sbGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKTtcblxuICAgICAgICAgICAgLyoqIGFzc3VtZSB0aGUgb3JkZXIgYW5kIGxlbmd0aCBvZiBsYXllcnMgaXMgbm90IGNoYW5naW5nIGFuZCBubyBtb3JlIGdyb3VwaW5nISEhICovXG4gICAgICAgICAgICBvbGRMYXllcnMuZm9yRWFjaCgobCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBuZXdMYXllciA9IG5ld0xheWVyc1tpXTtcbiAgICAgICAgICAgICAgaWYgKGwgaW5zdGFuY2VvZiBvbExheWVyICYmIG5ld0xheWVyIGluc3RhbmNlb2Ygb2xMYXllcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZFNvdXJjZSA9IGwuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U291cmNlID0gbmV3TGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1NvdXJjZSAmJiBvbEdldFVpZChvbGRTb3VyY2UpICE9PSBvbEdldFVpZChuZXdTb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICBsLnNldFNvdXJjZShuZXdTb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvdGhlcmxheWVyc2xlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChvbGxheWVyLmdldFpJbmRleCgpICE9PSBsYXllcnMuaW5kZXhPZihsYXllcikgKyBvdGhlcmxheWVyc2xlbmd0aCkge1xuICAgICAgICAgICAgICBvbGxheWVyLnNldFpJbmRleChsYXllcnMuaW5kZXhPZihsYXllcikgKyBvdGhlcmxheWVyc2xlbmd0aCk7XG4gICAgICAgICAgICAgIHRoaXMuc2V0WkluZGV4Rm9yR3JvdXAob2xsYXllciwgbGF5ZXJzLCBsYXllciwgb3RoZXJsYXllcnNsZW5ndGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvbGxheWVyLmdldFpJbmRleCgpICE9PSBsYXllcnMuaW5kZXhPZihsYXllcikpIHtcbiAgICAgICAgICAgICAgb2xsYXllci5zZXRaSW5kZXgobGF5ZXJzLmluZGV4T2YobGF5ZXIpKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRaSW5kZXhGb3JHcm91cChvbGxheWVyLCBsYXllcnMsIGxheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy51cGRhdGVMYXllclBhcmFtc1dpdGgob2xsYXllciBhcyBvbExheWVyPGFueT4sIGxheWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBhZGRyZXNzZXMgYW4gaXNzdWUgaW4gb3BlbmxheWVyczogaHR0cHM6Ly9naXRodWIuY29tL29wZW5sYXllcnMvb3BlbmxheWVycy9pc3N1ZXMvNjY1NCAqL1xuICBwcml2YXRlIHNldFpJbmRleEZvckdyb3VwKG9sbGF5ZXIsIGxheWVyczogTGF5ZXJbXSwgbGF5ZXI6IExheWVyLCBvdGhlcmxheWVyc2xlbmd0aD86IG51bWJlcikge1xuICAgIGlmIChvbGxheWVyIGluc3RhbmNlb2Ygb2xMYXllckdyb3VwKSB7XG4gICAgICAob2xsYXllciBhcyBvbExheWVyR3JvdXApLmdldExheWVycygpLmZvckVhY2gobCA9PiB7XG4gICAgICAgIGlmIChvdGhlcmxheWVyc2xlbmd0aCkge1xuICAgICAgICAgIGwuc2V0WkluZGV4KGxheWVycy5pbmRleE9mKGxheWVyKSArIG90aGVybGF5ZXJzbGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsLnNldFpJbmRleChsYXllcnMuaW5kZXhPZihsYXllcikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUxheWVyUGFyYW1zV2l0aChvbGRMYXllcjogb2xMYXllcjxhbnk+LCBuZXdMYXllcjogTGF5ZXIpOiB2b2lkIHtcbiAgICBzd2l0Y2ggKG5ld0xheWVyLnR5cGUpIHtcbiAgICAgIGNhc2UgV21zTGF5ZXJ0eXBlOlxuICAgICAgICB0aGlzLnVwZGF0ZVdtc0xheWVyUGFyYW1zV2l0aChvbGRMYXllciwgbmV3TGF5ZXIgYXMgV21zTGF5ZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgV210c0xheWVydHlwZTpcbiAgICAgICAgdGhpcy51cGRhdGVXbXRzTGF5ZXJQYXJhbXNXaXRoKG9sZExheWVyLCBuZXdMYXllciBhcyBXbXRzTGF5ZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgR2VvanNvbkxheWVydHlwZTpcbiAgICAgICAgdGhpcy51cGRhdGVHZW9qc29uTGF5ZXJQYXJhbXNXaXRoKG9sZExheWVyIGFzIGFueSwgbmV3TGF5ZXIgYXMgVmVjdG9yTGF5ZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgV2ZzTGF5ZXJ0eXBlOlxuICAgICAgICB0aGlzLnVwZGF0ZVdmc0xheWVyUGFyYW1zV2l0aChvbGRMYXllciBhcyBhbnksIG5ld0xheWVyIGFzIFZlY3RvckxheWVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVdmc0xheWVyUGFyYW1zV2l0aChvbGRMYXllcjogb2xWZWN0b3JMYXllcjxvbFZlY3RvclNvdXJjZTxvbEdlb21ldHJ5Pj4sIG5ld0xheWVyOiBWZWN0b3JMYXllcikge1xuXG4gICAgLy8gc3RlcCAxOiB1cGRhdGUgc3R5bGVcbiAgICBpZiAobmV3TGF5ZXIub3B0aW9ucyAmJiBuZXdMYXllci5vcHRpb25zLnN0eWxlICE9PSBvbGRMYXllci5nZXRTdHlsZSgpKSB7XG4gICAgICBvbGRMYXllci5zZXRTdHlsZShuZXdMYXllci5vcHRpb25zLnN0eWxlKTtcbiAgICB9XG5cbiAgICAvLyBzdGVwIDI6IHVwZGF0ZSBzb3VyY2VcbiAgICBpZiAob2xkTGF5ZXIuZ2V0U291cmNlKCkuZ2V0VXJsKCkgIT09IG5ld0xheWVyLnVybCkge1xuICAgICAgb2xkTGF5ZXIuZ2V0U291cmNlKCkuc2V0VXJsKG5ld0xheWVyLnVybCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IHNldCBhbGwgb3RoZXIgcHJvcHMgb2YgR2VvSnNvbkxheWVyLm9wdGlvbnMgYW5kIEdlb0pzb25MYXllci5jbHVzdGVyIChzZWU6IElWZWN0b3JMYXllck9wdGlvbnMpXG4gICAqL1xuICB1cGRhdGVHZW9qc29uTGF5ZXJQYXJhbXNXaXRoKG9sZExheWVyOiBvbFZlY3RvckxheWVyPG9sVmVjdG9yU291cmNlPG9sR2VvbWV0cnk+PiwgbmV3R2VvanNvbkxheWVyOiBWZWN0b3JMYXllcikge1xuICAgIGNvbnN0IG9sZFNvdXJjZSA9IG9sZExheWVyLmdldFNvdXJjZSgpO1xuICAgIGlmIChvbGRTb3VyY2UpIHtcbiAgICAgIGlmIChuZXdHZW9qc29uTGF5ZXIuZGF0YSkge1xuICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMubWFwU3ZjLmdlb0pzb25Ub0ZlYXR1cmVzKG5ld0dlb2pzb25MYXllci5kYXRhKVxuICAgICAgICBpZiAob2xkU291cmNlIGluc3RhbmNlb2Ygb2xTb3VyY2VDbHVzdGVyKSB7XG4gICAgICAgICAgY29uc3QgdmVjdG9yU291cmNlID0gb2xkU291cmNlLmdldFNvdXJjZSgpO1xuICAgICAgICAgIHZlY3RvclNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgIHZlY3RvclNvdXJjZS5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2xkU291cmNlLmNsZWFyKCk7XG4gICAgICAgICAgb2xkU291cmNlLmFkZEZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdHZW9qc29uTGF5ZXIudXJsKSB7XG4gICAgICAgIGlmIChvbGRTb3VyY2UgaW5zdGFuY2VvZiBvbFNvdXJjZUNsdXN0ZXIpIHtcbiAgICAgICAgICBjb25zdCB2ZWN0b3JTb3VyY2UgPSBvbGRTb3VyY2UuZ2V0U291cmNlKCk7XG4gICAgICAgICAgdmVjdG9yU291cmNlLnNldFVybChuZXdHZW9qc29uTGF5ZXIudXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbGRTb3VyY2Uuc2V0VXJsKG5ld0dlb2pzb25MYXllci51cmwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vICdkaXN0YW5jZScgaW4gYWxzbyBjaGVja3MgZm9yIDAgdmFsdWVzXG4gICAgICBpZiAodHlwZW9mIG5ld0dlb2pzb25MYXllcj8uY2x1c3RlciA9PT0gJ29iamVjdCcgJiYgJ2Rpc3RhbmNlJyBpbiBuZXdHZW9qc29uTGF5ZXIuY2x1c3RlciAmJiBvbGRTb3VyY2UgaW5zdGFuY2VvZiBvbFNvdXJjZUNsdXN0ZXIpIHtcbiAgICAgICAgb2xkU291cmNlLnNldERpc3RhbmNlKG5ld0dlb2pzb25MYXllci5jbHVzdGVyLmRpc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3R2VvanNvbkxheWVyPy5vcHRpb25zPy5zdHlsZSkge1xuICAgICAgb2xkTGF5ZXIuc2V0U3R5bGUobmV3R2VvanNvbkxheWVyLm9wdGlvbnMuc3R5bGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlV21zTGF5ZXJQYXJhbXNXaXRoKG9sZExheWVyOiBvbExheWVyPGFueT4sIG5ld1dtc0xheWVyOiBXbXNMYXllcik6IHZvaWQge1xuICAgIGlmIChvbGRMYXllciBpbnN0YW5jZW9mIG9sTGF5ZXIpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IG9sZExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgY29uc3Qgb2xkUGFyYW1zID0gc291cmNlLmdldFBhcmFtcygpO1xuICAgICAgY29uc3QgbmV3UGFyYW1zID0gbmV3V21zTGF5ZXIucGFyYW1zO1xuICAgICAgaWYgKCF0aGlzLnNoYWxsb3dFcXVhbChvbGRQYXJhbXMsIG5ld1BhcmFtcykpIHtcbiAgICAgICAgb2xkTGF5ZXIuZ2V0U291cmNlKCkudXBkYXRlUGFyYW1zKG5ld1BhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVXbXRzTGF5ZXJQYXJhbXNXaXRoKG9sZExheWVyOiBvbExheWVyPGFueT4sIG5ld1dtdHNMYXllcjogV210c0xheWVyKTogdm9pZCB7XG4gICAgLy8gY29udHJhcnkgdG8gYSB3bXMtc291cmNlLCBhIHdtdHMtc291cmNlIGhhcyBuZWl0aGVyICdnZXRQYXJhbXMnIG5vciAndXBkYXRlUGFyYW1zJywgc28gd2UgbmVlZCB0byBkbyB0aGlzIG1hbnVhbGx5LlxuICAgIGlmIChvbGRMYXllciBpbnN0YW5jZW9mIG9sTGF5ZXIpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IG9sZExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgY29uc3Qgb2xkU3R5bGUgPSBzb3VyY2UuZ2V0U3R5bGUoKTtcbiAgICAgIGNvbnN0IG9sZEZvcm1hdCA9IHNvdXJjZS5nZXRGb3JtYXQoKTtcbiAgICAgIGNvbnN0IG9sZFZlcnNpb24gPSBzb3VyY2UuZ2V0VmVyc2lvbigpO1xuICAgICAgY29uc3Qgb2xkTWF0cml4ID0gc291cmNlLmdldE1hdHJpeFNldCgpO1xuICAgICAgY29uc3QgbmV3U3R5bGUgPSBuZXdXbXRzTGF5ZXIucGFyYW1zLnN0eWxlO1xuICAgICAgY29uc3QgbmV3Rm9ybWF0ID0gbmV3V210c0xheWVyLnBhcmFtcy5mb3JtYXQ7XG4gICAgICBjb25zdCBuZXdWZXJzaW9uID0gbmV3V210c0xheWVyLnBhcmFtcy52ZXJzaW9uO1xuICAgICAgY29uc3QgbmV3TWF0cml4ID0gbmV3V210c0xheWVyLnBhcmFtcy5tYXRyaXhTZXRPcHRpb25zLm1hdHJpeFNldDtcbiAgICAgIGlmIChuZXdTdHlsZSAhPT0gdW5kZWZpbmVkICYmIG9sZFN0eWxlICE9PSBuZXdTdHlsZVxuICAgICAgICB8fCBuZXdGb3JtYXQgIT09IHVuZGVmaW5lZCAmJiBvbGRGb3JtYXQgIT09IG5ld0Zvcm1hdFxuICAgICAgICB8fCBuZXdWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgb2xkVmVyc2lvbiAhPT0gbmV3VmVyc2lvblxuICAgICAgICB8fCBuZXdNYXRyaXggIT09IHVuZGVmaW5lZCAmJiBvbGRNYXRyaXggIT09IG5ld01hdHJpeCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhvbGRTdHlsZSwgb2xkRm9ybWF0LCBvbGRWZXJzaW9uLCBvbGRNYXRyaXgpXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld1N0eWxlLCBuZXdGb3JtYXQsIG5ld1ZlcnNpb24sIG5ld01hdHJpeClcbiAgICAgICAgY29uc3Qgb2xGaWx0ZXJ0eXBlID0gbmV3V210c0xheWVyLmZpbHRlcnR5cGUudG9Mb3dlckNhc2UoKSBhcyBUZ3JvdXBmaWx0ZXJ0eXBlO1xuICAgICAgICAvLyB0aGlzLm1hcFN2Yy5zZXRVa2lzTGF5ZXIobmV3V210c0xheWVyLCBvbEZpbHRlcnR5cGUpO1xuICAgICAgICB0aGlzLm1hcFN2Yy51cGRhdGVVa2lzTGF5ZXIobmV3V210c0xheWVyLCBvbEZpbHRlcnR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2hhbGxvd0VxdWFsKGE6IG9iamVjdCwgYjogb2JqZWN0KTogYm9vbGVhbiB7XG4gICAgLy8gQ3JlYXRlIGFycmF5cyBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgIGNvbnN0IGFQcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGEpO1xuICAgIGNvbnN0IGJQcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGIpO1xuXG4gICAgLy8gSWYgbnVtYmVyIG9mIHByb3BlcnRpZXMgaXMgZGlmZmVyZW50LFxuICAgIC8vIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XG4gICAgaWYgKGFQcm9wcy5sZW5ndGggIT09IGJQcm9wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIG9mIGFQcm9wcykge1xuICAgICAgLy8gSWYgdmFsdWVzIG9mIHNhbWUgcHJvcGVydHkgYXJlIG5vdCBlcXVhbCxcbiAgICAgIC8vIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XG4gICAgICBpZiAoYVtwcm9wTmFtZV0gIT09IGJbcHJvcE5hbWVdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBtYWRlIGl0IHRoaXMgZmFyLCBvYmplY3RzXG4gICAgLy8gYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudFxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRVcGRhdGVCYXNlTGF5ZXJzKGxheWVycykge1xuICAgIC8qKiBpZiBsZW5ndGggb2YgbGF5ZXJzIGhhcyBjaGFuZ2VkIGFkZCBuZXcgbGF5ZXJzICovXG4gICAgaWYgKGxheWVycy5sZW5ndGggIT09IHRoaXMubWFwU3ZjLmdldExheWVycygnYmFzZWxheWVycycpLmxlbmd0aCkge1xuICAgICAgLy8gc2V0IG9ubHkgb25lIHZpc2libGUgYXQgc3RhcnRcbiAgICAgIGNvbnN0IHZpc2libGVsYXllcnMgPSBsYXllcnMuZmlsdGVyKGwgPT4gbC52aXNpYmxlID09PSB0cnVlKTtcbiAgICAgIGlmICh2aXNpYmxlbGF5ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBsYXllcnNbMF0udmlzaWJsZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHZpc2libGVsYXllcnMubGVuZ3RoID4gMSkge1xuICAgICAgICBsYXllcnMuZm9yRWFjaChsID0+IGwudmlzaWJsZSA9IGZhbHNlKTtcbiAgICAgICAgbGF5ZXJzWzBdLnZpc2libGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5tYXBTdmMuc2V0VWtpc0xheWVycyhsYXllcnMsICdiYXNlbGF5ZXJzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBpZiBsYXllcnMgYWxyZWFkeSBvbiB0aGUgbWFwIC1sZW5ndGggbm90IGNoYW5nZWQtIHVwZGF0ZSB0aGVtICovXG4gICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVycykge1xuICAgICAgICBjb25zdCBibGxheWVyID0gdGhpcy5tYXBTdmMuZ2V0TGF5ZXJCeUtleSh7IGtleTogSURfS0VZLCB2YWx1ZTogbGF5ZXIuaWQgfSwgJ2Jhc2VsYXllcnMnKTtcbiAgICAgICAgaWYgKGJsbGF5ZXIpIHtcbiAgICAgICAgICBpZiAoYmxsYXllci5nZXRWaXNpYmxlKCkgIT09IGxheWVyLnZpc2libGUpIHtcbiAgICAgICAgICAgIGJsbGF5ZXIuc2V0VmlzaWJsZShsYXllci52aXNpYmxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJsbGF5ZXIuZ2V0WkluZGV4KCkgIT09IGxheWVycy5pbmRleE9mKGxheWVyKSkge1xuICAgICAgICAgICAgYmxsYXllci5zZXRaSW5kZXgobGF5ZXJzLmluZGV4T2YobGF5ZXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJsbGF5ZXIuZ2V0T3BhY2l0eSgpICE9PSBsYXllci5vcGFjaXR5KSB7XG4gICAgICAgICAgICBibGxheWVyLnNldE9wYWNpdHkobGF5ZXIub3BhY2l0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb0xheWVycygpIHtcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gYWRkL3JlbW92ZSBsYXllcnNcbiAgICBpZiAodGhpcy5sYXllcnNTdmMpIHtcbiAgICAgIGNvbnN0IGJhc2VsYXllcnNBZGRSZW1vdmVPbiA9IHRoaXMubGF5ZXJzU3ZjLmdldEJhc2VMYXllcnMoKS5zdWJzY3JpYmUobGF5ZXJzID0+IHRoaXMuYWRkVXBkYXRlQmFzZUxheWVycyhsYXllcnMpKTtcbiAgICAgIHRoaXMuc3Vicy5wdXNoKGJhc2VsYXllcnNBZGRSZW1vdmVPbik7XG4gICAgICBjb25zdCBvbkxheWVycyA9IHRoaXMubGF5ZXJzU3ZjLmdldExheWVycygpLnN1YnNjcmliZShsYXllcnMgPT4gdGhpcy5hZGRVcGRhdGVMYXllcnMobGF5ZXJzLCAnbGF5ZXJzJywgWydiYXNlbGF5ZXJzJ10pKTtcbiAgICAgIHRoaXMuc3Vicy5wdXNoKG9uTGF5ZXJzKTtcbiAgICAgIGNvbnN0IG9uT3ZlcmxheXMgPSB0aGlzLmxheWVyc1N2Yy5nZXRPdmVybGF5cygpLnN1YnNjcmliZShsYXllcnMgPT4gdGhpcy5hZGRVcGRhdGVMYXllcnMobGF5ZXJzLCAnb3ZlcmxheXMnLCBbJ2Jhc2VsYXllcnMnLCAnbGF5ZXJzJ10pKTtcbiAgICAgIHRoaXMuc3Vicy5wdXNoKG9uT3ZlcmxheXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0TWFwU3RhdGUobWFwU3RhdGU6IE1hcFN0YXRlKSB7XG4gICAgY29uc3QgbGFzdEFjdGlvbiA9IHRoaXMubWFwU3RhdGVTdmMuZ2V0TGFzdEFjdGlvbigpLmdldFZhbHVlKCk7XG4gICAgaWYgKG1hcFN0YXRlLm9wdGlvbnMubm90aWZpZXIgPT09ICd1c2VyJykge1xuICAgICAgaWYgKGxhc3RBY3Rpb24gPT09ICdzZXRFeHRlbnQnKSB7XG4gICAgICAgIHRoaXMubWFwU3ZjLnNldEV4dGVudChtYXBTdGF0ZS5leHRlbnQsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChsYXN0QWN0aW9uID09PSAnc2V0U3RhdGUnKSB7XG4gICAgICAgIHRoaXMubWFwU3ZjLnNldFpvb20obWFwU3RhdGUuem9vbSwgbWFwU3RhdGUub3B0aW9ucy5ub3RpZmllcik7XG4gICAgICAgIHRoaXMubWFwU3ZjLnNldENlbnRlcihbbWFwU3RhdGUuY2VudGVyLmxvbiwgbWFwU3RhdGUuY2VudGVyLmxhdF0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBlbHNlIGlmIChtYXBTdGF0ZS5vcHRpb25zLm5vdGlmaWVyID09PSAnbWFwJykge1xuICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLU1hcCB0cmlnZ2VyZWQgbWFwU3RhdGUgY2hhbmdlXCIsIG1hcFN0YXRlKTtcbiAgICB9ICovXG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvTWFwU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMubWFwU3RhdGVTdmMpIHtcbiAgICAgIC8qKiAucGlwZShza2lwKDEpKSBza2lwcyB0aGUgZmlyc3QsIGUuZy4gaW5pdGlhbCB2YWx1ZSBvZiB0aGUgQmVoYXZpb3JTdWJqZWN0ISEgLS0gaHR0cHM6Ly93d3cubGVhcm5yeGpzLmlvL2xlYXJuLXJ4anMvb3BlcmF0b3JzL2ZpbHRlcmluZy9za2lwI3doeS11c2Utc2tpcCAgKi9cbiAgICAgIGNvbnN0IG1hcFN0YXRlT24gPSB0aGlzLm1hcFN0YXRlU3ZjLmdldE1hcFN0YXRlKCkucGlwZShza2lwKDEpKS5zdWJzY3JpYmUoc3RhdGUgPT4gdGhpcy5zZXRNYXBTdGF0ZShzdGF0ZSkpO1xuICAgICAgdGhpcy5zdWJzLnB1c2gobWFwU3RhdGVPbik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb01hcEV2ZW50cygpIHtcbiAgICB0aGlzLm1hcE9uTW92ZWVuZCA9IChldnQ6IG9sTWFwRXZlbnQpID0+IHtcbiAgICAgIC8vIGNvbnN0IHpvb20gPSBNYXRoLnJvdW5kKHRoaXMubWFwU3ZjLmdldFpvb20oKSk7XG4gICAgICBjb25zdCB6b29tID0gdGhpcy5tYXBTdmMuZ2V0Wm9vbSgpO1xuICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5tYXBTdmMuZ2V0Q2VudGVyKHRydWUpO1xuICAgICAgY29uc3QgZXh0ZW50ID0gdGhpcy5tYXBTdmMuZ2V0Q3VycmVudEV4dGVudCh0cnVlKTtcblxuICAgICAgLy8gY29uc3QgbmV3Q2VudGVyID0geyBsYXQ6IHBhcnNlRmxvYXQoY2VudGVyWzFdLnRvRml4ZWQoNikpLCBsb246IHBhcnNlRmxvYXQoY2VudGVyWzBdLnRvRml4ZWQoNikpIH07XG4gICAgICBjb25zdCBuZXdDZW50ZXIgPSB7IGxhdDogcGFyc2VGbG9hdChjZW50ZXJbMV0pLCBsb246IHBhcnNlRmxvYXQoY2VudGVyWzBdKSB9O1xuICAgICAgY29uc3QgbXMgPSBuZXcgTWFwU3RhdGUoem9vbSwgbmV3Q2VudGVyLCB7IG5vdGlmaWVyOiAnbWFwJyB9LCBleHRlbnQpO1xuICAgICAgdGhpcy5tYXBTdGF0ZVN2Yy5zZXRNYXBTdGF0ZShtcyk7XG4gICAgfTtcbiAgICB0aGlzLm1hcC5vbignbW92ZWVuZCcsIHRoaXMubWFwT25Nb3ZlZW5kKTtcblxuICAgIC8qKiBoYW5kbGUgY2xpY2sgYW5kIHBvaW50ZXJtb3ZlL21vdXNlbW92ZSAqL1xuICAgIHRoaXMubWFwT25DbGlja01vdmUgPSAoZXZ0OiBvbE1hcEJyb3dzZXJFdmVudDxQb2ludGVyRXZlbnQ+KSA9PiB7XG4gICAgICB0aGlzLm1hcFN2Yy5sYXllcnNPbk1hcEV2ZW50KGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLm1hcC5vbihbJ2NsaWNrJywncG9pbnRlcm1vdmUnXSwgdGhpcy5tYXBPbkNsaWNrTW92ZSk7XG5cbiAgICAvKiogaGFuZGxlIGRvdWJsZSBjbGljayAqL1xuICAgIHRoaXMubWFwT25EY2xpY2sgPSAoZXZ0OiBvbE1hcEJyb3dzZXJFdmVudDxQb2ludGVyRXZlbnQ+KSA9PiB7XG4gICAgICB0aGlzLm1hcFN2Yy5yZW1vdmVBbGxQb3B1cHMoKTtcbiAgICB9O1xuICAgIHRoaXMubWFwLm9uKCdkYmxjbGljaycsIHRoaXMubWFwT25EY2xpY2spO1xuICB9XG5cblxuICBwcml2YXRlIGluaXRNYXAoKSB7XG4gICAgY29uc3Qgb2xNYXBWaWV3ID0gdGhpcy5tYXBTdmMuY3JlYXRlTWFwKCk7XG4gICAgdGhpcy5tYXAgPSBvbE1hcFZpZXcubWFwOyAvL1xuXG4gICAgdGhpcy5zZXRDb250cm9scygpO1xuICAgIGlmICghdGhpcy5sYXllcnNTdmMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVyZSBpcyBubyBsYXllcnNTdmMgYXMgZGVmaW5lZCEnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubWFwU3RhdGVTdmMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVyZSBpcyBubyBtYXBTdGF0ZVN2YyBhcyBkZWZpbmVkIScpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0Q29udHJvbHMoKSB7XG4gICAgLy8gYWRkIENvbnRyb2wgb25seSBpZiB0aGlzIGZ1bmN0aW9ucyBpcyBkZWZpbmVkXG4gICAgY29uc3QgdGVtcENvbnRyb2xzOiBvbENvbnRyb2xbXSA9IFtdO1xuICAgIGNvbnN0IG9sZENvbnRyb2xzOiBvbENvbnRyb2xbXSA9IFtdO1xuICAgIGlmICh0aGlzLm1hcCkge1xuICAgICAgY29uc3QgY29udHJvbHNBcnJ5ID0gdGhpcy5tYXAuZ2V0Q29udHJvbHMoKS5nZXRBcnJheSgpO1xuICAgICAgY29udHJvbHNBcnJ5LmZvckVhY2goaSA9PiBvbGRDb250cm9scy5wdXNoKGkpKTtcbiAgICAgIC8qKiBmaXg6IFRoZSBBdHRyaWJ1dGlvbiBDb250cm9sIGlzIGRpc3BsYXllZCB0d2ljZSAjMyAqL1xuICAgICAgdGhpcy5tYXAuZ2V0Q29udHJvbHMoKS5jbGVhcigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbnRyb2xzICYmIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5jb250cm9scy5hdHRyaWJ1dGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGF0dHJpYnV0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICBjb2xsYXBzaWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb2xsYXBzZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250cm9scy5hdHRyaWJ1dGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBhdHRyaWJ1dGlvbk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGF0dHJpYnV0aW9uT3B0aW9ucywgdGhpcy5jb250cm9scy5hdHRyaWJ1dGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0cmlidXRpb24gPSBuZXcgQXR0cmlidXRpb24oYXR0cmlidXRpb25PcHRpb25zKTtcbiAgICAgICAgdGVtcENvbnRyb2xzLnB1c2goYXR0cmlidXRpb24pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29udHJvbHMuc2NhbGVMaW5lKSB7XG4gICAgICAgIGxldCBzY2FsZUxpbmVPcHRpb25zID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250cm9scy5zY2FsZUxpbmUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgc2NhbGVMaW5lT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oc2NhbGVMaW5lT3B0aW9ucywgdGhpcy5jb250cm9scy5zY2FsZUxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlTGluZUNvbnRyb2wgPSBuZXcgU2NhbGVMaW5lKHNjYWxlTGluZU9wdGlvbnMpO1xuICAgICAgICB0ZW1wQ29udHJvbHMucHVzaChzY2FsZUxpbmVDb250cm9sKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnRyb2xzLnpvb20gIT09IGZhbHNlKSB7XG4gICAgICAgIGxldCB6b29tT3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udHJvbHMuem9vbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB6b29tT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oem9vbU9wdGlvbnMsIHRoaXMuY29udHJvbHMuem9vbSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgem9vbUNvbnRyb2wgPSBuZXcgWm9vbSh6b29tT3B0aW9ucyk7XG4gICAgICAgIHRlbXBDb250cm9scy5wdXNoKHpvb21Db250cm9sKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnRyb2xzLm1vdXNlUG9zaXRpb24pIHtcbiAgICAgICAgbGV0IG1vdXNlUG9zaXRpb25PcHRpb25zID0ge1xuICAgICAgICAgIGNvb3JkaW5hdGVGb3JtYXQ6IGNvb3JkaW5hdGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRvU3RyaW5nWFkoY29vcmRpbmF0ZSwgMik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzo0MzI2J1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udHJvbHMubW91c2VQb3NpdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBtb3VzZVBvc2l0aW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24obW91c2VQb3NpdGlvbk9wdGlvbnMsIHRoaXMuY29udHJvbHMubW91c2VQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW91c2VQb3NpdGlvbiA9IG5ldyBvbE1vdXNlUG9zaXRpb24obW91c2VQb3NpdGlvbk9wdGlvbnMpO1xuICAgICAgICB0ZW1wQ29udHJvbHMucHVzaChtb3VzZVBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnRyb2xzLmZ1bGxTY3JlZW4pIHtcbiAgICAgICAgbGV0IGZ1bGxTY3JlZW5PcHRpb25zID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250cm9scy5mdWxsU2NyZWVuID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZ1bGxTY3JlZW5PcHRpb25zID0gT2JqZWN0LmFzc2lnbihmdWxsU2NyZWVuT3B0aW9ucywgdGhpcy5jb250cm9scy5mdWxsU2NyZWVuKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmdWxsU2NyZWVuID0gbmV3IG9sRnVsbFNjcmVlbihmdWxsU2NyZWVuT3B0aW9ucyk7XG4gICAgICAgIHRlbXBDb250cm9scy5wdXNoKGZ1bGxTY3JlZW4pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29udHJvbHMub3ZlcnZpZXdNYXApIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYXduJyk7XG4gICAgICAgIGljb24uaW5uZXJIVE1MID0gJzxjbHItaWNvbiBzaGFwZT1cIndvcmxkXCI+PC9jbHItaWNvbj4nO1xuICAgICAgICBsZXQgb3ZlcnZpZXdNYXBPcHRpb25zID0ge1xuICAgICAgICAgIGxheWVyczogW25ldyBvbFRpbGVMYXllcih7XG4gICAgICAgICAgICBzb3VyY2U6IG5ldyBvbE9TTSgpXG4gICAgICAgICAgfSldLFxuICAgICAgICAgIGxhYmVsOiBpY29uXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250cm9scy5vdmVydmlld01hcCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBvdmVydmlld01hcE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG92ZXJ2aWV3TWFwT3B0aW9ucywgdGhpcy5jb250cm9scy5vdmVydmlld01hcCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3ZlcnZpZXdNYXAgPSBuZXcgb2xPdmVydmlld01hcChvdmVydmlld01hcE9wdGlvbnMpO1xuICAgICAgICB0ZW1wQ29udHJvbHMucHVzaChvdmVydmlld01hcCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb250cm9scy5yb3RhdGUpIHtcbiAgICAgICAgbGV0IHJvdGF0ZU9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRyb2xzLnJvdGF0ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByb3RhdGVPcHRpb25zID0gT2JqZWN0LmFzc2lnbihyb3RhdGVPcHRpb25zLCB0aGlzLmNvbnRyb2xzLnJvdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm90YXRlID0gbmV3IG9sUm90YXRlKHJvdGF0ZU9wdGlvbnMpO1xuICAgICAgICB0ZW1wQ29udHJvbHMucHVzaChyb3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGVtcENvbnRyb2xzLmxlbmd0aCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY2hlY2sgdGVtcENvbnRyb2xzIGRvc2Ugbm90IGluY2x1ZGUgb2xkQ29udHJvbHNcbiAgICAgICAgICogaHR0cHM6Ly9tZWRpdW0uY29tL0BhbHZhcm8uc2FidXJpZG8vc2V0LXRoZW9yeS1mb3ItYXJyYXlzLWluLWVzNi1lYjJmMjBhNjE4NDgjZjIyYlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IG9sZENvbnRyb2xzLmZpbHRlcih4ID0+ICF0ZW1wQ29udHJvbHMuaW5jbHVkZXMoeCkpO1xuICAgICAgICBkaWZmZXJlbmNlLmZvckVhY2goaSA9PiB0ZW1wQ29udHJvbHMucHVzaChpKSk7XG4gICAgICAgIHRoaXMubWFwLmdldENvbnRyb2xzKCkuZXh0ZW5kKHRlbXBDb250cm9scyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2ICNtYXBEaXYgaWQ9XCJtYXBcIiByZWY9XCJtYXBcIiBjbGFzcz1cIm1hcFwiPlxuICA8ZGl2ICpuZ0lmPVwiY29udHJvbHMgJiYgY29udHJvbHMuY3Jvc3NoYWlyXCIgaWQ9XCJjcm9zc2hhaXJcIiBjbGFzcz1cImNyb3NzaGFpclwiPis8L2Rpdj5cbjwvZGl2PlxuIl19