import { Component, ViewChild, Input, EventEmitter, Directive, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class ViewRefDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
}
ViewRefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ViewRefDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ViewRefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.6", type: ViewRefDirective, selector: "[ukisAddHost]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ViewRefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ukisAddHost]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
export class DynamicComponentComponent {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentChange = new EventEmitter();
    }
    loadComponent() {
        if (this.dynamicComponent) {
            this.subs = [];
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.dynamicComponent.component);
            const viewContainerRef = this.ukisAddHost.viewContainerRef;
            viewContainerRef.clear();
            this.componentRef = viewContainerRef.createComponent(componentFactory);
            this.setInputOutputs();
        }
    }
    /**
     * Set's the inputs defined in IDynamicComponent
     *
     * To subscribe to the outputs of the IDynamicComponent.component use '<name>Change' as output name in your component.
     * e.g.
     * @Input() set value()...
     *          get value()...
     * @Output() valueChange = new EventEmitter<number>();
     *
     *
     * To reset the Inputs after ngOnInit, change to Object binding for the input 'dynamicComponent' in the parent which creates the dynamic component.
     * e.g.
     * this.Comp.inputs.test = 'value';
     * CustomLayer.action = this.Comp = Object.assign({}, this.Comp);
     */
    setInputOutputs() {
        if (this.componentRef && this.dynamicComponent.inputs) {
            const inputs = Object.keys(this.dynamicComponent.inputs);
            inputs.map(i => {
                const inputname = i;
                if (this.dynamicComponent.inputs) {
                    this.componentRef.instance[inputname] = this.dynamicComponent.inputs[inputname];
                    const outupName = `${inputname}Change`;
                    /** subscribe to output for same name as input */
                    if (this.componentRef.instance[outupName] && this.componentRef.instance[outupName] instanceof EventEmitter) {
                        const sub = this.componentRef.instance[outupName].subscribe((val) => {
                            if (this.dynamicComponent.inputs) {
                                this.dynamicComponent.inputs[inputname] = val;
                                /** if outputs are defined on IDynamicComponent pass the value to there functions */
                            }
                            if (this.dynamicComponent.outputs) {
                                if (this.dynamicComponent.outputs[outupName]) {
                                    this.dynamicComponent.outputs[outupName](val);
                                }
                            }
                            this.dynamicComponentChange.emit(this.dynamicComponent);
                        });
                        this.subs.push(sub);
                    }
                }
            });
        }
    }
    ngOnChanges(changes) {
        if (changes.dynamicComponent) {
            if (Array.isArray(this.subs)) {
                this.subs.map(s => s.unsubscribe());
            }
            this.setInputOutputs();
        }
    }
    ngOnInit() {
        this.loadComponent();
    }
    ngOnDestroy() {
        if (this.componentRef) {
            this.subs.map(s => s.unsubscribe());
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
}
DynamicComponentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: DynamicComponentComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
DynamicComponentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: DynamicComponentComponent, selector: "ukis-dynamic-component", inputs: { dynamicComponent: "dynamicComponent" }, outputs: { dynamicComponentChange: "dynamicComponentChange" }, viewQueries: [{ propertyName: "ukisAddHost", first: true, predicate: ViewRefDirective, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<ng-template ukisAddHost></ng-template>`, isInline: true, directives: [{ type: ViewRefDirective, selector: "[ukisAddHost]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: DynamicComponentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ukis-dynamic-component',
                    template: `<ng-template ukisAddHost></ng-template>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { dynamicComponent: [{
                type: Input
            }], dynamicComponentChange: [{
                type: Output
            }], ukisAddHost: [{
                type: ViewChild,
                args: [ViewRefDirective, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,