import { Injector, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
export interface FocusTrapElement extends HTMLElement {
    topReboundElement: HTMLElement | undefined;
    bottomReboundElement: HTMLElement | undefined;
    focusTrapId: string;
}
export declare function refocusIfOutsideFocusTrapElement(focusedElement: HTMLElement, focusTrapElement: FocusTrapElement, elementToRefocus?: HTMLElement): void;
export declare function elementIsOutsideFocusTrapElement(focusedElement: HTMLElement, focusTrapElement: FocusTrapElement): boolean;
export declare function createFocusTrapReboundElement(document: Document): HTMLSpanElement;
export declare function addReboundElementsToFocusTrapElement(document: Document, focusTrapElement: FocusTrapElement): void;
export declare function removeReboundElementsFromFocusTrapElement(focusTrapElement: FocusTrapElement): void;
export declare function castHtmlElementToFocusTrapElement(el: HTMLElement): FocusTrapElement;
export declare class FocusTrap {
    protected renderer: Renderer2;
    focusTrapElement: FocusTrapElement;
    private previousFocus;
    private onFocusInEvent;
    private unlisten;
    protected _document: Document;
    firstFocusElement: HTMLElement | FocusTrapElement;
    active: boolean;
    constructor(renderer: Renderer2, injector: Injector, platformId: any, hostElement: FocusTrapElement);
    enableFocusTrap(): void;
    removeFocusTrap(): void;
    private onFocusIn;
    static ɵfac: i0.ɵɵFactoryDeclaration<FocusTrap, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<FocusTrap>;
}
