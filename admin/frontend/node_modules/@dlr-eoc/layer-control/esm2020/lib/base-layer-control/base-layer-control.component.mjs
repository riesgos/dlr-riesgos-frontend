import { Component, Input } from '@angular/core';
import { LayerGroup } from '@dlr-eoc/services-layers';
import * as i0 from "@angular/core";
import * as i1 from "../layerentry-group/layerentry-group.component";
import * as i2 from "../layerentry/layerentry.component";
import * as i3 from "@angular/common";
import * as i4 from "../utils/array-reverse.pipe";
export class BaseLayerControlComponent {
    constructor() {
        this.layergroups = [];
    }
    ngOnInit() {
        this.layerGroupsSubscription = this.layersSvc.getLayerGroups().subscribe(layergroups => {
            this.layergroups = layergroups.filter((group) => group.filtertype === 'Baselayers');
            // console.log(this.layergroups)
        });
    }
    isLayerGroup(group) {
        if (group instanceof LayerGroup) {
            return true;
        }
        else {
            return false;
        }
    }
    ngOnDestroy() {
        this.layerGroupsSubscription.unsubscribe();
    }
}
BaseLayerControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: BaseLayerControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BaseLayerControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: BaseLayerControlComponent, selector: "ukis-base-layer-control", inputs: { layersSvc: "layersSvc", mapStateSvc: "mapStateSvc" }, ngImport: i0, template: "<div class=\"list-item\" *ngFor=\"let group of layergroups | reverse;\">\n  <ukis-layerentry-group *ngIf=\"isLayerGroup(group)\" [layersSvc]=\"layersSvc\" [mapState]=\"mapStateSvc\" [group]=\"group\"\n    [layerGroups]=\"layergroups\"></ukis-layerentry-group>\n\n  <ukis-layerentry *ngIf=\"!isLayerGroup(group)\" [layerGroups]=\"layergroups\" [expanded]=\"false\" [layersSvc]=\"layersSvc\"\n    [mapState]=\"mapStateSvc\" [layer]=\"group\" [group]=\"null\"></ukis-layerentry>\n</div>\n", styles: [""], components: [{ type: i1.LayerentryGroupComponent, selector: "ukis-layerentry-group", inputs: ["layersSvc", "mapState", "group", "layerGroups"] }, { type: i2.LayerentryComponent, selector: "ukis-layerentry", inputs: ["layersSvc", "mapState", "layer", "group", "layerGroups", "expanded", "expandable"], outputs: ["update"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "reverse": i4.ReversePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: BaseLayerControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-base-layer-control', template: "<div class=\"list-item\" *ngFor=\"let group of layergroups | reverse;\">\n  <ukis-layerentry-group *ngIf=\"isLayerGroup(group)\" [layersSvc]=\"layersSvc\" [mapState]=\"mapStateSvc\" [group]=\"group\"\n    [layerGroups]=\"layergroups\"></ukis-layerentry-group>\n\n  <ukis-layerentry *ngIf=\"!isLayerGroup(group)\" [layerGroups]=\"layergroups\" [expanded]=\"false\" [layersSvc]=\"layersSvc\"\n    [mapState]=\"mapStateSvc\" [layer]=\"group\" [group]=\"null\"></ukis-layerentry>\n</div>\n", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { layersSvc: [{
                type: Input,
                args: ['layersSvc']
            }], mapStateSvc: [{
                type: Input,
                args: ['mapStateSvc']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1sYXllci1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xheWVyLWNvbnRyb2wvc3JjL2xpYi9iYXNlLWxheWVyLWNvbnRyb2wvYmFzZS1sYXllci1jb250cm9sLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xheWVyLWNvbnRyb2wvc3JjL2xpYi9iYXNlLWxheWVyLWNvbnRyb2wvYmFzZS1sYXllci1jb250cm9sLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBSXBFLE9BQU8sRUFBRSxVQUFVLEVBQVMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7O0FBUTdELE1BQU0sT0FBTyx5QkFBeUI7SUFTcEM7UUFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNyRixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLENBQUM7WUFDcEYsZ0NBQWdDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUF5QjtRQUNwQyxJQUFJLEtBQUssWUFBWSxVQUFVLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLENBQUM7O3NIQTlCVSx5QkFBeUI7MEdBQXpCLHlCQUF5QiwrSENadEMsdWVBT0E7MkZES2EseUJBQXlCO2tCQUxyQyxTQUFTOytCQUNFLHlCQUF5QjswRUFLZixTQUFTO3NCQUE1QixLQUFLO3VCQUFDLFdBQVc7Z0JBQ0ksV0FBVztzQkFBaEMsS0FBSzt1QkFBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTGF5ZXJzU2VydmljZSB9IGZyb20gJ0BkbHItZW9jL3NlcnZpY2VzLWxheWVycyc7XG5pbXBvcnQgeyBNYXBTdGF0ZVNlcnZpY2UgfSBmcm9tICdAZGxyLWVvYy9zZXJ2aWNlcy1tYXAtc3RhdGUnO1xuaW1wb3J0IHsgTGF5ZXJHcm91cCwgTGF5ZXIgfSBmcm9tICdAZGxyLWVvYy9zZXJ2aWNlcy1sYXllcnMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3VraXMtYmFzZS1sYXllci1jb250cm9sJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Jhc2UtbGF5ZXItY29udHJvbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Jhc2UtbGF5ZXItY29udHJvbC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEJhc2VMYXllckNvbnRyb2xDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnbGF5ZXJzU3ZjJykgbGF5ZXJzU3ZjOiBMYXllcnNTZXJ2aWNlO1xuICBASW5wdXQoJ21hcFN0YXRlU3ZjJykgbWFwU3RhdGVTdmM/OiBNYXBTdGF0ZVNlcnZpY2U7XG5cbiAgbGF5ZXJHcm91cHNTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgbGF5ZXJzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIGxheWVyZ3JvdXBzOiBBcnJheTxMYXllciB8IExheWVyR3JvdXA+O1xuXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5sYXllcmdyb3VwcyA9IFtdO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5sYXllckdyb3Vwc1N1YnNjcmlwdGlvbiA9IHRoaXMubGF5ZXJzU3ZjLmdldExheWVyR3JvdXBzKCkuc3Vic2NyaWJlKGxheWVyZ3JvdXBzID0+IHtcbiAgICAgIHRoaXMubGF5ZXJncm91cHMgPSBsYXllcmdyb3Vwcy5maWx0ZXIoKGdyb3VwKSA9PiBncm91cC5maWx0ZXJ0eXBlID09PSAnQmFzZWxheWVycycpO1xuICAgICAgLy8gY29uc29sZS5sb2codGhpcy5sYXllcmdyb3VwcylcbiAgICB9KTtcbiAgfVxuXG4gIGlzTGF5ZXJHcm91cChncm91cDogTGF5ZXIgfCBMYXllckdyb3VwKSB7XG4gICAgaWYgKGdyb3VwIGluc3RhbmNlb2YgTGF5ZXJHcm91cCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmxheWVyR3JvdXBzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxufVxuIiwiPGRpdiBjbGFzcz1cImxpc3QtaXRlbVwiICpuZ0Zvcj1cImxldCBncm91cCBvZiBsYXllcmdyb3VwcyB8IHJldmVyc2U7XCI+XG4gIDx1a2lzLWxheWVyZW50cnktZ3JvdXAgKm5nSWY9XCJpc0xheWVyR3JvdXAoZ3JvdXApXCIgW2xheWVyc1N2Y109XCJsYXllcnNTdmNcIiBbbWFwU3RhdGVdPVwibWFwU3RhdGVTdmNcIiBbZ3JvdXBdPVwiZ3JvdXBcIlxuICAgIFtsYXllckdyb3Vwc109XCJsYXllcmdyb3Vwc1wiPjwvdWtpcy1sYXllcmVudHJ5LWdyb3VwPlxuXG4gIDx1a2lzLWxheWVyZW50cnkgKm5nSWY9XCIhaXNMYXllckdyb3VwKGdyb3VwKVwiIFtsYXllckdyb3Vwc109XCJsYXllcmdyb3Vwc1wiIFtleHBhbmRlZF09XCJmYWxzZVwiIFtsYXllcnNTdmNdPVwibGF5ZXJzU3ZjXCJcbiAgICBbbWFwU3RhdGVdPVwibWFwU3RhdGVTdmNcIiBbbGF5ZXJdPVwiZ3JvdXBcIiBbZ3JvdXBdPVwibnVsbFwiPjwvdWtpcy1sYXllcmVudHJ5PlxuPC9kaXY+XG4iXX0=