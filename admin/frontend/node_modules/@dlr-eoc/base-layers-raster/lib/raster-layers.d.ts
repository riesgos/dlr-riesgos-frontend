import { RasterLayer, IRasterLayerOptions, WmtsLayer, IWmtsOptions, WmsLayer, IWmsOptions } from '@dlr-eoc/services-layers';
/**
 * make all IRasterLayer Options optional because constructor use default objects
 */
declare type IoptionalRasterLayerOptions = {
    [K in keyof IRasterLayerOptions]?: IRasterLayerOptions[K];
};
declare type IoptionalIWmsOptions = {
    [K in keyof IWmsOptions]?: IWmsOptions[K];
};
declare type IoptionalIWmtsOptions = {
    [K in keyof IWmtsOptions]?: IWmtsOptions[K];
};
export declare class OsmTileLayer extends RasterLayer {
    constructor(options?: IoptionalRasterLayerOptions);
}
export declare class OpenSeaMap extends RasterLayer {
    constructor(options?: IoptionalRasterLayerOptions);
}
export declare class EocLitemap extends WmsLayer {
    constructor(options?: IoptionalIWmsOptions);
}
export declare class EocLitemapTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export declare class EocLiteoverlayTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export declare class EocBasemapTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export declare class EocBaseoverlayTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export declare class BlueMarbleTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export declare class WorldReliefBwTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export declare class HillshadeTile extends WmtsLayer {
    constructor(options?: IoptionalIWmtsOptions);
}
export {};
