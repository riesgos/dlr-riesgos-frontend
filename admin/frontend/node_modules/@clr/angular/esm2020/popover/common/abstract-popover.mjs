/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ElementRef, HostBinding, Renderer2, SkipSelf, Directive, NgZone, ChangeDetectorRef, } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { Popover } from './popover';
import * as i0 from "@angular/core";
// Literally any annotation would work here, but writing our own @HoneyBadger annotation feels overkill.
export class AbstractPopover {
    constructor(injector, parentHost) {
        this.parentHost = parentHost;
        this.updateAnchor = false;
        this.popoverOptions = {};
        /*
         * Until https://github.com/angular/angular/issues/8785 is supported, we don't have any way to instantiate
         * a separate directive on the host. So let's do dirty but performant for now.
         */
        this.closeOnOutsideClick = false;
        this.documentESCListener = null;
        this.closeOnOutsideClickCallback = event => {
            // The anchor element containing the click event origin means, the click wasn't triggered outside.
            if (this.anchorElem.contains(event.target)) {
                return;
            }
            this.toggleService.open = false;
        };
        this.el = injector.get(ElementRef);
        this.toggleService = injector.get(ClrPopoverToggleService);
        this.renderer = injector.get(Renderer2);
        this.ngZone = injector.get(NgZone);
        this.ref = injector.get(ChangeDetectorRef);
        // Default anchor is the parent host
        this.anchorElem = parentHost.nativeElement;
        this.popoverInstance = new Popover(this.el.nativeElement);
        this.subscription = this.toggleService.openChange.subscribe(change => {
            if (change) {
                this.anchor();
                this.attachESCListener();
            }
            else {
                this.release();
                this.detachESCListener();
            }
        });
        if (this.toggleService.open) {
            this.anchor();
            this.attachESCListener();
        }
    }
    anchor() {
        this.updateAnchor = true;
    }
    release() {
        this.detachOutsideClickListener();
        this.popoverInstance.release();
    }
    ngAfterViewChecked() {
        if (this.updateAnchor) {
            this.updateAnchor = false;
            this.popoverInstance
                .anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)
                .subscribe(() => {
                // if a scroll event is detected, close the popover
                this.toggleService.open = false;
            });
            this.attachOutsideClickListener();
        }
    }
    ngOnDestroy() {
        this.release();
        this.detachESCListener();
        this.subscription.unsubscribe();
    }
    /*
     * Fallback to hide when *clrIfOpen is not being used
     */
    get isOffScreen() {
        return this.toggleService.open ? false : true;
    }
    attachESCListener() {
        if (this.popoverOptions.ignoreGlobalESCListener) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.documentESCListener = this.renderer.listen('document', 'keydown', event => {
                if (event && event.key) {
                    if (event.key === 'Escape' || event.key === 'Esc') {
                        this.ngZone.run(() => {
                            this.toggleService.open = false;
                            this.ref.markForCheck();
                        });
                    }
                }
            });
        });
    }
    detachESCListener() {
        if (this.documentESCListener) {
            this.documentESCListener();
            this.documentESCListener = null;
        }
    }
    attachOutsideClickListener() {
        if (this.closeOnOutsideClick && this.toggleService.open) {
            if (document && document.addEventListener) {
                // To listen outside click, the listener should catch the event during the capturing phase.
                // We have to do this ugly document check as Renderer2.listen doesn't allow passive/useCapture listen.
                document.addEventListener('click', this.closeOnOutsideClickCallback, true);
            }
        }
    }
    detachOutsideClickListener() {
        if (this.closeOnOutsideClick) {
            if (document && document.removeEventListener) {
                document.removeEventListener('click', this.closeOnOutsideClickCallback, true);
            }
        }
    }
}
AbstractPopover.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AbstractPopover, deps: [{ token: i0.Injector }, { token: i0.ElementRef, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
AbstractPopover.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: AbstractPopover, host: { properties: { "class.is-off-screen": "this.isOffScreen" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AbstractPopover, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ElementRef, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { isOffScreen: [{
                type: HostBinding,
                args: ['class.is-off-screen']
            }] } });
//# sourceMappingURL=data:application/json;base64,