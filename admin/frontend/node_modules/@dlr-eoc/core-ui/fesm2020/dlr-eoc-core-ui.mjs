import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, Injectable, Directive, ViewChild, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import * as i1$1 from '@clr/angular';
import { ClarityModule } from '@clr/angular';

class GlobalProgressComponent {
    constructor() {
        this.progressChange = new EventEmitter();
    }
    ngOnInit() {
    }
}
GlobalProgressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: GlobalProgressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
GlobalProgressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: GlobalProgressComponent, selector: "ukis-global-progress", inputs: { progress: "progress" }, outputs: { progressChange: "progressChange" }, ngImport: i0, template: "<span *ngIf=\"progress && progress.indeterminate\">\n  <div *ngIf=\"progress.class\" class=\"progress loop\" [ngClass]=\"progress.class\"><progress></progress></div>\n</span>\n<span *ngIf=\"progress && !progress.indeterminate\">\n  <div *ngIf=\"progress.class\" class=\"progress\" [ngClass]=\"progress.class\"><progress max=\"{{progress.max}}\"\n      value=\"{{progress.value}}\"></progress></div>\n</span>\n", styles: [".progress{height:.5em}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: GlobalProgressComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-global-progress', template: "<span *ngIf=\"progress && progress.indeterminate\">\n  <div *ngIf=\"progress.class\" class=\"progress loop\" [ngClass]=\"progress.class\"><progress></progress></div>\n</span>\n<span *ngIf=\"progress && !progress.indeterminate\">\n  <div *ngIf=\"progress.class\" class=\"progress\" [ngClass]=\"progress.class\"><progress max=\"{{progress.max}}\"\n      value=\"{{progress.value}}\"></progress></div>\n</span>\n", styles: [".progress{height:.5em}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { progress: [{
                type: Input
            }], progressChange: [{
                type: Output
            }] } });

class ProgressService {
    constructor() {
        this.progressSource = new Subject();
        this.progress$ = this.progressSource.asObservable();
    }
    progress(progress) {
        this.progressSource.next(progress);
    }
}
ProgressService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ProgressService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ProgressService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ProgressService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ProgressService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class GlobalAlertComponent {
    constructor() {
        this.alertChange = new EventEmitter();
    }
    close() {
        this.alert = null;
        this.alertChange.emit(this.alert);
    }
}
GlobalAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: GlobalAlertComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
GlobalAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: GlobalAlertComponent, selector: "ukis-global-alert", inputs: { alert: "alert" }, outputs: { alertChange: "alertChange" }, ngImport: i0, template: "<div *ngIf=\"alert\" class=\"alert alert-app-level\" [ngClass]=\"'alert-'+alert.type\" role=\"alert\">\n  <div class=\"alert-items\">\n    <div class=\"alert-item static\">\n      <div class=\"alert-icon-wrapper\">\n        <clr-icon class=\"alert-icon\" shape=\"info-circle\"></clr-icon>\n      </div>\n      <div class=\"alert-text\" [innerHTML]=alert.text></div>\n      <div *ngIf=\"alert.actions\" class=\"alert-actions\">\n        <button *ngFor=\"let action of alert.actions\" class=\"btn alert-action\" aria-label=\"alert action\"\n          (click)=\"action.callback && action.callback()\">{{action.title}}</button>\n      </div>\n    </div>\n  </div>\n  <button *ngIf=\"alert.closeable\" type=\"button\" class=\"close\" aria-label=\"alert close\" (click)=\"close()\">\n    <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n  </button>\n</div>\n", styles: [""], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.ClrIconCustomTag, selector: "clr-icon" }, { type: i1$1.ClrAlertText, selector: ".alert-text" }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: GlobalAlertComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-global-alert', template: "<div *ngIf=\"alert\" class=\"alert alert-app-level\" [ngClass]=\"'alert-'+alert.type\" role=\"alert\">\n  <div class=\"alert-items\">\n    <div class=\"alert-item static\">\n      <div class=\"alert-icon-wrapper\">\n        <clr-icon class=\"alert-icon\" shape=\"info-circle\"></clr-icon>\n      </div>\n      <div class=\"alert-text\" [innerHTML]=alert.text></div>\n      <div *ngIf=\"alert.actions\" class=\"alert-actions\">\n        <button *ngFor=\"let action of alert.actions\" class=\"btn alert-action\" aria-label=\"alert action\"\n          (click)=\"action.callback && action.callback()\">{{action.title}}</button>\n      </div>\n    </div>\n  </div>\n  <button *ngIf=\"alert.closeable\" type=\"button\" class=\"close\" aria-label=\"alert close\" (click)=\"close()\">\n    <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n  </button>\n</div>\n", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { alert: [{
                type: Input
            }], alertChange: [{
                type: Output
            }] } });

class AlertService {
    constructor() {
        this.alertSource = new Subject();
        this.alert$ = this.alertSource.asObservable();
    }
    alert(alert) {
        this.alertSource.next(alert);
    }
}
AlertService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AlertService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AlertService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AlertService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: AlertService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class HeaderComponent {
    constructor() {
        this.title = '';
        this.shortTitle = '';
        this.version = '';
    }
    ngOnInit() {
    }
}
HeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: HeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
HeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: HeaderComponent, selector: "ukis-header", inputs: { title: ["ukis-title", "title"], shortTitle: ["ukis-short-title", "shortTitle"], version: ["ukis-version", "version"] }, ngImport: i0, template: "<clr-header class=\"header-1\">\n  <div class=\"branding\" [ngClass]=\"{'short-title':shortTitle}\">\n    <a href=\"https://www.dlr.de\" target=\"_blank\" alt=\"link to dlr\">\n      <clr-icon shape=\"dlr\" class=\"is-solid\" size=\"48\" alt=\"dlr icon\"></clr-icon>\n    </a>\n    <a href=\"https://www.dlr.de/eoc/desktopdefault.aspx/tabid-5413/10560_read-21914\" target=\"_blank\"\n      alt=\"link to dlr ukis\">\n      <clr-icon shape=\"ukis\" class=\"is-solid\" size=\"33\" alt=\"ukis icon\"></clr-icon>\n    </a>\n    <a class=\"nav-link\" routerLink=\"/\" routerLinkActive=\"active\">\n      <span class=\"title\" [title]=\"title\">{{title}}</span>\n      <span class=\"title short\" [title]=\"title\">{{shortTitle}}</span>\n    </a>\n    <span class=\"version\" *ngIf=\"version\">{{version}}</span>\n  </div>\n  <div class=\"header-nav\" [clr-nav-level]=\"1\">\n    <ng-content select=\".header-nav-el\"></ng-content>\n  </div>\n\n  <ng-content></ng-content>\n\n  <div class=\"header-actions\">\n    <ng-content select=\".header-action-el\"></ng-content>\n  </div>\n</clr-header>\n", styles: [""], components: [{ type: i1$1.ClrHeader, selector: "clr-header" }], directives: [{ type: i1$1.NavDetectionOompaLoompa, selector: "clr-header" }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.ClrIconCustomTag, selector: "clr-icon" }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.ClrNavLevel, selector: "[clr-nav-level]", inputs: ["clr-nav-level", "closeAriaLabel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: HeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ukis-header', template: "<clr-header class=\"header-1\">\n  <div class=\"branding\" [ngClass]=\"{'short-title':shortTitle}\">\n    <a href=\"https://www.dlr.de\" target=\"_blank\" alt=\"link to dlr\">\n      <clr-icon shape=\"dlr\" class=\"is-solid\" size=\"48\" alt=\"dlr icon\"></clr-icon>\n    </a>\n    <a href=\"https://www.dlr.de/eoc/desktopdefault.aspx/tabid-5413/10560_read-21914\" target=\"_blank\"\n      alt=\"link to dlr ukis\">\n      <clr-icon shape=\"ukis\" class=\"is-solid\" size=\"33\" alt=\"ukis icon\"></clr-icon>\n    </a>\n    <a class=\"nav-link\" routerLink=\"/\" routerLinkActive=\"active\">\n      <span class=\"title\" [title]=\"title\">{{title}}</span>\n      <span class=\"title short\" [title]=\"title\">{{shortTitle}}</span>\n    </a>\n    <span class=\"version\" *ngIf=\"version\">{{version}}</span>\n  </div>\n  <div class=\"header-nav\" [clr-nav-level]=\"1\">\n    <ng-content select=\".header-nav-el\"></ng-content>\n  </div>\n\n  <ng-content></ng-content>\n\n  <div class=\"header-actions\">\n    <ng-content select=\".header-action-el\"></ng-content>\n  </div>\n</clr-header>\n", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { title: [{
                type: Input,
                args: ['ukis-title']
            }], shortTitle: [{
                type: Input,
                args: ['ukis-short-title']
            }], version: [{
                type: Input,
                args: ['ukis-version']
            }] } });

class ViewRefDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
}
ViewRefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ViewRefDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ViewRefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.6", type: ViewRefDirective, selector: "[ukisAddHost]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ViewRefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ukisAddHost]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
class DynamicComponentComponent {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentChange = new EventEmitter();
    }
    loadComponent() {
        if (this.dynamicComponent) {
            this.subs = [];
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.dynamicComponent.component);
            const viewContainerRef = this.ukisAddHost.viewContainerRef;
            viewContainerRef.clear();
            this.componentRef = viewContainerRef.createComponent(componentFactory);
            this.setInputOutputs();
        }
    }
    /**
     * Set's the inputs defined in IDynamicComponent
     *
     * To subscribe to the outputs of the IDynamicComponent.component use '<name>Change' as output name in your component.
     * e.g.
     * @Input() set value()...
     *          get value()...
     * @Output() valueChange = new EventEmitter<number>();
     *
     *
     * To reset the Inputs after ngOnInit, change to Object binding for the input 'dynamicComponent' in the parent which creates the dynamic component.
     * e.g.
     * this.Comp.inputs.test = 'value';
     * CustomLayer.action = this.Comp = Object.assign({}, this.Comp);
     */
    setInputOutputs() {
        if (this.componentRef && this.dynamicComponent.inputs) {
            const inputs = Object.keys(this.dynamicComponent.inputs);
            inputs.map(i => {
                const inputname = i;
                if (this.dynamicComponent.inputs) {
                    this.componentRef.instance[inputname] = this.dynamicComponent.inputs[inputname];
                    const outupName = `${inputname}Change`;
                    /** subscribe to output for same name as input */
                    if (this.componentRef.instance[outupName] && this.componentRef.instance[outupName] instanceof EventEmitter) {
                        const sub = this.componentRef.instance[outupName].subscribe((val) => {
                            if (this.dynamicComponent.inputs) {
                                this.dynamicComponent.inputs[inputname] = val;
                                /** if outputs are defined on IDynamicComponent pass the value to there functions */
                            }
                            if (this.dynamicComponent.outputs) {
                                if (this.dynamicComponent.outputs[outupName]) {
                                    this.dynamicComponent.outputs[outupName](val);
                                }
                            }
                            this.dynamicComponentChange.emit(this.dynamicComponent);
                        });
                        this.subs.push(sub);
                    }
                }
            });
        }
    }
    ngOnChanges(changes) {
        if (changes.dynamicComponent) {
            if (Array.isArray(this.subs)) {
                this.subs.map(s => s.unsubscribe());
            }
            this.setInputOutputs();
        }
    }
    ngOnInit() {
        this.loadComponent();
    }
    ngOnDestroy() {
        if (this.componentRef) {
            this.subs.map(s => s.unsubscribe());
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
}
DynamicComponentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: DynamicComponentComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
DynamicComponentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.6", type: DynamicComponentComponent, selector: "ukis-dynamic-component", inputs: { dynamicComponent: "dynamicComponent" }, outputs: { dynamicComponentChange: "dynamicComponentChange" }, viewQueries: [{ propertyName: "ukisAddHost", first: true, predicate: ViewRefDirective, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<ng-template ukisAddHost></ng-template>`, isInline: true, directives: [{ type: ViewRefDirective, selector: "[ukisAddHost]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: DynamicComponentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ukis-dynamic-component',
                    template: `<ng-template ukisAddHost></ng-template>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { dynamicComponent: [{
                type: Input
            }], dynamicComponentChange: [{
                type: Output
            }], ukisAddHost: [{
                type: ViewChild,
                args: [ViewRefDirective, { static: true }]
            }] } });

class CoreUiModule {
}
CoreUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CoreUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreUiModule, declarations: [GlobalAlertComponent, GlobalProgressComponent, HeaderComponent, ViewRefDirective, DynamicComponentComponent], imports: [CommonModule, ClarityModule], exports: [GlobalAlertComponent, GlobalProgressComponent, HeaderComponent, ViewRefDirective, DynamicComponentComponent] });
CoreUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreUiModule, providers: [AlertService, ProgressService], imports: [[CommonModule, ClarityModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: CoreUiModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [GlobalAlertComponent, GlobalProgressComponent, HeaderComponent, ViewRefDirective, DynamicComponentComponent],
                    imports: [CommonModule, ClarityModule],
                    exports: [GlobalAlertComponent, GlobalProgressComponent, HeaderComponent, ViewRefDirective, DynamicComponentComponent],
                    providers: [AlertService, ProgressService]
                }]
        }] });

/*
 * Public API Surface of core-ui
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AlertService, CoreUiModule, DynamicComponentComponent, GlobalAlertComponent, GlobalProgressComponent, HeaderComponent, ProgressService, ViewRefDirective };
//# sourceMappingURL=dlr-eoc-core-ui.mjs.map
