import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class ObjTypePipe {
    transform(observations, type) {
        /* TODO: check layerlist for purity console.log("reevaluated"); */
        return observations.filter((o) => o.type === type);
    }
}
ObjTypePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ObjTypePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ObjTypePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ObjTypePipe, name: "type", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ObjTypePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'type', pure: false
                }]
        }] });
/**
 * e.g. usage *ngFor="let item of items | itemsfilter: callbackfn"
 */
export class ItemsFilterPipe {
    transform(items, callbackfn) {
        /* TODO: check layerlist for purity console.log("reevaluated"); */
        return items.filter(callbackfn);
    }
}
ItemsFilterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ItemsFilterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ItemsFilterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ItemsFilterPipe, name: "itemsfilter", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.6", ngImport: i0, type: ItemsFilterPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'itemsfilter', pure: false
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqLXR5cGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xheWVyLWNvbnRyb2wvc3JjL2xpYi91dGlscy9vYmotdHlwZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQUtwRCxNQUFNLE9BQU8sV0FBVztJQUN0QixTQUFTLENBQUMsWUFBbUIsRUFBRSxJQUFZO1FBQ3pDLGtFQUFrRTtRQUNsRSxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7d0dBSlUsV0FBVztzR0FBWCxXQUFXOzJGQUFYLFdBQVc7a0JBSHZCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSztpQkFDMUI7O0FBUUQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixTQUFTLENBQUMsS0FBWSxFQUFFLFVBQWlFO1FBQ3ZGLGtFQUFrRTtRQUNsRSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7NEdBSlUsZUFBZTswR0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBSDNCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsS0FBSztpQkFDakMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ3R5cGUnLCBwdXJlOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBPYmpUeXBlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0ob2JzZXJ2YXRpb25zOiBhbnlbXSwgdHlwZTogc3RyaW5nKTogYW55W10ge1xuICAgIC8qIFRPRE86IGNoZWNrIGxheWVybGlzdCBmb3IgcHVyaXR5IGNvbnNvbGUubG9nKFwicmVldmFsdWF0ZWRcIik7ICovXG4gICAgcmV0dXJuIG9ic2VydmF0aW9ucy5maWx0ZXIoKG8pID0+IG8udHlwZSA9PT0gdHlwZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBlLmcuIHVzYWdlICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zIHwgaXRlbXNmaWx0ZXI6IGNhbGxiYWNrZm5cIlxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdpdGVtc2ZpbHRlcicsIHB1cmU6IGZhbHNlXG59KVxuZXhwb3J0IGNsYXNzIEl0ZW1zRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaXRlbXM6IGFueVtdLCBjYWxsYmFja2ZuPzogKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIsIGFycmF5OiBhbnlbXSkgPT4gYm9vbGVhbik6IGFueVtdIHtcbiAgICAvKiBUT0RPOiBjaGVjayBsYXllcmxpc3QgZm9yIHB1cml0eSBjb25zb2xlLmxvZyhcInJlZXZhbHVhdGVkXCIpOyAqL1xuICAgIHJldHVybiBpdGVtcy5maWx0ZXIoY2FsbGJhY2tmbik7XG4gIH1cbn1cblxuIl19