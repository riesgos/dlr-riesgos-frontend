import { OnInit, EventEmitter } from '@angular/core';
import { IDynamicComponent } from '@dlr-eoc/core-ui';
import { LayerGroup, Layer, LayersService } from '@dlr-eoc/services-layers';
import { MapStateService } from '@dlr-eoc/services-map-state';
import * as i0 from "@angular/core";
export declare class LayerentryComponent implements OnInit {
    get visible(): boolean;
    get cssClass(): string;
    layersSvc: LayersService;
    mapState?: MapStateService;
    layer: Layer;
    group?: LayerGroup;
    layerGroups?: Array<Layer | LayerGroup>;
    set expanded(value: boolean);
    get expanded(): boolean;
    expandable: boolean;
    update: EventEmitter<{
        layer: Layer;
    }>;
    canZoomToLayer: boolean;
    activeTabs: {
        settings: boolean;
        legend: boolean;
        description: boolean;
        changeStyle: boolean;
    };
    constructor();
    /**
     * obj: {any| IDynamicComponent}
     */
    checkIsComponentItem(layer: Layer, compProp: string): layer is Omit<Layer, 'legendImg' | 'action'> & {
        legendImg: IDynamicComponent;
        action: IDynamicComponent;
    };
    getLayerName(layer: Layer): string;
    ngOnInit(): void;
    /**
     * show or hide the layer
     */
    setLayerVisibility(selectedLayer: Layer, group?: LayerGroup): void;
    /**
     * setLayerIndex
     */
    setLayerIndex(layer: Layer, dir: any, group?: LayerGroup): void;
    /**
     * remove the Layer if possible
     */
    removeLayer(group: LayerGroup, selectedLayer: Layer): void;
    zoomTo(layer: Layer): void;
    setLayerOpacity(layer: any): void;
    checkBaselayer(layer: Layer, group?: LayerGroup): boolean;
    /**
     * is expandable if layer has legend, description or opacity can be changed
     */
    is_expandable(): boolean;
    showProperties(): void;
    switchTab(tabName: string): void;
    isSelectedStyle(styleName: string): boolean;
    executeChangeStyle(evt: Event): void;
    isFirst(layer: any): boolean;
    isLast(layer: any): boolean;
    getExpandShape(): {
        transform: string;
    };
    static ɵfac: i0.ɵɵFactoryDeclaration<LayerentryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LayerentryComponent, "ukis-layerentry", never, { "layersSvc": "layersSvc"; "mapState": "mapState"; "layer": "layer"; "group": "group"; "layerGroups": "layerGroups"; "expanded": "expanded"; "expandable": "expandable"; }, { "update": "update"; }, never, ["*"]>;
}
