import { BufferObject, WebGLVariableType, TextureObject, FramebufferObject, IndexBufferObject } from './webgl';
export interface IProgram {
    program: WebGLProgram;
    id: string;
    vertexShaderSource: string;
    fragmentShaderSource: string;
}
export declare class Program implements IProgram {
    readonly vertexShaderSource: string;
    readonly fragmentShaderSource: string;
    readonly program: WebGLProgram;
    readonly id: string;
    constructor(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string);
}
export interface IUniform {
    location: WebGLUniformLocation;
    type: WebGLVariableType;
    value: number[];
    variableName: string;
}
export declare class Uniform implements IUniform {
    readonly location: WebGLUniformLocation;
    readonly type: WebGLVariableType;
    readonly value: number[];
    readonly variableName: string;
    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, type: WebGLVariableType, data: number[]);
}
export interface ITexture {
    location: WebGLUniformLocation;
    bindPoint: number;
    texture: TextureObject;
    variableName: string;
}
export declare class Texture implements ITexture {
    readonly location: WebGLUniformLocation;
    readonly bindPoint: number;
    readonly texture: TextureObject;
    readonly variableName: string;
    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, im: HTMLImageElement | HTMLCanvasElement | TextureObject, bindPoint: number);
}
export declare class DataTexture implements ITexture {
    readonly location: WebGLUniformLocation;
    readonly bindPoint: number;
    readonly texture: TextureObject;
    readonly variableName: string;
    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, data: number[][][], bindPoint: number);
}
export interface IAttribute {
    location: number;
    value: BufferObject;
    variableName: string;
}
export declare type GlDrawingMode = 'triangles' | 'points' | 'lines';
export declare class Attribute implements IAttribute {
    readonly location: number;
    readonly value: BufferObject;
    readonly variableName: string;
    readonly drawingMode: number;
    constructor(gl: WebGLRenderingContext, program: IProgram, variableName: string, data: number[][], drawingMode?: GlDrawingMode);
}
export declare class Index {
    readonly index: IndexBufferObject;
    constructor(gl: WebGLRenderingContext, indices: number[][], drawingMode?: GlDrawingMode);
}
export declare type RenderMode = 'points' | 'lines' | 'triangles';
interface IShader {
    program: IProgram;
    index?: Index;
    attributes: IAttribute[];
    uniforms: IUniform[];
    textures: ITexture[];
    bind: (gl: WebGLRenderingContext) => void;
    render: (gl: WebGLRenderingContext, background?: number[], frameBuffer?: FramebufferObject, viewport?: [number, number, number, number]) => void;
    updateAttributeData: (gl: WebGLRenderingContext, variableName: string, newData: number[][]) => void;
    updateUniformData: (gl: WebGLRenderingContext, variableName: string, newData: number[]) => void;
    updateTextureData: (gl: WebGLRenderingContext, variableName: string, newImage: HTMLImageElement | HTMLCanvasElement) => void;
}
export declare class Shader implements IShader {
    readonly program: IProgram;
    readonly attributes: IAttribute[];
    readonly uniforms: IUniform[];
    readonly textures: ITexture[];
    readonly index?: Index;
    constructor(program: IProgram, attributes: IAttribute[], uniforms: IUniform[], textures: ITexture[], index?: Index);
    bind(gl: WebGLRenderingContext): void;
    render(gl: WebGLRenderingContext, background?: number[], frameBuffer?: FramebufferObject, viewport?: [number, number, number, number]): void;
    updateAttributeData(gl: WebGLRenderingContext, variableName: string, newData: number[][]): void;
    updateUniformData(gl: WebGLRenderingContext, variableName: string, newData: number[]): void;
    updateTextureData(gl: WebGLRenderingContext, variableName: string, newImage: HTMLImageElement | HTMLCanvasElement | number[][][]): void;
}
export declare class Framebuffer {
    readonly fbo: FramebufferObject;
    constructor(gl: WebGLRenderingContext, width: number, height: number);
}
export declare function renderLoop(fps: number, renderFunction: (tDelta: number) => void): void;
interface IEntity {
    program: IProgram;
    attributes: IAttribute[];
    uniforms: IUniform[];
    textures: ITexture[];
    update: (tDelta: number) => void;
}
export declare class Entity implements IEntity {
    readonly program: IProgram;
    readonly attributes: IAttribute[];
    readonly uniforms: IUniform[];
    readonly textures: ITexture[];
    readonly updateFunction: (tDelta: number, attrs: IAttribute[], unis: IUniform[]) => void;
    constructor(program: IProgram, attributes: IAttribute[], uniforms: IUniform[], textures: ITexture[], updateFunction: (tDelta: number, attrs: IAttribute[], unis: IUniform[]) => void);
    update(tDelta: number): void;
}
export declare class Engine {
    readonly entities: IEntity[];
    constructor();
    renderLoop(gl: WebGLRenderingContext, fps: number): void;
    addEntity(entity: IEntity): void;
    private sortEntities;
}
export {};
