export class MapState {
    constructor(zoom, center, options, extent = [-180.0, -90.0, 180.0, 90.0], time = new Date().toISOString()) {
        const defaultOptions = {
            maxzoom: 0,
            minzoom: 0,
            notifier: 'map'
        };
        this.zoom = zoom;
        this.center = center;
        this.extent = extent;
        this.time = time;
        this.options = Object.assign(defaultOptions, options);
    }
    sameCenter(center) {
        if (this.center.lat === center.lat && this.center.lon === center.lon) {
            return true;
        }
        else {
            return false;
        }
    }
    sameZoom(zoom) {
        if (this.zoom === zoom) {
            return true;
        }
        else {
            return false;
        }
    }
    sameExtent(extent) {
        const len = extent.length;
        let isSame = false;
        if (this.extent.length === len) {
            isSame = this.extent.every((v, i) => extent[i] === v);
        }
        return isSame;
    }
    sameNotifier(notifier) {
        if (this.options.notifier === notifier) {
            return true;
        }
        else {
            return false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2VydmljZXMtbWFwLXN0YXRlL3NyYy9saWIvdHlwZXMvbWFwLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCQSxNQUFNLE9BQU8sUUFBUTtJQVduQixZQUFZLElBQVksRUFBRSxNQUFrQixFQUFFLE9BQTBCLEVBQUUsU0FBcUIsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBZSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtRQUNsSyxNQUFNLGNBQWMsR0FBRztZQUNyQixPQUFPLEVBQUUsQ0FBQztZQUNWLE9BQU8sRUFBRSxDQUFDO1lBQ1YsUUFBUSxFQUFFLEtBQUs7U0FDaEIsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUdNLFVBQVUsQ0FBQyxNQUEyQjtRQUMzQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNwRSxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVNLFFBQVEsQ0FBQyxJQUF1QjtRQUNyQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRU0sVUFBVSxDQUFDLE1BQWtCO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQzlCLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN2RDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxZQUFZLENBQUMsUUFBMEM7UUFDNUQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDdEMsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSU1hcENlbnRlciB7XG4gIGxhdDogbnVtYmVyO1xuICBsb246IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWFwU3RhdGVPcHRpb25zIHtcbiAgbWF4em9vbT86IG51bWJlcjtcbiAgbWluem9vbT86IG51bWJlcjtcbiAgbm90aWZpZXI/OiAndXNlcicgfCAnbWFwJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWFwU3RhdGUge1xuICB6b29tOiBudW1iZXI7XG4gIGNlbnRlcjogSU1hcENlbnRlcjtcbiAgb3B0aW9ucz86IElNYXBTdGF0ZU9wdGlvbnM7XG4gIGV4dGVudD86IFRHZW9FeHRlbnQ7XG4gIC8qKiBpc28gODYwMSBEYXRlc3RyaW5nICovXG4gIHRpbWU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogbGlrZSBvbC5leHRlbnQ6IG1pblgsIG1pblksIG1heFgsIG1heFlcbiAqL1xuZXhwb3J0IHR5cGUgVEdlb0V4dGVudCA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHwgW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG5leHBvcnQgY2xhc3MgTWFwU3RhdGUgaW1wbGVtZW50cyBJTWFwU3RhdGUge1xuICB6b29tOiBudW1iZXI7XG4gIGNlbnRlcjoge1xuICAgIGxhdDogbnVtYmVyO1xuICAgIGxvbjogbnVtYmVyO1xuICB9O1xuICBvcHRpb25zOiBJTWFwU3RhdGVPcHRpb25zO1xuICBleHRlbnQ6IFRHZW9FeHRlbnQ7XG4gIC8qKiBpc28gODYwMSBEYXRlc3RyaW5nICovXG4gIHRpbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih6b29tOiBudW1iZXIsIGNlbnRlcjogSU1hcENlbnRlciwgb3B0aW9ucz86IElNYXBTdGF0ZU9wdGlvbnMsIGV4dGVudDogVEdlb0V4dGVudCA9IFstMTgwLjAsIC05MC4wLCAxODAuMCwgOTAuMF0sIHRpbWU6IHN0cmluZyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSkge1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgbWF4em9vbTogMCxcbiAgICAgIG1pbnpvb206IDAsXG4gICAgICBub3RpZmllcjogJ21hcCdcbiAgICB9O1xuICAgIHRoaXMuem9vbSA9IHpvb207XG4gICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQ7XG4gICAgdGhpcy50aW1lID0gdGltZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgfVxuXG5cbiAgcHVibGljIHNhbWVDZW50ZXIoY2VudGVyOiBJTWFwU3RhdGVbJ2NlbnRlciddKSB7XG4gICAgaWYgKHRoaXMuY2VudGVyLmxhdCA9PT0gY2VudGVyLmxhdCAmJiB0aGlzLmNlbnRlci5sb24gPT09IGNlbnRlci5sb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNhbWVab29tKHpvb206IElNYXBTdGF0ZVsnem9vbSddKSB7XG4gICAgaWYgKHRoaXMuem9vbSA9PT0gem9vbSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2FtZUV4dGVudChleHRlbnQ6IFRHZW9FeHRlbnQpIHtcbiAgICBjb25zdCBsZW4gPSBleHRlbnQubGVuZ3RoO1xuICAgIGxldCBpc1NhbWUgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5leHRlbnQubGVuZ3RoID09PSBsZW4pIHtcbiAgICAgIGlzU2FtZSA9IHRoaXMuZXh0ZW50LmV2ZXJ5KCh2LCBpKSA9PiBleHRlbnRbaV0gPT09IHYpO1xuICAgIH1cbiAgICByZXR1cm4gaXNTYW1lO1xuICB9XG5cbiAgcHVibGljIHNhbWVOb3RpZmllcihub3RpZmllcjogSU1hcFN0YXRlWydvcHRpb25zJ11bJ25vdGlmaWVyJ10pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm5vdGlmaWVyID09PSBub3RpZmllcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==