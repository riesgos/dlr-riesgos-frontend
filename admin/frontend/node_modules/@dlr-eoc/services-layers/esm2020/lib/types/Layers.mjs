/** can be raster and vector */
export const TmsLayertype = 'tms';
export const WmsLayertype = 'wms';
export const WmtsLayertype = 'wmts';
export const XyzLayertype = 'xyz';
export const GeojsonLayertype = 'geojson';
export const KmlLayertype = 'kml';
export const WfsLayertype = 'wfs';
/** can be raster and vector */
export const CustomLayertype = 'custom';
/** can have multiple layers raster, vector... */
export const StackedLayertype = 'stacked';
export const Filtertypes = {
    Baselayers: 'Baselayers',
    Overlays: 'Overlays',
    Layers: 'Layers'
};
/**
 * @deprecated The method should not be used because it can be false positive
 *
 * CustomLayertype and TmsLayertype can be raster and vector.
 * You have to double check by yourself later!
 */
export function isVectorLayertype(inpt) {
    return [GeojsonLayertype, WfsLayertype, CustomLayertype, KmlLayertype, TmsLayertype].includes(inpt);
}
/**
 * @deprecated The method should not be used because it can be false positive
 *
 * CustomLayertype and TmsLayertype can be raster and vector.
 * You have to double check by yourself later!
 */
export function isRasterLayertype(inpt) {
    return [WmsLayertype, WmtsLayertype, XyzLayertype, CustomLayertype, TmsLayertype].includes(inpt);
}
export function isLayertype(type) {
    return [TmsLayertype, WmsLayertype, WmtsLayertype, XyzLayertype, GeojsonLayertype, KmlLayertype, WfsLayertype, CustomLayertype].includes(type);
}
/**
 * Classes for layer construction
 */
export class Layer {
    constructor(options) {
        this.name = '';
        this.id = '';
        this.opacity = 1;
        this.visible = true;
        this.removable = false;
        this.filtertype = 'Layers';
        this.continuousWorld = false;
        this.expanded = false;
        Object.assign(this, options);
    }
    get time() {
        return this.protTime;
    }
    set time(time) {
        this.protTime = time;
    }
}
export class RasterLayer extends Layer {
    constructor(options) {
        super(options);
        // if styles are given, set params and legendImg accordingly.
        if (this.styles && this.styles.length > 0) {
            let defaultStyle = this.styles.find(s => s.default);
            if (!defaultStyle) {
                defaultStyle = this.styles[0];
            }
            this.legendImg = defaultStyle.legendURL;
            if (this.params) {
                if (this.type === WmsLayertype) {
                    this.params.STYLES = defaultStyle.name;
                }
                else if (this.type === WmtsLayertype) {
                    this.params.style = defaultStyle.name;
                }
                this.params.STYLES = defaultStyle.name;
            }
            else if (this.type === WmtsLayertype) {
                if (!this.params) {
                    this.params = {};
                }
                this.params.style = defaultStyle.name;
            }
        }
    }
    set time(time) {
        if (this.params) {
            this.params.TIME = time;
        }
        this.protTime = time;
    }
    get time() {
        return this.protTime;
    }
}
/**
 * @deprecated The method should not be used because it can be false positive
 */
export const isRasterLayer = (layer) => {
    return isRasterLayertype(layer.type);
};
export class VectorLayer extends Layer {
    constructor(options) {
        super(options);
    }
}
/**
 * @deprecated The method should not be used because it can be false positive
 */
export const isVectorLayer = (layer) => {
    return isVectorLayertype(layer.type);
};
export class CustomLayer extends Layer {
    constructor(options) {
        super(options);
        this.type = CustomLayertype;
        // tslint:disable-next-line: variable-name
        this.custom_layer = {};
        Object.assign(this, options);
    }
}
export class StackedLayer extends Layer {
    constructor(options) {
        super(options);
        this.type = StackedLayertype;
        this.layers = [];
        Object.assign(this, options);
    }
}
//# sourceMappingURL=data:application/json;base64,